/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HyperOneApi);
  }
}(this, function(expect, HyperOneApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new HyperOneApi.IpApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('IpApi', function() {
    describe('ipActionAllocate', function() {
      it('should call ipActionAllocate successfully', function(done) {
        //uncomment below and update the code to test ipActionAllocate
        //instance.ipActionAllocate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipActionAssociate', function() {
      it('should call ipActionAssociate successfully', function(done) {
        //uncomment below and update the code to test ipActionAssociate
        //instance.ipActionAssociate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipActionDisassociate', function() {
      it('should call ipActionDisassociate successfully', function(done) {
        //uncomment below and update the code to test ipActionDisassociate
        //instance.ipActionDisassociate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipActionRelease', function() {
      it('should call ipActionRelease successfully', function(done) {
        //uncomment below and update the code to test ipActionRelease
        //instance.ipActionRelease(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipActionTransfer', function() {
      it('should call ipActionTransfer successfully', function(done) {
        //uncomment below and update the code to test ipActionTransfer
        //instance.ipActionTransfer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipCreate', function() {
      it('should call ipCreate successfully', function(done) {
        //uncomment below and update the code to test ipCreate
        //instance.ipCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipDelete', function() {
      it('should call ipDelete successfully', function(done) {
        //uncomment below and update the code to test ipDelete
        //instance.ipDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipDeleteAccessrightsIdentity', function() {
      it('should call ipDeleteAccessrightsIdentity successfully', function(done) {
        //uncomment below and update the code to test ipDeleteAccessrightsIdentity
        //instance.ipDeleteAccessrightsIdentity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipDeleteTagKey', function() {
      it('should call ipDeleteTagKey successfully', function(done) {
        //uncomment below and update the code to test ipDeleteTagKey
        //instance.ipDeleteTagKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipGetServicesServiceId', function() {
      it('should call ipGetServicesServiceId successfully', function(done) {
        //uncomment below and update the code to test ipGetServicesServiceId
        //instance.ipGetServicesServiceId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipGetTag', function() {
      it('should call ipGetTag successfully', function(done) {
        //uncomment below and update the code to test ipGetTag
        //instance.ipGetTag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipList', function() {
      it('should call ipList successfully', function(done) {
        //uncomment below and update the code to test ipList
        //instance.ipList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipListAccessrights', function() {
      it('should call ipListAccessrights successfully', function(done) {
        //uncomment below and update the code to test ipListAccessrights
        //instance.ipListAccessrights(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipListQueue', function() {
      it('should call ipListQueue successfully', function(done) {
        //uncomment below and update the code to test ipListQueue
        //instance.ipListQueue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipListServices', function() {
      it('should call ipListServices successfully', function(done) {
        //uncomment below and update the code to test ipListServices
        //instance.ipListServices(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipPatchTag', function() {
      it('should call ipPatchTag successfully', function(done) {
        //uncomment below and update the code to test ipPatchTag
        //instance.ipPatchTag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipPostAccessrights', function() {
      it('should call ipPostAccessrights successfully', function(done) {
        //uncomment below and update the code to test ipPostAccessrights
        //instance.ipPostAccessrights(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipShow', function() {
      it('should call ipShow successfully', function(done) {
        //uncomment below and update the code to test ipShow
        //instance.ipShow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipUpdate', function() {
      it('should call ipUpdate successfully', function(done) {
        //uncomment below and update the code to test ipUpdate
        //instance.ipUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
