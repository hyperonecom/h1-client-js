/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HyperOneApi);
  }
}(this, function(expect, HyperOneApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new HyperOneApi.NetworkApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('NetworkApi', function() {
    describe('networkCreate', function() {
      it('should call networkCreate successfully', function(done) {
        //uncomment below and update the code to test networkCreate
        //instance.networkCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('networkDelete', function() {
      it('should call networkDelete successfully', function(done) {
        //uncomment below and update the code to test networkDelete
        //instance.networkDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('networkDeleteAccessrightsIdentity', function() {
      it('should call networkDeleteAccessrightsIdentity successfully', function(done) {
        //uncomment below and update the code to test networkDeleteAccessrightsIdentity
        //instance.networkDeleteAccessrightsIdentity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('networkDeleteIpIpId', function() {
      it('should call networkDeleteIpIpId successfully', function(done) {
        //uncomment below and update the code to test networkDeleteIpIpId
        //instance.networkDeleteIpIpId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('networkDeleteTagKey', function() {
      it('should call networkDeleteTagKey successfully', function(done) {
        //uncomment below and update the code to test networkDeleteTagKey
        //instance.networkDeleteTagKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('networkGetIpIpId', function() {
      it('should call networkGetIpIpId successfully', function(done) {
        //uncomment below and update the code to test networkGetIpIpId
        //instance.networkGetIpIpId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('networkGetServicesServiceId', function() {
      it('should call networkGetServicesServiceId successfully', function(done) {
        //uncomment below and update the code to test networkGetServicesServiceId
        //instance.networkGetServicesServiceId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('networkGetTag', function() {
      it('should call networkGetTag successfully', function(done) {
        //uncomment below and update the code to test networkGetTag
        //instance.networkGetTag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('networkList', function() {
      it('should call networkList successfully', function(done) {
        //uncomment below and update the code to test networkList
        //instance.networkList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('networkListAccessrights', function() {
      it('should call networkListAccessrights successfully', function(done) {
        //uncomment below and update the code to test networkListAccessrights
        //instance.networkListAccessrights(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('networkListIp', function() {
      it('should call networkListIp successfully', function(done) {
        //uncomment below and update the code to test networkListIp
        //instance.networkListIp(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('networkListQueue', function() {
      it('should call networkListQueue successfully', function(done) {
        //uncomment below and update the code to test networkListQueue
        //instance.networkListQueue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('networkListServices', function() {
      it('should call networkListServices successfully', function(done) {
        //uncomment below and update the code to test networkListServices
        //instance.networkListServices(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('networkPatchTag', function() {
      it('should call networkPatchTag successfully', function(done) {
        //uncomment below and update the code to test networkPatchTag
        //instance.networkPatchTag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('networkPostAccessrights', function() {
      it('should call networkPostAccessrights successfully', function(done) {
        //uncomment below and update the code to test networkPostAccessrights
        //instance.networkPostAccessrights(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('networkPostIp', function() {
      it('should call networkPostIp successfully', function(done) {
        //uncomment below and update the code to test networkPostIp
        //instance.networkPostIp(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('networkShow', function() {
      it('should call networkShow successfully', function(done) {
        //uncomment below and update the code to test networkShow
        //instance.networkShow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('networkUpdate', function() {
      it('should call networkUpdate successfully', function(done) {
        //uncomment below and update the code to test networkUpdate
        //instance.networkUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
