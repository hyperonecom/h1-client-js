/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HyperOneApi);
  }
}(this, function(expect, HyperOneApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new HyperOneApi.VmApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('VmApi', function() {
    describe('vmActionFlavour', function() {
      it('should call vmActionFlavour successfully', function(done) {
        //uncomment below and update the code to test vmActionFlavour
        //instance.vmActionFlavour(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vmActionImage', function() {
      it('should call vmActionImage successfully', function(done) {
        //uncomment below and update the code to test vmActionImage
        //instance.vmActionImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vmActionPasswordReset', function() {
      it('should call vmActionPasswordReset successfully', function(done) {
        //uncomment below and update the code to test vmActionPasswordReset
        //instance.vmActionPasswordReset(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vmActionRename', function() {
      it('should call vmActionRename successfully', function(done) {
        //uncomment below and update the code to test vmActionRename
        //instance.vmActionRename(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vmActionRestart', function() {
      it('should call vmActionRestart successfully', function(done) {
        //uncomment below and update the code to test vmActionRestart
        //instance.vmActionRestart(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vmActionStart', function() {
      it('should call vmActionStart successfully', function(done) {
        //uncomment below and update the code to test vmActionStart
        //instance.vmActionStart(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vmActionStop', function() {
      it('should call vmActionStop successfully', function(done) {
        //uncomment below and update the code to test vmActionStop
        //instance.vmActionStop(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vmActionTurnoff', function() {
      it('should call vmActionTurnoff successfully', function(done) {
        //uncomment below and update the code to test vmActionTurnoff
        //instance.vmActionTurnoff(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vmCreate', function() {
      it('should call vmCreate successfully', function(done) {
        //uncomment below and update the code to test vmCreate
        //instance.vmCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vmDelete', function() {
      it('should call vmDelete successfully', function(done) {
        //uncomment below and update the code to test vmDelete
        //instance.vmDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vmDeleteAccessrightsIdentity', function() {
      it('should call vmDeleteAccessrightsIdentity successfully', function(done) {
        //uncomment below and update the code to test vmDeleteAccessrightsIdentity
        //instance.vmDeleteAccessrightsIdentity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vmDeleteHddDiskId', function() {
      it('should call vmDeleteHddDiskId successfully', function(done) {
        //uncomment below and update the code to test vmDeleteHddDiskId
        //instance.vmDeleteHddDiskId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vmDeleteNetadpNetadpId', function() {
      it('should call vmDeleteNetadpNetadpId successfully', function(done) {
        //uncomment below and update the code to test vmDeleteNetadpNetadpId
        //instance.vmDeleteNetadpNetadpId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vmDeleteTagKey', function() {
      it('should call vmDeleteTagKey successfully', function(done) {
        //uncomment below and update the code to test vmDeleteTagKey
        //instance.vmDeleteTagKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vmGetServicesServiceId', function() {
      it('should call vmGetServicesServiceId successfully', function(done) {
        //uncomment below and update the code to test vmGetServicesServiceId
        //instance.vmGetServicesServiceId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vmGetTag', function() {
      it('should call vmGetTag successfully', function(done) {
        //uncomment below and update the code to test vmGetTag
        //instance.vmGetTag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vmList', function() {
      it('should call vmList successfully', function(done) {
        //uncomment below and update the code to test vmList
        //instance.vmList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vmListAccessrights', function() {
      it('should call vmListAccessrights successfully', function(done) {
        //uncomment below and update the code to test vmListAccessrights
        //instance.vmListAccessrights(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vmListHdd', function() {
      it('should call vmListHdd successfully', function(done) {
        //uncomment below and update the code to test vmListHdd
        //instance.vmListHdd(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vmListNetadp', function() {
      it('should call vmListNetadp successfully', function(done) {
        //uncomment below and update the code to test vmListNetadp
        //instance.vmListNetadp(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vmListQueue', function() {
      it('should call vmListQueue successfully', function(done) {
        //uncomment below and update the code to test vmListQueue
        //instance.vmListQueue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vmListServices', function() {
      it('should call vmListServices successfully', function(done) {
        //uncomment below and update the code to test vmListServices
        //instance.vmListServices(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vmPatchTag', function() {
      it('should call vmPatchTag successfully', function(done) {
        //uncomment below and update the code to test vmPatchTag
        //instance.vmPatchTag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vmPostAccessrights', function() {
      it('should call vmPostAccessrights successfully', function(done) {
        //uncomment below and update the code to test vmPostAccessrights
        //instance.vmPostAccessrights(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vmPostHdd', function() {
      it('should call vmPostHdd successfully', function(done) {
        //uncomment below and update the code to test vmPostHdd
        //instance.vmPostHdd(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vmPostNetadp', function() {
      it('should call vmPostNetadp successfully', function(done) {
        //uncomment below and update the code to test vmPostNetadp
        //instance.vmPostNetadp(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vmShow', function() {
      it('should call vmShow successfully', function(done) {
        //uncomment below and update the code to test vmShow
        //instance.vmShow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vmUpdate', function() {
      it('should call vmUpdate successfully', function(done) {
        //uncomment below and update the code to test vmUpdate
        //instance.vmUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
