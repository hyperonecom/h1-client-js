/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HyperOneApi);
  }
}(this, function(expect, HyperOneApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new HyperOneApi.OrganisationApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('OrganisationApi', function() {
    describe('organisationActionTransferAccept', function() {
      it('should call organisationActionTransferAccept successfully', function(done) {
        //uncomment below and update the code to test organisationActionTransferAccept
        //instance.organisationActionTransferAccept(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('organisationCreate', function() {
      it('should call organisationCreate successfully', function(done) {
        //uncomment below and update the code to test organisationCreate
        //instance.organisationCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('organisationDeleteAccessrightsIdentity', function() {
      it('should call organisationDeleteAccessrightsIdentity successfully', function(done) {
        //uncomment below and update the code to test organisationDeleteAccessrightsIdentity
        //instance.organisationDeleteAccessrightsIdentity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('organisationDeleteTagKey', function() {
      it('should call organisationDeleteTagKey successfully', function(done) {
        //uncomment below and update the code to test organisationDeleteTagKey
        //instance.organisationDeleteTagKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('organisationGetTag', function() {
      it('should call organisationGetTag successfully', function(done) {
        //uncomment below and update the code to test organisationGetTag
        //instance.organisationGetTag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('organisationList', function() {
      it('should call organisationList successfully', function(done) {
        //uncomment below and update the code to test organisationList
        //instance.organisationList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('organisationListAccessrights', function() {
      it('should call organisationListAccessrights successfully', function(done) {
        //uncomment below and update the code to test organisationListAccessrights
        //instance.organisationListAccessrights(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('organisationListQueue', function() {
      it('should call organisationListQueue successfully', function(done) {
        //uncomment below and update the code to test organisationListQueue
        //instance.organisationListQueue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('organisationPatchTag', function() {
      it('should call organisationPatchTag successfully', function(done) {
        //uncomment below and update the code to test organisationPatchTag
        //instance.organisationPatchTag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('organisationPostAccessrights', function() {
      it('should call organisationPostAccessrights successfully', function(done) {
        //uncomment below and update the code to test organisationPostAccessrights
        //instance.organisationPostAccessrights(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('organisationShow', function() {
      it('should call organisationShow successfully', function(done) {
        //uncomment below and update the code to test organisationShow
        //instance.organisationShow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('organisationUpdate', function() {
      it('should call organisationUpdate successfully', function(done) {
        //uncomment below and update the code to test organisationUpdate
        //instance.organisationUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
