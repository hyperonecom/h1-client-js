/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HyperoneClient);
  }
}(this, function(expect, HyperoneClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new HyperoneClient.ZoneApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ZoneApi', function() {
    describe('zoneCreate', function() {
      it('should call zoneCreate successfully', function(done) {
        //uncomment below and update the code to test zoneCreate
        //instance.zoneCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('zoneDelete', function() {
      it('should call zoneDelete successfully', function(done) {
        //uncomment below and update the code to test zoneDelete
        //instance.zoneDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('zoneDeleteAccessrightsIdentity', function() {
      it('should call zoneDeleteAccessrightsIdentity successfully', function(done) {
        //uncomment below and update the code to test zoneDeleteAccessrightsIdentity
        //instance.zoneDeleteAccessrightsIdentity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('zoneDeleteRecordsetRecordsetId', function() {
      it('should call zoneDeleteRecordsetRecordsetId successfully', function(done) {
        //uncomment below and update the code to test zoneDeleteRecordsetRecordsetId
        //instance.zoneDeleteRecordsetRecordsetId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('zoneDeleteTagKey', function() {
      it('should call zoneDeleteTagKey successfully', function(done) {
        //uncomment below and update the code to test zoneDeleteTagKey
        //instance.zoneDeleteTagKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('zoneGetRecordsetRecordsetId', function() {
      it('should call zoneGetRecordsetRecordsetId successfully', function(done) {
        //uncomment below and update the code to test zoneGetRecordsetRecordsetId
        //instance.zoneGetRecordsetRecordsetId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('zoneGetServicesServiceId', function() {
      it('should call zoneGetServicesServiceId successfully', function(done) {
        //uncomment below and update the code to test zoneGetServicesServiceId
        //instance.zoneGetServicesServiceId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('zoneGetTag', function() {
      it('should call zoneGetTag successfully', function(done) {
        //uncomment below and update the code to test zoneGetTag
        //instance.zoneGetTag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('zoneList', function() {
      it('should call zoneList successfully', function(done) {
        //uncomment below and update the code to test zoneList
        //instance.zoneList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('zoneListAccessrights', function() {
      it('should call zoneListAccessrights successfully', function(done) {
        //uncomment below and update the code to test zoneListAccessrights
        //instance.zoneListAccessrights(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('zoneListQueue', function() {
      it('should call zoneListQueue successfully', function(done) {
        //uncomment below and update the code to test zoneListQueue
        //instance.zoneListQueue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('zoneListRecordset', function() {
      it('should call zoneListRecordset successfully', function(done) {
        //uncomment below and update the code to test zoneListRecordset
        //instance.zoneListRecordset(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('zoneListRecordsetRecordsetIdrecord', function() {
      it('should call zoneListRecordsetRecordsetIdrecord successfully', function(done) {
        //uncomment below and update the code to test zoneListRecordsetRecordsetIdrecord
        //instance.zoneListRecordsetRecordsetIdrecord(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('zoneListServices', function() {
      it('should call zoneListServices successfully', function(done) {
        //uncomment below and update the code to test zoneListServices
        //instance.zoneListServices(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('zonePatchRecordsetRecordsetId', function() {
      it('should call zonePatchRecordsetRecordsetId successfully', function(done) {
        //uncomment below and update the code to test zonePatchRecordsetRecordsetId
        //instance.zonePatchRecordsetRecordsetId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('zonePatchTag', function() {
      it('should call zonePatchTag successfully', function(done) {
        //uncomment below and update the code to test zonePatchTag
        //instance.zonePatchTag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('zonePostAccessrights', function() {
      it('should call zonePostAccessrights successfully', function(done) {
        //uncomment below and update the code to test zonePostAccessrights
        //instance.zonePostAccessrights(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('zonePostRecordset', function() {
      it('should call zonePostRecordset successfully', function(done) {
        //uncomment below and update the code to test zonePostRecordset
        //instance.zonePostRecordset(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('zonePutRecordsetRecordsetIdrecord', function() {
      it('should call zonePutRecordsetRecordsetIdrecord successfully', function(done) {
        //uncomment below and update the code to test zonePutRecordsetRecordsetIdrecord
        //instance.zonePutRecordsetRecordsetIdrecord(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('zonePutTag', function() {
      it('should call zonePutTag successfully', function(done) {
        //uncomment below and update the code to test zonePutTag
        //instance.zonePutTag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('zoneShow', function() {
      it('should call zoneShow successfully', function(done) {
        //uncomment below and update the code to test zoneShow
        //instance.zoneShow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('zoneUpdate', function() {
      it('should call zoneUpdate successfully', function(done) {
        //uncomment below and update the code to test zoneUpdate
        //instance.zoneUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
