/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HyperOneApi);
  }
}(this, function(expect, HyperOneApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new HyperOneApi.VaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('VaultApi', function() {
    describe('vaultActionResize', function() {
      it('should call vaultActionResize successfully', function(done) {
        //uncomment below and update the code to test vaultActionResize
        //instance.vaultActionResize(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vaultActionSnapshot', function() {
      it('should call vaultActionSnapshot successfully', function(done) {
        //uncomment below and update the code to test vaultActionSnapshot
        //instance.vaultActionSnapshot(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vaultActionStart', function() {
      it('should call vaultActionStart successfully', function(done) {
        //uncomment below and update the code to test vaultActionStart
        //instance.vaultActionStart(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vaultActionStop', function() {
      it('should call vaultActionStop successfully', function(done) {
        //uncomment below and update the code to test vaultActionStop
        //instance.vaultActionStop(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vaultCreate', function() {
      it('should call vaultCreate successfully', function(done) {
        //uncomment below and update the code to test vaultCreate
        //instance.vaultCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vaultDelete', function() {
      it('should call vaultDelete successfully', function(done) {
        //uncomment below and update the code to test vaultDelete
        //instance.vaultDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vaultDeleteAccessrightsIdentity', function() {
      it('should call vaultDeleteAccessrightsIdentity successfully', function(done) {
        //uncomment below and update the code to test vaultDeleteAccessrightsIdentity
        //instance.vaultDeleteAccessrightsIdentity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vaultDeleteCredentialcertificateId', function() {
      it('should call vaultDeleteCredentialcertificateId successfully', function(done) {
        //uncomment below and update the code to test vaultDeleteCredentialcertificateId
        //instance.vaultDeleteCredentialcertificateId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vaultDeleteCredentialpasswordId', function() {
      it('should call vaultDeleteCredentialpasswordId successfully', function(done) {
        //uncomment below and update the code to test vaultDeleteCredentialpasswordId
        //instance.vaultDeleteCredentialpasswordId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vaultDeleteTagKey', function() {
      it('should call vaultDeleteTagKey successfully', function(done) {
        //uncomment below and update the code to test vaultDeleteTagKey
        //instance.vaultDeleteTagKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vaultGetCredentialcertificateId', function() {
      it('should call vaultGetCredentialcertificateId successfully', function(done) {
        //uncomment below and update the code to test vaultGetCredentialcertificateId
        //instance.vaultGetCredentialcertificateId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vaultGetCredentialpasswordId', function() {
      it('should call vaultGetCredentialpasswordId successfully', function(done) {
        //uncomment below and update the code to test vaultGetCredentialpasswordId
        //instance.vaultGetCredentialpasswordId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vaultGetServicesServiceId', function() {
      it('should call vaultGetServicesServiceId successfully', function(done) {
        //uncomment below and update the code to test vaultGetServicesServiceId
        //instance.vaultGetServicesServiceId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vaultGetTag', function() {
      it('should call vaultGetTag successfully', function(done) {
        //uncomment below and update the code to test vaultGetTag
        //instance.vaultGetTag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vaultList', function() {
      it('should call vaultList successfully', function(done) {
        //uncomment below and update the code to test vaultList
        //instance.vaultList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vaultListAccessrights', function() {
      it('should call vaultListAccessrights successfully', function(done) {
        //uncomment below and update the code to test vaultListAccessrights
        //instance.vaultListAccessrights(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vaultListCredentialcertificate', function() {
      it('should call vaultListCredentialcertificate successfully', function(done) {
        //uncomment below and update the code to test vaultListCredentialcertificate
        //instance.vaultListCredentialcertificate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vaultListCredentialpassword', function() {
      it('should call vaultListCredentialpassword successfully', function(done) {
        //uncomment below and update the code to test vaultListCredentialpassword
        //instance.vaultListCredentialpassword(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vaultListQueue', function() {
      it('should call vaultListQueue successfully', function(done) {
        //uncomment below and update the code to test vaultListQueue
        //instance.vaultListQueue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vaultListServices', function() {
      it('should call vaultListServices successfully', function(done) {
        //uncomment below and update the code to test vaultListServices
        //instance.vaultListServices(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vaultPatchCredentialcertificateId', function() {
      it('should call vaultPatchCredentialcertificateId successfully', function(done) {
        //uncomment below and update the code to test vaultPatchCredentialcertificateId
        //instance.vaultPatchCredentialcertificateId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vaultPatchCredentialpasswordId', function() {
      it('should call vaultPatchCredentialpasswordId successfully', function(done) {
        //uncomment below and update the code to test vaultPatchCredentialpasswordId
        //instance.vaultPatchCredentialpasswordId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vaultPatchTag', function() {
      it('should call vaultPatchTag successfully', function(done) {
        //uncomment below and update the code to test vaultPatchTag
        //instance.vaultPatchTag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vaultPostAccessrights', function() {
      it('should call vaultPostAccessrights successfully', function(done) {
        //uncomment below and update the code to test vaultPostAccessrights
        //instance.vaultPostAccessrights(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vaultPostCredentialcertificate', function() {
      it('should call vaultPostCredentialcertificate successfully', function(done) {
        //uncomment below and update the code to test vaultPostCredentialcertificate
        //instance.vaultPostCredentialcertificate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vaultPostCredentialpassword', function() {
      it('should call vaultPostCredentialpassword successfully', function(done) {
        //uncomment below and update the code to test vaultPostCredentialpassword
        //instance.vaultPostCredentialpassword(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vaultShow', function() {
      it('should call vaultShow successfully', function(done) {
        //uncomment below and update the code to test vaultShow
        //instance.vaultShow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vaultUpdate', function() {
      it('should call vaultUpdate successfully', function(done) {
        //uncomment below and update the code to test vaultUpdate
        //instance.vaultUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
