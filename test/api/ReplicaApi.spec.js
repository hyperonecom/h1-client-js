/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HyperOneApi);
  }
}(this, function(expect, HyperOneApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new HyperOneApi.ReplicaApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ReplicaApi', function() {
    describe('replicaActionImage', function() {
      it('should call replicaActionImage successfully', function(done) {
        //uncomment below and update the code to test replicaActionImage
        //instance.replicaActionImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replicaCreate', function() {
      it('should call replicaCreate successfully', function(done) {
        //uncomment below and update the code to test replicaCreate
        //instance.replicaCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replicaDelete', function() {
      it('should call replicaDelete successfully', function(done) {
        //uncomment below and update the code to test replicaDelete
        //instance.replicaDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replicaDeleteAccessrightsIdentity', function() {
      it('should call replicaDeleteAccessrightsIdentity successfully', function(done) {
        //uncomment below and update the code to test replicaDeleteAccessrightsIdentity
        //instance.replicaDeleteAccessrightsIdentity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replicaDeleteTagKey', function() {
      it('should call replicaDeleteTagKey successfully', function(done) {
        //uncomment below and update the code to test replicaDeleteTagKey
        //instance.replicaDeleteTagKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replicaGetServicesServiceId', function() {
      it('should call replicaGetServicesServiceId successfully', function(done) {
        //uncomment below and update the code to test replicaGetServicesServiceId
        //instance.replicaGetServicesServiceId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replicaGetTag', function() {
      it('should call replicaGetTag successfully', function(done) {
        //uncomment below and update the code to test replicaGetTag
        //instance.replicaGetTag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replicaList', function() {
      it('should call replicaList successfully', function(done) {
        //uncomment below and update the code to test replicaList
        //instance.replicaList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replicaListAccessrights', function() {
      it('should call replicaListAccessrights successfully', function(done) {
        //uncomment below and update the code to test replicaListAccessrights
        //instance.replicaListAccessrights(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replicaListQueue', function() {
      it('should call replicaListQueue successfully', function(done) {
        //uncomment below and update the code to test replicaListQueue
        //instance.replicaListQueue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replicaListServices', function() {
      it('should call replicaListServices successfully', function(done) {
        //uncomment below and update the code to test replicaListServices
        //instance.replicaListServices(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replicaPatchTag', function() {
      it('should call replicaPatchTag successfully', function(done) {
        //uncomment below and update the code to test replicaPatchTag
        //instance.replicaPatchTag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replicaPostAccessrights', function() {
      it('should call replicaPostAccessrights successfully', function(done) {
        //uncomment below and update the code to test replicaPostAccessrights
        //instance.replicaPostAccessrights(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replicaShow', function() {
      it('should call replicaShow successfully', function(done) {
        //uncomment below and update the code to test replicaShow
        //instance.replicaShow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
