/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HyperOneApi);
  }
}(this, function(expect, HyperOneApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new HyperOneApi.VolumeApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('VolumeApi', function() {
    describe('volumeCreate', function() {
      it('should call volumeCreate successfully', function(done) {
        //uncomment below and update the code to test volumeCreate
        //instance.volumeCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('volumeDelete', function() {
      it('should call volumeDelete successfully', function(done) {
        //uncomment below and update the code to test volumeDelete
        //instance.volumeDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('volumeDeleteAccessrightsIdentity', function() {
      it('should call volumeDeleteAccessrightsIdentity successfully', function(done) {
        //uncomment below and update the code to test volumeDeleteAccessrightsIdentity
        //instance.volumeDeleteAccessrightsIdentity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('volumeDeleteTagKey', function() {
      it('should call volumeDeleteTagKey successfully', function(done) {
        //uncomment below and update the code to test volumeDeleteTagKey
        //instance.volumeDeleteTagKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('volumeGetServicesServiceId', function() {
      it('should call volumeGetServicesServiceId successfully', function(done) {
        //uncomment below and update the code to test volumeGetServicesServiceId
        //instance.volumeGetServicesServiceId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('volumeGetTag', function() {
      it('should call volumeGetTag successfully', function(done) {
        //uncomment below and update the code to test volumeGetTag
        //instance.volumeGetTag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('volumeList', function() {
      it('should call volumeList successfully', function(done) {
        //uncomment below and update the code to test volumeList
        //instance.volumeList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('volumeListAccessrights', function() {
      it('should call volumeListAccessrights successfully', function(done) {
        //uncomment below and update the code to test volumeListAccessrights
        //instance.volumeListAccessrights(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('volumeListQueue', function() {
      it('should call volumeListQueue successfully', function(done) {
        //uncomment below and update the code to test volumeListQueue
        //instance.volumeListQueue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('volumeListServices', function() {
      it('should call volumeListServices successfully', function(done) {
        //uncomment below and update the code to test volumeListServices
        //instance.volumeListServices(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('volumePatchTag', function() {
      it('should call volumePatchTag successfully', function(done) {
        //uncomment below and update the code to test volumePatchTag
        //instance.volumePatchTag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('volumePostAccessrights', function() {
      it('should call volumePostAccessrights successfully', function(done) {
        //uncomment below and update the code to test volumePostAccessrights
        //instance.volumePostAccessrights(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('volumeShow', function() {
      it('should call volumeShow successfully', function(done) {
        //uncomment below and update the code to test volumeShow
        //instance.volumeShow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('volumeUpdate', function() {
      it('should call volumeUpdate successfully', function(done) {
        //uncomment below and update the code to test volumeUpdate
        //instance.volumeUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
