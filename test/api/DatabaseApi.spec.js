/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HyperoneClient);
  }
}(this, function(expect, HyperoneClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new HyperoneClient.DatabaseApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DatabaseApi', function() {
    describe('databaseActionStart', function() {
      it('should call databaseActionStart successfully', function(done) {
        //uncomment below and update the code to test databaseActionStart
        //instance.databaseActionStart(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('databaseActionStop', function() {
      it('should call databaseActionStop successfully', function(done) {
        //uncomment below and update the code to test databaseActionStop
        //instance.databaseActionStop(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('databaseActionTransfer', function() {
      it('should call databaseActionTransfer successfully', function(done) {
        //uncomment below and update the code to test databaseActionTransfer
        //instance.databaseActionTransfer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('databaseCreate', function() {
      it('should call databaseCreate successfully', function(done) {
        //uncomment below and update the code to test databaseCreate
        //instance.databaseCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('databaseDelete', function() {
      it('should call databaseDelete successfully', function(done) {
        //uncomment below and update the code to test databaseDelete
        //instance.databaseDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('databaseDeleteAccessrightsIdentity', function() {
      it('should call databaseDeleteAccessrightsIdentity successfully', function(done) {
        //uncomment below and update the code to test databaseDeleteAccessrightsIdentity
        //instance.databaseDeleteAccessrightsIdentity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('databaseDeleteCredentialId', function() {
      it('should call databaseDeleteCredentialId successfully', function(done) {
        //uncomment below and update the code to test databaseDeleteCredentialId
        //instance.databaseDeleteCredentialId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('databaseDeleteCredentialpasswordId', function() {
      it('should call databaseDeleteCredentialpasswordId successfully', function(done) {
        //uncomment below and update the code to test databaseDeleteCredentialpasswordId
        //instance.databaseDeleteCredentialpasswordId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('databaseDeleteTagKey', function() {
      it('should call databaseDeleteTagKey successfully', function(done) {
        //uncomment below and update the code to test databaseDeleteTagKey
        //instance.databaseDeleteTagKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('databaseGetCredentialId', function() {
      it('should call databaseGetCredentialId successfully', function(done) {
        //uncomment below and update the code to test databaseGetCredentialId
        //instance.databaseGetCredentialId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('databaseGetCredentialpasswordId', function() {
      it('should call databaseGetCredentialpasswordId successfully', function(done) {
        //uncomment below and update the code to test databaseGetCredentialpasswordId
        //instance.databaseGetCredentialpasswordId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('databaseGetServicesServiceId', function() {
      it('should call databaseGetServicesServiceId successfully', function(done) {
        //uncomment below and update the code to test databaseGetServicesServiceId
        //instance.databaseGetServicesServiceId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('databaseGetTag', function() {
      it('should call databaseGetTag successfully', function(done) {
        //uncomment below and update the code to test databaseGetTag
        //instance.databaseGetTag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('databaseList', function() {
      it('should call databaseList successfully', function(done) {
        //uncomment below and update the code to test databaseList
        //instance.databaseList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('databaseListAccessrights', function() {
      it('should call databaseListAccessrights successfully', function(done) {
        //uncomment below and update the code to test databaseListAccessrights
        //instance.databaseListAccessrights(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('databaseListCredential', function() {
      it('should call databaseListCredential successfully', function(done) {
        //uncomment below and update the code to test databaseListCredential
        //instance.databaseListCredential(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('databaseListCredentialpassword', function() {
      it('should call databaseListCredentialpassword successfully', function(done) {
        //uncomment below and update the code to test databaseListCredentialpassword
        //instance.databaseListCredentialpassword(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('databaseListQueue', function() {
      it('should call databaseListQueue successfully', function(done) {
        //uncomment below and update the code to test databaseListQueue
        //instance.databaseListQueue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('databaseListServices', function() {
      it('should call databaseListServices successfully', function(done) {
        //uncomment below and update the code to test databaseListServices
        //instance.databaseListServices(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('databasePatchCredentialId', function() {
      it('should call databasePatchCredentialId successfully', function(done) {
        //uncomment below and update the code to test databasePatchCredentialId
        //instance.databasePatchCredentialId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('databasePatchCredentialpasswordId', function() {
      it('should call databasePatchCredentialpasswordId successfully', function(done) {
        //uncomment below and update the code to test databasePatchCredentialpasswordId
        //instance.databasePatchCredentialpasswordId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('databasePatchTag', function() {
      it('should call databasePatchTag successfully', function(done) {
        //uncomment below and update the code to test databasePatchTag
        //instance.databasePatchTag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('databasePostAccessrights', function() {
      it('should call databasePostAccessrights successfully', function(done) {
        //uncomment below and update the code to test databasePostAccessrights
        //instance.databasePostAccessrights(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('databasePostCredential', function() {
      it('should call databasePostCredential successfully', function(done) {
        //uncomment below and update the code to test databasePostCredential
        //instance.databasePostCredential(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('databasePostCredentialpassword', function() {
      it('should call databasePostCredentialpassword successfully', function(done) {
        //uncomment below and update the code to test databasePostCredentialpassword
        //instance.databasePostCredentialpassword(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('databasePutTag', function() {
      it('should call databasePutTag successfully', function(done) {
        //uncomment below and update the code to test databasePutTag
        //instance.databasePutTag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('databaseShow', function() {
      it('should call databaseShow successfully', function(done) {
        //uncomment below and update the code to test databaseShow
        //instance.databaseShow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('databaseUpdate', function() {
      it('should call databaseUpdate successfully', function(done) {
        //uncomment below and update the code to test databaseUpdate
        //instance.databaseUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
