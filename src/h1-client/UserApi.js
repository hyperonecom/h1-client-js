/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AuthToken from '../model/AuthToken';
import Credential from '../model/Credential';
import InlineResponse200 from '../model/InlineResponse200';
import InlineResponse2001 from '../model/InlineResponse2001';
import InlineResponse400 from '../model/InlineResponse400';
import User from '../model/User';
import UserPatchCredentialId from '../model/UserPatchCredentialId';
import UserPatchCredentialcertificateId from '../model/UserPatchCredentialcertificateId';
import UserPatchCredentialpasswordId from '../model/UserPatchCredentialpasswordId';
import UserPostCredential from '../model/UserPostCredential';
import UserPostCredentialcertificate from '../model/UserPostCredentialcertificate';
import UserPostCredentialpassword from '../model/UserPostCredentialpassword';
import UserServices from '../model/UserServices';
import UserUpdate from '../model/UserUpdate';

/**
* User service.
* @module h1-client/UserApi
* @version 0.0.3
*/
export default class UserApi {

    /**
    * Constructs a new UserApi. 
    * @alias module:h1-client/UserApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * /credential/:id
     * @param {String} userId ID of user
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/User} and HTTP response
     */
    userDeleteCredentialIdWithHttpInfo(userId, id) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userDeleteCredentialId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userDeleteCredentialId");
      }

      let pathParams = {
        'userId': userId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/user/{userId}/credential/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/:id
     * @param {String} userId ID of user
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/User}
     */
    userDeleteCredentialId(userId, id) {
      return this.userDeleteCredentialIdWithHttpInfo(userId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/authtoken/:id
     * @param {String} userId ID of user
     * @param {String} invitationId invitationId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    userDeleteCredentialauthtokenIdWithHttpInfo(userId, invitationId) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userDeleteCredentialauthtokenId");
      }
      // verify the required parameter 'invitationId' is set
      if (invitationId === undefined || invitationId === null) {
        throw new Error("Missing the required parameter 'invitationId' when calling userDeleteCredentialauthtokenId");
      }

      let pathParams = {
        'userId': userId,
        'invitationId': invitationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/{userId}/credential/authtoken/:id', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/authtoken/:id
     * @param {String} userId ID of user
     * @param {String} invitationId invitationId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    userDeleteCredentialauthtokenId(userId, invitationId) {
      return this.userDeleteCredentialauthtokenIdWithHttpInfo(userId, invitationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/certificate/:id
     * @param {String} userId ID of user
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2001} and HTTP response
     */
    userDeleteCredentialcertificateIdWithHttpInfo(userId, id) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userDeleteCredentialcertificateId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userDeleteCredentialcertificateId");
      }

      let pathParams = {
        'userId': userId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2001;
      return this.apiClient.callApi(
        '/user/{userId}/credential/certificate/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/certificate/:id
     * @param {String} userId ID of user
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2001}
     */
    userDeleteCredentialcertificateId(userId, id) {
      return this.userDeleteCredentialcertificateIdWithHttpInfo(userId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password/:id
     * @param {String} userId ID of user
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/User} and HTTP response
     */
    userDeleteCredentialpasswordIdWithHttpInfo(userId, id) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userDeleteCredentialpasswordId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userDeleteCredentialpasswordId");
      }

      let pathParams = {
        'userId': userId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/user/{userId}/credential/password/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/password/:id
     * @param {String} userId ID of user
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/User}
     */
    userDeleteCredentialpasswordId(userId, id) {
      return this.userDeleteCredentialpasswordIdWithHttpInfo(userId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag/:key
     * @param {String} userId ID of user
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    userDeleteTagKeyWithHttpInfo(userId, key) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userDeleteTagKey");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling userDeleteTagKey");
      }

      let pathParams = {
        'userId': userId,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/user/{userId}/tag/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag/:key
     * @param {String} userId ID of user
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    userDeleteTagKey(userId, key) {
      return this.userDeleteTagKeyWithHttpInfo(userId, key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/:id
     * @param {String} userId ID of user
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    userGetCredentialIdWithHttpInfo(userId, id) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userGetCredentialId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userGetCredentialId");
      }

      let pathParams = {
        'userId': userId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Credential;
      return this.apiClient.callApi(
        '/user/{userId}/credential/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/:id
     * @param {String} userId ID of user
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    userGetCredentialId(userId, id) {
      return this.userGetCredentialIdWithHttpInfo(userId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/authtoken/:id
     * @param {String} userId ID of user
     * @param {String} invitationId invitationId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AuthToken} and HTTP response
     */
    userGetCredentialauthtokenIdWithHttpInfo(userId, invitationId) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userGetCredentialauthtokenId");
      }
      // verify the required parameter 'invitationId' is set
      if (invitationId === undefined || invitationId === null) {
        throw new Error("Missing the required parameter 'invitationId' when calling userGetCredentialauthtokenId");
      }

      let pathParams = {
        'userId': userId,
        'invitationId': invitationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AuthToken;
      return this.apiClient.callApi(
        '/user/{userId}/credential/authtoken/:id', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/authtoken/:id
     * @param {String} userId ID of user
     * @param {String} invitationId invitationId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AuthToken}
     */
    userGetCredentialauthtokenId(userId, invitationId) {
      return this.userGetCredentialauthtokenIdWithHttpInfo(userId, invitationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/certificate/:id
     * @param {String} userId ID of user
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    userGetCredentialcertificateIdWithHttpInfo(userId, id) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userGetCredentialcertificateId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userGetCredentialcertificateId");
      }

      let pathParams = {
        'userId': userId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Credential;
      return this.apiClient.callApi(
        '/user/{userId}/credential/certificate/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/certificate/:id
     * @param {String} userId ID of user
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    userGetCredentialcertificateId(userId, id) {
      return this.userGetCredentialcertificateIdWithHttpInfo(userId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password/:id
     * @param {String} userId ID of user
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    userGetCredentialpasswordIdWithHttpInfo(userId, id) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userGetCredentialpasswordId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userGetCredentialpasswordId");
      }

      let pathParams = {
        'userId': userId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Credential;
      return this.apiClient.callApi(
        '/user/{userId}/credential/password/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/password/:id
     * @param {String} userId ID of user
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    userGetCredentialpasswordId(userId, id) {
      return this.userGetCredentialpasswordIdWithHttpInfo(userId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services/:serviceId
     * @param {String} userId ID of user
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UserServices} and HTTP response
     */
    userGetServicesServiceIdWithHttpInfo(userId, serviceId) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userGetServicesServiceId");
      }
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling userGetServicesServiceId");
      }

      let pathParams = {
        'userId': userId,
        'serviceId': serviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserServices;
      return this.apiClient.callApi(
        '/user/{userId}/services/{serviceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /services/:serviceId
     * @param {String} userId ID of user
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserServices}
     */
    userGetServicesServiceId(userId, serviceId) {
      return this.userGetServicesServiceIdWithHttpInfo(userId, serviceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} userId ID of user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    userGetTagWithHttpInfo(userId) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userGetTag");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/user/{userId}/tag', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} userId ID of user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    userGetTag(userId) {
      return this.userGetTagWithHttpInfo(userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential
     * @param {String} userId ID of user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Credential>} and HTTP response
     */
    userListCredentialWithHttpInfo(userId) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userListCredential");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Credential];
      return this.apiClient.callApi(
        '/user/{userId}/credential', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential
     * @param {String} userId ID of user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Credential>}
     */
    userListCredential(userId) {
      return this.userListCredentialWithHttpInfo(userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/authtoken
     * @param {String} userId ID of user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/AuthToken>} and HTTP response
     */
    userListCredentialauthtokenWithHttpInfo(userId) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userListCredentialauthtoken");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AuthToken];
      return this.apiClient.callApi(
        '/user/{userId}/credential/authtoken', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/authtoken
     * @param {String} userId ID of user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/AuthToken>}
     */
    userListCredentialauthtoken(userId) {
      return this.userListCredentialauthtokenWithHttpInfo(userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/certificate
     * @param {String} userId ID of user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Credential>} and HTTP response
     */
    userListCredentialcertificateWithHttpInfo(userId) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userListCredentialcertificate");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Credential];
      return this.apiClient.callApi(
        '/user/{userId}/credential/certificate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/certificate
     * @param {String} userId ID of user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Credential>}
     */
    userListCredentialcertificate(userId) {
      return this.userListCredentialcertificateWithHttpInfo(userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password
     * @param {String} userId ID of user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Credential>} and HTTP response
     */
    userListCredentialpasswordWithHttpInfo(userId) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userListCredentialpassword");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Credential];
      return this.apiClient.callApi(
        '/user/{userId}/credential/password', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/password
     * @param {String} userId ID of user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Credential>}
     */
    userListCredentialpassword(userId) {
      return this.userListCredentialpasswordWithHttpInfo(userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /invitation
     * @param {String} userId ID of user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/InlineResponse200>} and HTTP response
     */
    userListInvitationWithHttpInfo(userId) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userListInvitation");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [InlineResponse200];
      return this.apiClient.callApi(
        '/user/{userId}/invitation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /invitation
     * @param {String} userId ID of user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/InlineResponse200>}
     */
    userListInvitation(userId) {
      return this.userListInvitationWithHttpInfo(userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services
     * @param {String} userId ID of user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/UserServices>} and HTTP response
     */
    userListServicesWithHttpInfo(userId) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userListServices");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserServices];
      return this.apiClient.callApi(
        '/user/{userId}/services', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /services
     * @param {String} userId ID of user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/UserServices>}
     */
    userListServices(userId) {
      return this.userListServicesWithHttpInfo(userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/:id
     * @param {String} userId ID of user
     * @param {String} id id
     * @param {module:model/UserPatchCredentialId} userPatchCredentialId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    userPatchCredentialIdWithHttpInfo(userId, id, userPatchCredentialId) {
      let postBody = userPatchCredentialId;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userPatchCredentialId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userPatchCredentialId");
      }
      // verify the required parameter 'userPatchCredentialId' is set
      if (userPatchCredentialId === undefined || userPatchCredentialId === null) {
        throw new Error("Missing the required parameter 'userPatchCredentialId' when calling userPatchCredentialId");
      }

      let pathParams = {
        'userId': userId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Credential;
      return this.apiClient.callApi(
        '/user/{userId}/credential/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/:id
     * @param {String} userId ID of user
     * @param {String} id id
     * @param {module:model/UserPatchCredentialId} userPatchCredentialId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    userPatchCredentialId(userId, id, userPatchCredentialId) {
      return this.userPatchCredentialIdWithHttpInfo(userId, id, userPatchCredentialId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/certificate/:id
     * @param {String} userId ID of user
     * @param {String} id id
     * @param {module:model/UserPatchCredentialcertificateId} userPatchCredentialcertificateId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    userPatchCredentialcertificateIdWithHttpInfo(userId, id, userPatchCredentialcertificateId) {
      let postBody = userPatchCredentialcertificateId;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userPatchCredentialcertificateId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userPatchCredentialcertificateId");
      }
      // verify the required parameter 'userPatchCredentialcertificateId' is set
      if (userPatchCredentialcertificateId === undefined || userPatchCredentialcertificateId === null) {
        throw new Error("Missing the required parameter 'userPatchCredentialcertificateId' when calling userPatchCredentialcertificateId");
      }

      let pathParams = {
        'userId': userId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Credential;
      return this.apiClient.callApi(
        '/user/{userId}/credential/certificate/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/certificate/:id
     * @param {String} userId ID of user
     * @param {String} id id
     * @param {module:model/UserPatchCredentialcertificateId} userPatchCredentialcertificateId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    userPatchCredentialcertificateId(userId, id, userPatchCredentialcertificateId) {
      return this.userPatchCredentialcertificateIdWithHttpInfo(userId, id, userPatchCredentialcertificateId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password/:id
     * @param {String} userId ID of user
     * @param {String} id id
     * @param {module:model/UserPatchCredentialpasswordId} userPatchCredentialpasswordId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    userPatchCredentialpasswordIdWithHttpInfo(userId, id, userPatchCredentialpasswordId) {
      let postBody = userPatchCredentialpasswordId;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userPatchCredentialpasswordId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userPatchCredentialpasswordId");
      }
      // verify the required parameter 'userPatchCredentialpasswordId' is set
      if (userPatchCredentialpasswordId === undefined || userPatchCredentialpasswordId === null) {
        throw new Error("Missing the required parameter 'userPatchCredentialpasswordId' when calling userPatchCredentialpasswordId");
      }

      let pathParams = {
        'userId': userId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Credential;
      return this.apiClient.callApi(
        '/user/{userId}/credential/password/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/password/:id
     * @param {String} userId ID of user
     * @param {String} id id
     * @param {module:model/UserPatchCredentialpasswordId} userPatchCredentialpasswordId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    userPatchCredentialpasswordId(userId, id, userPatchCredentialpasswordId) {
      return this.userPatchCredentialpasswordIdWithHttpInfo(userId, id, userPatchCredentialpasswordId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} userId ID of user
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    userPatchTagWithHttpInfo(userId, requestBody) {
      let postBody = requestBody;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userPatchTag");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling userPatchTag");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/user/{userId}/tag', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} userId ID of user
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    userPatchTag(userId, requestBody) {
      return this.userPatchTagWithHttpInfo(userId, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential
     * @param {String} userId ID of user
     * @param {module:model/UserPostCredential} userPostCredential 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    userPostCredentialWithHttpInfo(userId, userPostCredential) {
      let postBody = userPostCredential;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userPostCredential");
      }
      // verify the required parameter 'userPostCredential' is set
      if (userPostCredential === undefined || userPostCredential === null) {
        throw new Error("Missing the required parameter 'userPostCredential' when calling userPostCredential");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Credential;
      return this.apiClient.callApi(
        '/user/{userId}/credential', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential
     * @param {String} userId ID of user
     * @param {module:model/UserPostCredential} userPostCredential 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    userPostCredential(userId, userPostCredential) {
      return this.userPostCredentialWithHttpInfo(userId, userPostCredential)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/certificate
     * @param {String} userId ID of user
     * @param {module:model/UserPostCredentialcertificate} userPostCredentialcertificate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    userPostCredentialcertificateWithHttpInfo(userId, userPostCredentialcertificate) {
      let postBody = userPostCredentialcertificate;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userPostCredentialcertificate");
      }
      // verify the required parameter 'userPostCredentialcertificate' is set
      if (userPostCredentialcertificate === undefined || userPostCredentialcertificate === null) {
        throw new Error("Missing the required parameter 'userPostCredentialcertificate' when calling userPostCredentialcertificate");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Credential;
      return this.apiClient.callApi(
        '/user/{userId}/credential/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/certificate
     * @param {String} userId ID of user
     * @param {module:model/UserPostCredentialcertificate} userPostCredentialcertificate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    userPostCredentialcertificate(userId, userPostCredentialcertificate) {
      return this.userPostCredentialcertificateWithHttpInfo(userId, userPostCredentialcertificate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password
     * @param {String} userId ID of user
     * @param {module:model/UserPostCredentialpassword} userPostCredentialpassword 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    userPostCredentialpasswordWithHttpInfo(userId, userPostCredentialpassword) {
      let postBody = userPostCredentialpassword;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userPostCredentialpassword");
      }
      // verify the required parameter 'userPostCredentialpassword' is set
      if (userPostCredentialpassword === undefined || userPostCredentialpassword === null) {
        throw new Error("Missing the required parameter 'userPostCredentialpassword' when calling userPostCredentialpassword");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Credential;
      return this.apiClient.callApi(
        '/user/{userId}/credential/password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/password
     * @param {String} userId ID of user
     * @param {module:model/UserPostCredentialpassword} userPostCredentialpassword 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    userPostCredentialpassword(userId, userPostCredentialpassword) {
      return this.userPostCredentialpasswordWithHttpInfo(userId, userPostCredentialpassword)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /invitation/:invitationId/accept
     * @param {String} userId ID of user
     * @param {String} invitationId invitationId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    userPostInvitationInvitationIdacceptWithHttpInfo(userId, invitationId) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userPostInvitationInvitationIdaccept");
      }
      // verify the required parameter 'invitationId' is set
      if (invitationId === undefined || invitationId === null) {
        throw new Error("Missing the required parameter 'invitationId' when calling userPostInvitationInvitationIdaccept");
      }

      let pathParams = {
        'userId': userId,
        'invitationId': invitationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/{userId}/invitation/{invitationId}/accept', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /invitation/:invitationId/accept
     * @param {String} userId ID of user
     * @param {String} invitationId invitationId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    userPostInvitationInvitationIdaccept(userId, invitationId) {
      return this.userPostInvitationInvitationIdacceptWithHttpInfo(userId, invitationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /invitation/:invitationId/decline
     * @param {String} userId ID of user
     * @param {String} invitationId invitationId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    userPostInvitationInvitationIddeclineWithHttpInfo(userId, invitationId) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userPostInvitationInvitationIddecline");
      }
      // verify the required parameter 'invitationId' is set
      if (invitationId === undefined || invitationId === null) {
        throw new Error("Missing the required parameter 'invitationId' when calling userPostInvitationInvitationIddecline");
      }

      let pathParams = {
        'userId': userId,
        'invitationId': invitationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/{userId}/invitation/{invitationId}/decline', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /invitation/:invitationId/decline
     * @param {String} userId ID of user
     * @param {String} invitationId invitationId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    userPostInvitationInvitationIddecline(userId, invitationId) {
      return this.userPostInvitationInvitationIddeclineWithHttpInfo(userId, invitationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} userId ID of user
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    userPutTagWithHttpInfo(userId, requestBody) {
      let postBody = requestBody;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userPutTag");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling userPutTag");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/user/{userId}/tag', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} userId ID of user
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    userPutTag(userId, requestBody) {
      return this.userPutTagWithHttpInfo(userId, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get
     * Returns a single user
     * @param {String} userId ID of user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/User} and HTTP response
     */
    userShowWithHttpInfo(userId) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userShow");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/user/{userId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get
     * Returns a single user
     * @param {String} userId ID of user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/User}
     */
    userShow(userId) {
      return this.userShowWithHttpInfo(userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update
     * Returns modified user
     * @param {String} userId ID of user
     * @param {module:model/UserUpdate} userUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/User} and HTTP response
     */
    userUpdateWithHttpInfo(userId, userUpdate) {
      let postBody = userUpdate;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userUpdate");
      }
      // verify the required parameter 'userUpdate' is set
      if (userUpdate === undefined || userUpdate === null) {
        throw new Error("Missing the required parameter 'userUpdate' when calling userUpdate");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/user/{userId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update
     * Returns modified user
     * @param {String} userId ID of user
     * @param {module:model/UserUpdate} userUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/User}
     */
    userUpdate(userId, userUpdate) {
      return this.userUpdateWithHttpInfo(userId, userUpdate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
