/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Agent from '../model/Agent';
import AgentActionTransfer from '../model/AgentActionTransfer';
import AgentActionUpdateEnabledServices from '../model/AgentActionUpdateEnabledServices';
import AgentCreate from '../model/AgentCreate';
import AgentPatchCredentialId from '../model/AgentPatchCredentialId';
import AgentPatchCredentialcertificateId from '../model/AgentPatchCredentialcertificateId';
import AgentPostAccessrights from '../model/AgentPostAccessrights';
import AgentPostCredential from '../model/AgentPostCredential';
import AgentPostCredentialcertificate from '../model/AgentPostCredentialcertificate';
import AgentResource from '../model/AgentResource';
import AgentResourceEvent from '../model/AgentResourceEvent';
import AgentServices from '../model/AgentServices';
import AgentUpdate from '../model/AgentUpdate';
import Credential from '../model/Credential';
import Event from '../model/Event';
import InlineResponse2003 from '../model/InlineResponse2003';
import InlineResponse400 from '../model/InlineResponse400';

/**
* Agent service.
* @module h1-client/AgentApi
* @version 0.0.3
*/
export default class AgentApi {

    /**
    * Constructs a new AgentApi. 
    * @alias module:h1-client/AgentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * /actions/start
     * Action start
     * @param {String} agentId ID of agent
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Agent} and HTTP response
     */
    agentActionStartWithHttpInfo(agentId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentActionStart");
      }

      let pathParams = {
        'agentId': agentId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-idempotency-key': opts['xIdempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Agent;
      return this.apiClient.callApi(
        '/agent/{agentId}/actions/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /actions/start
     * Action start
     * @param {String} agentId ID of agent
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Agent}
     */
    agentActionStart(agentId, opts) {
      return this.agentActionStartWithHttpInfo(agentId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/suspend
     * Action suspend
     * @param {String} agentId ID of agent
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Agent} and HTTP response
     */
    agentActionSuspendWithHttpInfo(agentId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentActionSuspend");
      }

      let pathParams = {
        'agentId': agentId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-idempotency-key': opts['xIdempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Agent;
      return this.apiClient.callApi(
        '/agent/{agentId}/actions/suspend', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /actions/suspend
     * Action suspend
     * @param {String} agentId ID of agent
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Agent}
     */
    agentActionSuspend(agentId, opts) {
      return this.agentActionSuspendWithHttpInfo(agentId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/transfer
     * Action transfer
     * @param {String} agentId ID of agent
     * @param {module:model/AgentActionTransfer} agentActionTransfer 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Agent} and HTTP response
     */
    agentActionTransferWithHttpInfo(agentId, agentActionTransfer, opts) {
      opts = opts || {};
      let postBody = agentActionTransfer;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentActionTransfer");
      }
      // verify the required parameter 'agentActionTransfer' is set
      if (agentActionTransfer === undefined || agentActionTransfer === null) {
        throw new Error("Missing the required parameter 'agentActionTransfer' when calling agentActionTransfer");
      }

      let pathParams = {
        'agentId': agentId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-idempotency-key': opts['xIdempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Agent;
      return this.apiClient.callApi(
        '/agent/{agentId}/actions/transfer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /actions/transfer
     * Action transfer
     * @param {String} agentId ID of agent
     * @param {module:model/AgentActionTransfer} agentActionTransfer 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Agent}
     */
    agentActionTransfer(agentId, agentActionTransfer, opts) {
      return this.agentActionTransferWithHttpInfo(agentId, agentActionTransfer, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/update_enabledServices
     * Action update_enabledServices
     * @param {String} agentId ID of agent
     * @param {module:model/AgentActionUpdateEnabledServices} agentActionUpdateEnabledServices 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Agent} and HTTP response
     */
    agentActionUpdateEnabledServicesWithHttpInfo(agentId, agentActionUpdateEnabledServices, opts) {
      opts = opts || {};
      let postBody = agentActionUpdateEnabledServices;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentActionUpdateEnabledServices");
      }
      // verify the required parameter 'agentActionUpdateEnabledServices' is set
      if (agentActionUpdateEnabledServices === undefined || agentActionUpdateEnabledServices === null) {
        throw new Error("Missing the required parameter 'agentActionUpdateEnabledServices' when calling agentActionUpdateEnabledServices");
      }

      let pathParams = {
        'agentId': agentId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-idempotency-key': opts['xIdempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Agent;
      return this.apiClient.callApi(
        '/agent/{agentId}/actions/update_enabledServices', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /actions/update_enabledServices
     * Action update_enabledServices
     * @param {String} agentId ID of agent
     * @param {module:model/AgentActionUpdateEnabledServices} agentActionUpdateEnabledServices 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Agent}
     */
    agentActionUpdateEnabledServices(agentId, agentActionUpdateEnabledServices, opts) {
      return this.agentActionUpdateEnabledServicesWithHttpInfo(agentId, agentActionUpdateEnabledServices, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create
     * Create agent
     * @param {module:model/AgentCreate} agentCreate 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Agent} and HTTP response
     */
    agentCreateWithHttpInfo(agentCreate, opts) {
      opts = opts || {};
      let postBody = agentCreate;
      // verify the required parameter 'agentCreate' is set
      if (agentCreate === undefined || agentCreate === null) {
        throw new Error("Missing the required parameter 'agentCreate' when calling agentCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-idempotency-key': opts['xIdempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Agent;
      return this.apiClient.callApi(
        '/agent', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create
     * Create agent
     * @param {module:model/AgentCreate} agentCreate 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Agent}
     */
    agentCreate(agentCreate, opts) {
      return this.agentCreateWithHttpInfo(agentCreate, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete
     * @param {String} agentId ID of agent
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    agentDeleteWithHttpInfo(agentId) {
      let postBody = null;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentDelete");
      }

      let pathParams = {
        'agentId': agentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/agent/{agentId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete
     * @param {String} agentId ID of agent
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    agentDelete(agentId) {
      return this.agentDeleteWithHttpInfo(agentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights/:identity
     * @param {String} agentId ID of agent
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Agent} and HTTP response
     */
    agentDeleteAccessrightsIdentityWithHttpInfo(agentId, identity) {
      let postBody = null;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentDeleteAccessrightsIdentity");
      }
      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling agentDeleteAccessrightsIdentity");
      }

      let pathParams = {
        'agentId': agentId,
        'identity': identity
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Agent;
      return this.apiClient.callApi(
        '/agent/{agentId}/accessrights/{identity}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights/:identity
     * @param {String} agentId ID of agent
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Agent}
     */
    agentDeleteAccessrightsIdentity(agentId, identity) {
      return this.agentDeleteAccessrightsIdentityWithHttpInfo(agentId, identity)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/:id
     * @param {String} agentId ID of agent
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Agent} and HTTP response
     */
    agentDeleteCredentialIdWithHttpInfo(agentId, id) {
      let postBody = null;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentDeleteCredentialId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling agentDeleteCredentialId");
      }

      let pathParams = {
        'agentId': agentId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Agent;
      return this.apiClient.callApi(
        '/agent/{agentId}/credential/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/:id
     * @param {String} agentId ID of agent
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Agent}
     */
    agentDeleteCredentialId(agentId, id) {
      return this.agentDeleteCredentialIdWithHttpInfo(agentId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/certificate/:id
     * @param {String} agentId ID of agent
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2003} and HTTP response
     */
    agentDeleteCredentialcertificateIdWithHttpInfo(agentId, id) {
      let postBody = null;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentDeleteCredentialcertificateId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling agentDeleteCredentialcertificateId");
      }

      let pathParams = {
        'agentId': agentId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2003;
      return this.apiClient.callApi(
        '/agent/{agentId}/credential/certificate/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/certificate/:id
     * @param {String} agentId ID of agent
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2003}
     */
    agentDeleteCredentialcertificateId(agentId, id) {
      return this.agentDeleteCredentialcertificateIdWithHttpInfo(agentId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag/:key
     * @param {String} agentId ID of agent
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    agentDeleteTagKeyWithHttpInfo(agentId, key) {
      let postBody = null;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentDeleteTagKey");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling agentDeleteTagKey");
      }

      let pathParams = {
        'agentId': agentId,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/agent/{agentId}/tag/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag/:key
     * @param {String} agentId ID of agent
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    agentDeleteTagKey(agentId, key) {
      return this.agentDeleteTagKeyWithHttpInfo(agentId, key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/:id
     * @param {String} agentId ID of agent
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    agentGetCredentialIdWithHttpInfo(agentId, id) {
      let postBody = null;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentGetCredentialId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling agentGetCredentialId");
      }

      let pathParams = {
        'agentId': agentId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Credential;
      return this.apiClient.callApi(
        '/agent/{agentId}/credential/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/:id
     * @param {String} agentId ID of agent
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    agentGetCredentialId(agentId, id) {
      return this.agentGetCredentialIdWithHttpInfo(agentId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/certificate/:id
     * @param {String} agentId ID of agent
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    agentGetCredentialcertificateIdWithHttpInfo(agentId, id) {
      let postBody = null;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentGetCredentialcertificateId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling agentGetCredentialcertificateId");
      }

      let pathParams = {
        'agentId': agentId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Credential;
      return this.apiClient.callApi(
        '/agent/{agentId}/credential/certificate/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/certificate/:id
     * @param {String} agentId ID of agent
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    agentGetCredentialcertificateId(agentId, id) {
      return this.agentGetCredentialcertificateIdWithHttpInfo(agentId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /inspect
     * @param {String} agentId ID of agent
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    agentGetInspectWithHttpInfo(agentId) {
      let postBody = null;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentGetInspect");
      }

      let pathParams = {
        'agentId': agentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/agent/{agentId}/inspect', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /inspect
     * @param {String} agentId ID of agent
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    agentGetInspect(agentId) {
      return this.agentGetInspectWithHttpInfo(agentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /resource/:resourceId/inspect
     * @param {String} agentId ID of agent
     * @param {String} resourceId resourceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    agentGetResourceResourceIdinspectWithHttpInfo(agentId, resourceId) {
      let postBody = null;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentGetResourceResourceIdinspect");
      }
      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling agentGetResourceResourceIdinspect");
      }

      let pathParams = {
        'agentId': agentId,
        'resourceId': resourceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/agent/{agentId}/resource/{resourceId}/inspect', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /resource/:resourceId/inspect
     * @param {String} agentId ID of agent
     * @param {String} resourceId resourceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    agentGetResourceResourceIdinspect(agentId, resourceId) {
      return this.agentGetResourceResourceIdinspectWithHttpInfo(agentId, resourceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services/:serviceId
     * @param {String} agentId ID of agent
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AgentServices} and HTTP response
     */
    agentGetServicesServiceIdWithHttpInfo(agentId, serviceId) {
      let postBody = null;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentGetServicesServiceId");
      }
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling agentGetServicesServiceId");
      }

      let pathParams = {
        'agentId': agentId,
        'serviceId': serviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AgentServices;
      return this.apiClient.callApi(
        '/agent/{agentId}/services/{serviceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /services/:serviceId
     * @param {String} agentId ID of agent
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AgentServices}
     */
    agentGetServicesServiceId(agentId, serviceId) {
      return this.agentGetServicesServiceIdWithHttpInfo(agentId, serviceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} agentId ID of agent
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    agentGetTagWithHttpInfo(agentId) {
      let postBody = null;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentGetTag");
      }

      let pathParams = {
        'agentId': agentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/agent/{agentId}/tag', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} agentId ID of agent
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    agentGetTag(agentId) {
      return this.agentGetTagWithHttpInfo(agentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List
     * List agent
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @param {Object.<String, {String: String}>} opts.tag Filter by tag
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Agent>} and HTTP response
     */
    agentListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'tag': opts['tag']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Agent];
      return this.apiClient.callApi(
        '/agent', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List
     * List agent
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @param {Object.<String, {String: String}>} opts.tag Filter by tag
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Agent>}
     */
    agentList(opts) {
      return this.agentListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} agentId ID of agent
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    agentListAccessrightsWithHttpInfo(agentId) {
      let postBody = null;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentListAccessrights");
      }

      let pathParams = {
        'agentId': agentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/agent/{agentId}/accessrights', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights
     * @param {String} agentId ID of agent
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    agentListAccessrights(agentId) {
      return this.agentListAccessrightsWithHttpInfo(agentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential
     * @param {String} agentId ID of agent
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Credential>} and HTTP response
     */
    agentListCredentialWithHttpInfo(agentId) {
      let postBody = null;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentListCredential");
      }

      let pathParams = {
        'agentId': agentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Credential];
      return this.apiClient.callApi(
        '/agent/{agentId}/credential', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential
     * @param {String} agentId ID of agent
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Credential>}
     */
    agentListCredential(agentId) {
      return this.agentListCredentialWithHttpInfo(agentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/certificate
     * @param {String} agentId ID of agent
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Credential>} and HTTP response
     */
    agentListCredentialcertificateWithHttpInfo(agentId) {
      let postBody = null;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentListCredentialcertificate");
      }

      let pathParams = {
        'agentId': agentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Credential];
      return this.apiClient.callApi(
        '/agent/{agentId}/credential/certificate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/certificate
     * @param {String} agentId ID of agent
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Credential>}
     */
    agentListCredentialcertificate(agentId) {
      return this.agentListCredentialcertificateWithHttpInfo(agentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /enabledServices
     * @param {String} agentId ID of agent
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    agentListEnabledServicesWithHttpInfo(agentId) {
      let postBody = null;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentListEnabledServices");
      }

      let pathParams = {
        'agentId': agentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/agent/{agentId}/enabledServices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /enabledServices
     * @param {String} agentId ID of agent
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    agentListEnabledServices(agentId) {
      return this.agentListEnabledServicesWithHttpInfo(agentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /queue
     * @param {String} agentId ID of agent
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit $limit
     * @param {Number} opts.skip $skip
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Event>} and HTTP response
     */
    agentListQueueWithHttpInfo(agentId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentListQueue");
      }

      let pathParams = {
        'agentId': agentId
      };
      let queryParams = {
        '$limit': opts['limit'],
        '$skip': opts['skip']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Event];
      return this.apiClient.callApi(
        '/agent/{agentId}/queue', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /queue
     * @param {String} agentId ID of agent
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit $limit
     * @param {Number} opts.skip $skip
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Event>}
     */
    agentListQueue(agentId, opts) {
      return this.agentListQueueWithHttpInfo(agentId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /resource
     * @param {String} agentId ID of agent
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/AgentResource>} and HTTP response
     */
    agentListResourceWithHttpInfo(agentId) {
      let postBody = null;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentListResource");
      }

      let pathParams = {
        'agentId': agentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AgentResource];
      return this.apiClient.callApi(
        '/agent/{agentId}/resource', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /resource
     * @param {String} agentId ID of agent
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/AgentResource>}
     */
    agentListResource(agentId) {
      return this.agentListResourceWithHttpInfo(agentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /resource/:resourceId/queue
     * @param {String} agentId ID of agent
     * @param {String} resourceId resourceId
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit $limit
     * @param {Number} opts.skip $skip
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/AgentResourceEvent>} and HTTP response
     */
    agentListResourceResourceIdqueueWithHttpInfo(agentId, resourceId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentListResourceResourceIdqueue");
      }
      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling agentListResourceResourceIdqueue");
      }

      let pathParams = {
        'agentId': agentId,
        'resourceId': resourceId
      };
      let queryParams = {
        '$limit': opts['limit'],
        '$skip': opts['skip']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AgentResourceEvent];
      return this.apiClient.callApi(
        '/agent/{agentId}/resource/{resourceId}/queue', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /resource/:resourceId/queue
     * @param {String} agentId ID of agent
     * @param {String} resourceId resourceId
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit $limit
     * @param {Number} opts.skip $skip
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/AgentResourceEvent>}
     */
    agentListResourceResourceIdqueue(agentId, resourceId, opts) {
      return this.agentListResourceResourceIdqueueWithHttpInfo(agentId, resourceId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services
     * @param {String} agentId ID of agent
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/AgentServices>} and HTTP response
     */
    agentListServicesWithHttpInfo(agentId) {
      let postBody = null;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentListServices");
      }

      let pathParams = {
        'agentId': agentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AgentServices];
      return this.apiClient.callApi(
        '/agent/{agentId}/services', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /services
     * @param {String} agentId ID of agent
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/AgentServices>}
     */
    agentListServices(agentId) {
      return this.agentListServicesWithHttpInfo(agentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/:id
     * @param {String} agentId ID of agent
     * @param {String} id id
     * @param {module:model/AgentPatchCredentialId} agentPatchCredentialId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    agentPatchCredentialIdWithHttpInfo(agentId, id, agentPatchCredentialId) {
      let postBody = agentPatchCredentialId;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentPatchCredentialId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling agentPatchCredentialId");
      }
      // verify the required parameter 'agentPatchCredentialId' is set
      if (agentPatchCredentialId === undefined || agentPatchCredentialId === null) {
        throw new Error("Missing the required parameter 'agentPatchCredentialId' when calling agentPatchCredentialId");
      }

      let pathParams = {
        'agentId': agentId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Credential;
      return this.apiClient.callApi(
        '/agent/{agentId}/credential/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/:id
     * @param {String} agentId ID of agent
     * @param {String} id id
     * @param {module:model/AgentPatchCredentialId} agentPatchCredentialId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    agentPatchCredentialId(agentId, id, agentPatchCredentialId) {
      return this.agentPatchCredentialIdWithHttpInfo(agentId, id, agentPatchCredentialId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/certificate/:id
     * @param {String} agentId ID of agent
     * @param {String} id id
     * @param {module:model/AgentPatchCredentialcertificateId} agentPatchCredentialcertificateId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    agentPatchCredentialcertificateIdWithHttpInfo(agentId, id, agentPatchCredentialcertificateId) {
      let postBody = agentPatchCredentialcertificateId;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentPatchCredentialcertificateId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling agentPatchCredentialcertificateId");
      }
      // verify the required parameter 'agentPatchCredentialcertificateId' is set
      if (agentPatchCredentialcertificateId === undefined || agentPatchCredentialcertificateId === null) {
        throw new Error("Missing the required parameter 'agentPatchCredentialcertificateId' when calling agentPatchCredentialcertificateId");
      }

      let pathParams = {
        'agentId': agentId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Credential;
      return this.apiClient.callApi(
        '/agent/{agentId}/credential/certificate/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/certificate/:id
     * @param {String} agentId ID of agent
     * @param {String} id id
     * @param {module:model/AgentPatchCredentialcertificateId} agentPatchCredentialcertificateId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    agentPatchCredentialcertificateId(agentId, id, agentPatchCredentialcertificateId) {
      return this.agentPatchCredentialcertificateIdWithHttpInfo(agentId, id, agentPatchCredentialcertificateId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} agentId ID of agent
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    agentPatchTagWithHttpInfo(agentId, requestBody) {
      let postBody = requestBody;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentPatchTag");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling agentPatchTag");
      }

      let pathParams = {
        'agentId': agentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/agent/{agentId}/tag', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} agentId ID of agent
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    agentPatchTag(agentId, requestBody) {
      return this.agentPatchTagWithHttpInfo(agentId, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} agentId ID of agent
     * @param {module:model/AgentPostAccessrights} agentPostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Agent} and HTTP response
     */
    agentPostAccessrightsWithHttpInfo(agentId, agentPostAccessrights) {
      let postBody = agentPostAccessrights;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentPostAccessrights");
      }
      // verify the required parameter 'agentPostAccessrights' is set
      if (agentPostAccessrights === undefined || agentPostAccessrights === null) {
        throw new Error("Missing the required parameter 'agentPostAccessrights' when calling agentPostAccessrights");
      }

      let pathParams = {
        'agentId': agentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Agent;
      return this.apiClient.callApi(
        '/agent/{agentId}/accessrights', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights
     * @param {String} agentId ID of agent
     * @param {module:model/AgentPostAccessrights} agentPostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Agent}
     */
    agentPostAccessrights(agentId, agentPostAccessrights) {
      return this.agentPostAccessrightsWithHttpInfo(agentId, agentPostAccessrights)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential
     * @param {String} agentId ID of agent
     * @param {module:model/AgentPostCredential} agentPostCredential 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    agentPostCredentialWithHttpInfo(agentId, agentPostCredential) {
      let postBody = agentPostCredential;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentPostCredential");
      }
      // verify the required parameter 'agentPostCredential' is set
      if (agentPostCredential === undefined || agentPostCredential === null) {
        throw new Error("Missing the required parameter 'agentPostCredential' when calling agentPostCredential");
      }

      let pathParams = {
        'agentId': agentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Credential;
      return this.apiClient.callApi(
        '/agent/{agentId}/credential', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential
     * @param {String} agentId ID of agent
     * @param {module:model/AgentPostCredential} agentPostCredential 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    agentPostCredential(agentId, agentPostCredential) {
      return this.agentPostCredentialWithHttpInfo(agentId, agentPostCredential)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/certificate
     * @param {String} agentId ID of agent
     * @param {module:model/AgentPostCredentialcertificate} agentPostCredentialcertificate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    agentPostCredentialcertificateWithHttpInfo(agentId, agentPostCredentialcertificate) {
      let postBody = agentPostCredentialcertificate;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentPostCredentialcertificate");
      }
      // verify the required parameter 'agentPostCredentialcertificate' is set
      if (agentPostCredentialcertificate === undefined || agentPostCredentialcertificate === null) {
        throw new Error("Missing the required parameter 'agentPostCredentialcertificate' when calling agentPostCredentialcertificate");
      }

      let pathParams = {
        'agentId': agentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Credential;
      return this.apiClient.callApi(
        '/agent/{agentId}/credential/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/certificate
     * @param {String} agentId ID of agent
     * @param {module:model/AgentPostCredentialcertificate} agentPostCredentialcertificate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    agentPostCredentialcertificate(agentId, agentPostCredentialcertificate) {
      return this.agentPostCredentialcertificateWithHttpInfo(agentId, agentPostCredentialcertificate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /resource/:resourceId/actions/recreate
     * @param {String} agentId ID of agent
     * @param {String} resourceId resourceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AgentResource} and HTTP response
     */
    agentPostResourceResourceIdactionsrecreateWithHttpInfo(agentId, resourceId) {
      let postBody = null;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentPostResourceResourceIdactionsrecreate");
      }
      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling agentPostResourceResourceIdactionsrecreate");
      }

      let pathParams = {
        'agentId': agentId,
        'resourceId': resourceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AgentResource;
      return this.apiClient.callApi(
        '/agent/{agentId}/resource/{resourceId}/actions/recreate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /resource/:resourceId/actions/recreate
     * @param {String} agentId ID of agent
     * @param {String} resourceId resourceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AgentResource}
     */
    agentPostResourceResourceIdactionsrecreate(agentId, resourceId) {
      return this.agentPostResourceResourceIdactionsrecreateWithHttpInfo(agentId, resourceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /enabledServices
     * @param {String} agentId ID of agent
     * @param {Array.<String>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    agentPutEnabledServicesWithHttpInfo(agentId, requestBody) {
      let postBody = requestBody;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentPutEnabledServices");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling agentPutEnabledServices");
      }

      let pathParams = {
        'agentId': agentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/agent/{agentId}/enabledServices', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /enabledServices
     * @param {String} agentId ID of agent
     * @param {Array.<String>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    agentPutEnabledServices(agentId, requestBody) {
      return this.agentPutEnabledServicesWithHttpInfo(agentId, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} agentId ID of agent
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    agentPutTagWithHttpInfo(agentId, requestBody) {
      let postBody = requestBody;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentPutTag");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling agentPutTag");
      }

      let pathParams = {
        'agentId': agentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/agent/{agentId}/tag', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} agentId ID of agent
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    agentPutTag(agentId, requestBody) {
      return this.agentPutTagWithHttpInfo(agentId, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get
     * Returns a single agent
     * @param {String} agentId ID of agent
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Agent} and HTTP response
     */
    agentShowWithHttpInfo(agentId) {
      let postBody = null;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentShow");
      }

      let pathParams = {
        'agentId': agentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Agent;
      return this.apiClient.callApi(
        '/agent/{agentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get
     * Returns a single agent
     * @param {String} agentId ID of agent
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Agent}
     */
    agentShow(agentId) {
      return this.agentShowWithHttpInfo(agentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update
     * Returns modified agent
     * @param {String} agentId ID of agent
     * @param {module:model/AgentUpdate} agentUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Agent} and HTTP response
     */
    agentUpdateWithHttpInfo(agentId, agentUpdate) {
      let postBody = agentUpdate;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentUpdate");
      }
      // verify the required parameter 'agentUpdate' is set
      if (agentUpdate === undefined || agentUpdate === null) {
        throw new Error("Missing the required parameter 'agentUpdate' when calling agentUpdate");
      }

      let pathParams = {
        'agentId': agentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Agent;
      return this.apiClient.callApi(
        '/agent/{agentId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update
     * Returns modified agent
     * @param {String} agentId ID of agent
     * @param {module:model/AgentUpdate} agentUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Agent}
     */
    agentUpdate(agentId, agentUpdate) {
      return this.agentUpdateWithHttpInfo(agentId, agentUpdate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
