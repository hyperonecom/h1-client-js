/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccessrightsUserRole from '../model/AccessrightsUserRole';
import Billing from '../model/Billing';
import Credential from '../model/Credential';
import Event from '../model/Event';
import InlineResponse2002 from '../model/InlineResponse2002';
import InlineResponse2003 from '../model/InlineResponse2003';
import InlineResponse400 from '../model/InlineResponse400';
import Invoice from '../model/Invoice';
import Payment from '../model/Payment';
import Proforma from '../model/Proforma';
import Project from '../model/Project';
import ProjectCreate from '../model/ProjectCreate';
import ProjectLimit from '../model/ProjectLimit';
import ProjectPatchCredentialStoreId from '../model/ProjectPatchCredentialStoreId';
import ProjectPatchCredentialStorecertificateId from '../model/ProjectPatchCredentialStorecertificateId';
import ProjectPostAccessrights from '../model/ProjectPostAccessrights';
import ProjectPostCredentialStore from '../model/ProjectPostCredentialStore';
import ProjectPostCredentialStorecertificate from '../model/ProjectPostCredentialStorecertificate';
import ProjectServices from '../model/ProjectServices';
import ProjectUpdate from '../model/ProjectUpdate';

/**
* Project service.
* @module h1-client/ProjectApi
* @version 0.0.3
*/
export default class ProjectApi {

    /**
    * Constructs a new ProjectApi. 
    * @alias module:h1-client/ProjectApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create
     * Create project
     * @param {module:model/ProjectCreate} projectCreate 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Project} and HTTP response
     */
    projectCreateWithHttpInfo(projectCreate, opts) {
      opts = opts || {};
      let postBody = projectCreate;
      // verify the required parameter 'projectCreate' is set
      if (projectCreate === undefined || projectCreate === null) {
        throw new Error("Missing the required parameter 'projectCreate' when calling projectCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-idempotency-key': opts['xIdempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/project', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create
     * Create project
     * @param {module:model/ProjectCreate} projectCreate 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Project}
     */
    projectCreate(projectCreate, opts) {
      return this.projectCreateWithHttpInfo(projectCreate, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete
     * @param {String} projectId ID of project
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    projectDeleteWithHttpInfo(projectId) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectDelete");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/project/{projectId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete
     * @param {String} projectId ID of project
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    projectDelete(projectId) {
      return this.projectDeleteWithHttpInfo(projectId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights/:id
     * @param {String} projectId ID of project
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    projectDeleteAccessrightsIdWithHttpInfo(projectId, id) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectDeleteAccessrightsId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling projectDeleteAccessrightsId");
      }

      let pathParams = {
        'projectId': projectId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/project/{projectId}/accessrights/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights/:id
     * @param {String} projectId ID of project
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    projectDeleteAccessrightsId(projectId, id) {
      return this.projectDeleteAccessrightsIdWithHttpInfo(projectId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credentialStore/:id
     * @param {String} projectId ID of project
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Project} and HTTP response
     */
    projectDeleteCredentialStoreIdWithHttpInfo(projectId, id) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectDeleteCredentialStoreId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling projectDeleteCredentialStoreId");
      }

      let pathParams = {
        'projectId': projectId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/project/{projectId}/credentialStore/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credentialStore/:id
     * @param {String} projectId ID of project
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Project}
     */
    projectDeleteCredentialStoreId(projectId, id) {
      return this.projectDeleteCredentialStoreIdWithHttpInfo(projectId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credentialStore/certificate/:id
     * @param {String} projectId ID of project
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2003} and HTTP response
     */
    projectDeleteCredentialStorecertificateIdWithHttpInfo(projectId, id) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectDeleteCredentialStorecertificateId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling projectDeleteCredentialStorecertificateId");
      }

      let pathParams = {
        'projectId': projectId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2003;
      return this.apiClient.callApi(
        '/project/{projectId}/credentialStore/certificate/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credentialStore/certificate/:id
     * @param {String} projectId ID of project
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2003}
     */
    projectDeleteCredentialStorecertificateId(projectId, id) {
      return this.projectDeleteCredentialStorecertificateIdWithHttpInfo(projectId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag/:key
     * @param {String} projectId ID of project
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    projectDeleteTagKeyWithHttpInfo(projectId, key) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectDeleteTagKey");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling projectDeleteTagKey");
      }

      let pathParams = {
        'projectId': projectId,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/project/{projectId}/tag/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag/:key
     * @param {String} projectId ID of project
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    projectDeleteTagKey(projectId, key) {
      return this.projectDeleteTagKeyWithHttpInfo(projectId, key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credentialStore/:id
     * @param {String} projectId ID of project
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    projectGetCredentialStoreIdWithHttpInfo(projectId, id) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectGetCredentialStoreId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling projectGetCredentialStoreId");
      }

      let pathParams = {
        'projectId': projectId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Credential;
      return this.apiClient.callApi(
        '/project/{projectId}/credentialStore/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credentialStore/:id
     * @param {String} projectId ID of project
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    projectGetCredentialStoreId(projectId, id) {
      return this.projectGetCredentialStoreIdWithHttpInfo(projectId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credentialStore/certificate/:id
     * @param {String} projectId ID of project
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    projectGetCredentialStorecertificateIdWithHttpInfo(projectId, id) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectGetCredentialStorecertificateId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling projectGetCredentialStorecertificateId");
      }

      let pathParams = {
        'projectId': projectId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Credential;
      return this.apiClient.callApi(
        '/project/{projectId}/credentialStore/certificate/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credentialStore/certificate/:id
     * @param {String} projectId ID of project
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    projectGetCredentialStorecertificateId(projectId, id) {
      return this.projectGetCredentialStorecertificateIdWithHttpInfo(projectId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /limit
     * @param {String} projectId ID of project
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProjectLimit} and HTTP response
     */
    projectGetLimitWithHttpInfo(projectId) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectGetLimit");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectLimit;
      return this.apiClient.callApi(
        '/project/{projectId}/limit', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /limit
     * @param {String} projectId ID of project
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProjectLimit}
     */
    projectGetLimit(projectId) {
      return this.projectGetLimitWithHttpInfo(projectId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services/:serviceId
     * @param {String} projectId ID of project
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProjectServices} and HTTP response
     */
    projectGetServicesServiceIdWithHttpInfo(projectId, serviceId) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectGetServicesServiceId");
      }
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling projectGetServicesServiceId");
      }

      let pathParams = {
        'projectId': projectId,
        'serviceId': serviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectServices;
      return this.apiClient.callApi(
        '/project/{projectId}/services/{serviceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /services/:serviceId
     * @param {String} projectId ID of project
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProjectServices}
     */
    projectGetServicesServiceId(projectId, serviceId) {
      return this.projectGetServicesServiceIdWithHttpInfo(projectId, serviceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} projectId ID of project
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    projectGetTagWithHttpInfo(projectId) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectGetTag");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/project/{projectId}/tag', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} projectId ID of project
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    projectGetTag(projectId) {
      return this.projectGetTagWithHttpInfo(projectId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List
     * List project
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @param {Number} opts.limit Filter by $limit
     * @param {Boolean} opts.active Filter by active
     * @param {String} opts.organisation Filter by organisation
     * @param {String} opts.accessRightsId Filter by accessRights.id
     * @param {Object.<String, {String: String}>} opts.tag Filter by tag
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Project>} and HTTP response
     */
    projectListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        '$limit': opts['limit'],
        'active': opts['active'],
        'organisation': opts['organisation'],
        'accessRights.id': opts['accessRightsId'],
        'tag': opts['tag']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Project];
      return this.apiClient.callApi(
        '/project', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List
     * List project
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @param {Number} opts.limit Filter by $limit
     * @param {Boolean} opts.active Filter by active
     * @param {String} opts.organisation Filter by organisation
     * @param {String} opts.accessRightsId Filter by accessRights.id
     * @param {Object.<String, {String: String}>} opts.tag Filter by tag
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Project>}
     */
    projectList(opts) {
      return this.projectListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} projectId ID of project
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/AccessrightsUserRole>} and HTTP response
     */
    projectListAccessrightsWithHttpInfo(projectId) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectListAccessrights");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AccessrightsUserRole];
      return this.apiClient.callApi(
        '/project/{projectId}/accessrights', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights
     * @param {String} projectId ID of project
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/AccessrightsUserRole>}
     */
    projectListAccessrights(projectId) {
      return this.projectListAccessrightsWithHttpInfo(projectId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /billing
     * @param {String} projectId ID of project
     * @param {Object} opts Optional parameters
     * @param {Date} opts.start start
     * @param {Date} opts.end end
     * @param {String} opts.resourceType resource.type
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Billing>} and HTTP response
     */
    projectListBillingWithHttpInfo(projectId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectListBilling");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
        'start': opts['start'],
        'end': opts['end'],
        'resource.type': opts['resourceType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Billing];
      return this.apiClient.callApi(
        '/project/{projectId}/billing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /billing
     * @param {String} projectId ID of project
     * @param {Object} opts Optional parameters
     * @param {Date} opts.start start
     * @param {Date} opts.end end
     * @param {String} opts.resourceType resource.type
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Billing>}
     */
    projectListBilling(projectId, opts) {
      return this.projectListBillingWithHttpInfo(projectId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credentialStore
     * @param {String} projectId ID of project
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Credential>} and HTTP response
     */
    projectListCredentialStoreWithHttpInfo(projectId) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectListCredentialStore");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Credential];
      return this.apiClient.callApi(
        '/project/{projectId}/credentialStore', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credentialStore
     * @param {String} projectId ID of project
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Credential>}
     */
    projectListCredentialStore(projectId) {
      return this.projectListCredentialStoreWithHttpInfo(projectId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credentialStore/certificate
     * @param {String} projectId ID of project
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Credential>} and HTTP response
     */
    projectListCredentialStorecertificateWithHttpInfo(projectId) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectListCredentialStorecertificate");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Credential];
      return this.apiClient.callApi(
        '/project/{projectId}/credentialStore/certificate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credentialStore/certificate
     * @param {String} projectId ID of project
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Credential>}
     */
    projectListCredentialStorecertificate(projectId) {
      return this.projectListCredentialStorecertificateWithHttpInfo(projectId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /invoice
     * @param {String} projectId ID of project
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Invoice>} and HTTP response
     */
    projectListInvoiceWithHttpInfo(projectId) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectListInvoice");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Invoice];
      return this.apiClient.callApi(
        '/project/{projectId}/invoice', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /invoice
     * @param {String} projectId ID of project
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Invoice>}
     */
    projectListInvoice(projectId) {
      return this.projectListInvoiceWithHttpInfo(projectId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /payment
     * @param {String} projectId ID of project
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Payment>} and HTTP response
     */
    projectListPaymentWithHttpInfo(projectId) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectListPayment");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Payment];
      return this.apiClient.callApi(
        '/project/{projectId}/payment', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /payment
     * @param {String} projectId ID of project
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Payment>}
     */
    projectListPayment(projectId) {
      return this.projectListPaymentWithHttpInfo(projectId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /proforma
     * @param {String} projectId ID of project
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Proforma>} and HTTP response
     */
    projectListProformaWithHttpInfo(projectId) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectListProforma");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Proforma];
      return this.apiClient.callApi(
        '/project/{projectId}/proforma', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /proforma
     * @param {String} projectId ID of project
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Proforma>}
     */
    projectListProforma(projectId) {
      return this.projectListProformaWithHttpInfo(projectId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /queue
     * @param {String} projectId ID of project
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit $limit
     * @param {Number} opts.skip $skip
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Event>} and HTTP response
     */
    projectListQueueWithHttpInfo(projectId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectListQueue");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
        '$limit': opts['limit'],
        '$skip': opts['skip']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Event];
      return this.apiClient.callApi(
        '/project/{projectId}/queue', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /queue
     * @param {String} projectId ID of project
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit $limit
     * @param {Number} opts.skip $skip
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Event>}
     */
    projectListQueue(projectId, opts) {
      return this.projectListQueueWithHttpInfo(projectId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services
     * @param {String} projectId ID of project
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ProjectServices>} and HTTP response
     */
    projectListServicesWithHttpInfo(projectId) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectListServices");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProjectServices];
      return this.apiClient.callApi(
        '/project/{projectId}/services', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /services
     * @param {String} projectId ID of project
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ProjectServices>}
     */
    projectListServices(projectId) {
      return this.projectListServicesWithHttpInfo(projectId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /stats
     * @param {String} projectId ID of project
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/InlineResponse2002>} and HTTP response
     */
    projectListStatsWithHttpInfo(projectId) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectListStats");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [InlineResponse2002];
      return this.apiClient.callApi(
        '/project/{projectId}/stats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /stats
     * @param {String} projectId ID of project
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/InlineResponse2002>}
     */
    projectListStats(projectId) {
      return this.projectListStatsWithHttpInfo(projectId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credentialStore/:id
     * @param {String} projectId ID of project
     * @param {String} id id
     * @param {module:model/ProjectPatchCredentialStoreId} projectPatchCredentialStoreId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    projectPatchCredentialStoreIdWithHttpInfo(projectId, id, projectPatchCredentialStoreId) {
      let postBody = projectPatchCredentialStoreId;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectPatchCredentialStoreId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling projectPatchCredentialStoreId");
      }
      // verify the required parameter 'projectPatchCredentialStoreId' is set
      if (projectPatchCredentialStoreId === undefined || projectPatchCredentialStoreId === null) {
        throw new Error("Missing the required parameter 'projectPatchCredentialStoreId' when calling projectPatchCredentialStoreId");
      }

      let pathParams = {
        'projectId': projectId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Credential;
      return this.apiClient.callApi(
        '/project/{projectId}/credentialStore/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credentialStore/:id
     * @param {String} projectId ID of project
     * @param {String} id id
     * @param {module:model/ProjectPatchCredentialStoreId} projectPatchCredentialStoreId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    projectPatchCredentialStoreId(projectId, id, projectPatchCredentialStoreId) {
      return this.projectPatchCredentialStoreIdWithHttpInfo(projectId, id, projectPatchCredentialStoreId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credentialStore/certificate/:id
     * @param {String} projectId ID of project
     * @param {String} id id
     * @param {module:model/ProjectPatchCredentialStorecertificateId} projectPatchCredentialStorecertificateId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    projectPatchCredentialStorecertificateIdWithHttpInfo(projectId, id, projectPatchCredentialStorecertificateId) {
      let postBody = projectPatchCredentialStorecertificateId;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectPatchCredentialStorecertificateId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling projectPatchCredentialStorecertificateId");
      }
      // verify the required parameter 'projectPatchCredentialStorecertificateId' is set
      if (projectPatchCredentialStorecertificateId === undefined || projectPatchCredentialStorecertificateId === null) {
        throw new Error("Missing the required parameter 'projectPatchCredentialStorecertificateId' when calling projectPatchCredentialStorecertificateId");
      }

      let pathParams = {
        'projectId': projectId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Credential;
      return this.apiClient.callApi(
        '/project/{projectId}/credentialStore/certificate/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credentialStore/certificate/:id
     * @param {String} projectId ID of project
     * @param {String} id id
     * @param {module:model/ProjectPatchCredentialStorecertificateId} projectPatchCredentialStorecertificateId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    projectPatchCredentialStorecertificateId(projectId, id, projectPatchCredentialStorecertificateId) {
      return this.projectPatchCredentialStorecertificateIdWithHttpInfo(projectId, id, projectPatchCredentialStorecertificateId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} projectId ID of project
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    projectPatchTagWithHttpInfo(projectId, requestBody) {
      let postBody = requestBody;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectPatchTag");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling projectPatchTag");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/project/{projectId}/tag', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} projectId ID of project
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    projectPatchTag(projectId, requestBody) {
      return this.projectPatchTagWithHttpInfo(projectId, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} projectId ID of project
     * @param {module:model/ProjectPostAccessrights} projectPostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    projectPostAccessrightsWithHttpInfo(projectId, projectPostAccessrights) {
      let postBody = projectPostAccessrights;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectPostAccessrights");
      }
      // verify the required parameter 'projectPostAccessrights' is set
      if (projectPostAccessrights === undefined || projectPostAccessrights === null) {
        throw new Error("Missing the required parameter 'projectPostAccessrights' when calling projectPostAccessrights");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/project/{projectId}/accessrights', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights
     * @param {String} projectId ID of project
     * @param {module:model/ProjectPostAccessrights} projectPostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    projectPostAccessrights(projectId, projectPostAccessrights) {
      return this.projectPostAccessrightsWithHttpInfo(projectId, projectPostAccessrights)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credentialStore
     * @param {String} projectId ID of project
     * @param {module:model/ProjectPostCredentialStore} projectPostCredentialStore 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    projectPostCredentialStoreWithHttpInfo(projectId, projectPostCredentialStore) {
      let postBody = projectPostCredentialStore;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectPostCredentialStore");
      }
      // verify the required parameter 'projectPostCredentialStore' is set
      if (projectPostCredentialStore === undefined || projectPostCredentialStore === null) {
        throw new Error("Missing the required parameter 'projectPostCredentialStore' when calling projectPostCredentialStore");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Credential;
      return this.apiClient.callApi(
        '/project/{projectId}/credentialStore', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credentialStore
     * @param {String} projectId ID of project
     * @param {module:model/ProjectPostCredentialStore} projectPostCredentialStore 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    projectPostCredentialStore(projectId, projectPostCredentialStore) {
      return this.projectPostCredentialStoreWithHttpInfo(projectId, projectPostCredentialStore)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credentialStore/certificate
     * @param {String} projectId ID of project
     * @param {module:model/ProjectPostCredentialStorecertificate} projectPostCredentialStorecertificate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    projectPostCredentialStorecertificateWithHttpInfo(projectId, projectPostCredentialStorecertificate) {
      let postBody = projectPostCredentialStorecertificate;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectPostCredentialStorecertificate");
      }
      // verify the required parameter 'projectPostCredentialStorecertificate' is set
      if (projectPostCredentialStorecertificate === undefined || projectPostCredentialStorecertificate === null) {
        throw new Error("Missing the required parameter 'projectPostCredentialStorecertificate' when calling projectPostCredentialStorecertificate");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Credential;
      return this.apiClient.callApi(
        '/project/{projectId}/credentialStore/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credentialStore/certificate
     * @param {String} projectId ID of project
     * @param {module:model/ProjectPostCredentialStorecertificate} projectPostCredentialStorecertificate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    projectPostCredentialStorecertificate(projectId, projectPostCredentialStorecertificate) {
      return this.projectPostCredentialStorecertificateWithHttpInfo(projectId, projectPostCredentialStorecertificate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} projectId ID of project
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    projectPutTagWithHttpInfo(projectId, requestBody) {
      let postBody = requestBody;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectPutTag");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling projectPutTag");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/project/{projectId}/tag', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} projectId ID of project
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    projectPutTag(projectId, requestBody) {
      return this.projectPutTagWithHttpInfo(projectId, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get
     * Returns a single project
     * @param {String} projectId ID of project
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Project} and HTTP response
     */
    projectShowWithHttpInfo(projectId) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectShow");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/project/{projectId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get
     * Returns a single project
     * @param {String} projectId ID of project
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Project}
     */
    projectShow(projectId) {
      return this.projectShowWithHttpInfo(projectId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update
     * Returns modified project
     * @param {String} projectId ID of project
     * @param {module:model/ProjectUpdate} projectUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Project} and HTTP response
     */
    projectUpdateWithHttpInfo(projectId, projectUpdate) {
      let postBody = projectUpdate;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectUpdate");
      }
      // verify the required parameter 'projectUpdate' is set
      if (projectUpdate === undefined || projectUpdate === null) {
        throw new Error("Missing the required parameter 'projectUpdate' when calling projectUpdate");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/project/{projectId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update
     * Returns modified project
     * @param {String} projectId ID of project
     * @param {module:model/ProjectUpdate} projectUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Project}
     */
    projectUpdate(projectId, projectUpdate) {
      return this.projectUpdateWithHttpInfo(projectId, projectUpdate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
