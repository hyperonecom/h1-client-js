/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.2.3-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Event', 'model/Hdd', 'model/InlineResponse400', 'model/Netadp', 'model/Vm', 'model/VmActionFlavour', 'model/VmActionImage', 'model/VmActionPasswordReset', 'model/VmActionRename', 'model/VmCreate', 'model/VmDelete', 'model/VmPostAccessrights', 'model/VmPostHdd', 'model/VmPostNetadp', 'model/VmServices', 'model/VmUpdate'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Event'), require('../model/Hdd'), require('../model/InlineResponse400'), require('../model/Netadp'), require('../model/Vm'), require('../model/VmActionFlavour'), require('../model/VmActionImage'), require('../model/VmActionPasswordReset'), require('../model/VmActionRename'), require('../model/VmCreate'), require('../model/VmDelete'), require('../model/VmPostAccessrights'), require('../model/VmPostHdd'), require('../model/VmPostNetadp'), require('../model/VmServices'), require('../model/VmUpdate'));
  } else {
    // Browser globals (root is window)
    if (!root.HyperoneClient) {
      root.HyperoneClient = {};
    }
    root.HyperoneClient.VmApi = factory(root.HyperoneClient.ApiClient, root.HyperoneClient.Event, root.HyperoneClient.Hdd, root.HyperoneClient.InlineResponse400, root.HyperoneClient.Netadp, root.HyperoneClient.Vm, root.HyperoneClient.VmActionFlavour, root.HyperoneClient.VmActionImage, root.HyperoneClient.VmActionPasswordReset, root.HyperoneClient.VmActionRename, root.HyperoneClient.VmCreate, root.HyperoneClient.VmDelete, root.HyperoneClient.VmPostAccessrights, root.HyperoneClient.VmPostHdd, root.HyperoneClient.VmPostNetadp, root.HyperoneClient.VmServices, root.HyperoneClient.VmUpdate);
  }
}(this, function(ApiClient, Event, Hdd, InlineResponse400, Netadp, Vm, VmActionFlavour, VmActionImage, VmActionPasswordReset, VmActionRename, VmCreate, VmDelete, VmPostAccessrights, VmPostHdd, VmPostNetadp, VmServices, VmUpdate) {
  'use strict';

  /**
   * Vm service.
   * @module h1-client/VmApi
   * @version 0.0.3
   */

  /**
   * Constructs a new VmApi. 
   * @alias module:h1-client/VmApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * /actions/flavour
     * Action flavour
     * @param {String} vmId ID of vm
     * @param {module:model/VmActionFlavour} vmActionFlavour 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vm} and HTTP response
     */
    this.vmActionFlavourWithHttpInfo = function(vmId, vmActionFlavour, opts) {
      opts = opts || {};
      var postBody = vmActionFlavour;
      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling vmActionFlavour");
      }
      // verify the required parameter 'vmActionFlavour' is set
      if (vmActionFlavour === undefined || vmActionFlavour === null) {
        throw new Error("Missing the required parameter 'vmActionFlavour' when calling vmActionFlavour");
      }

      var pathParams = {
        'vmId': vmId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'x-idempotency-key': opts['xIdempotencyKey']
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Vm;
      return this.apiClient.callApi(
        '/vm/{vmId}/actions/flavour', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /actions/flavour
     * Action flavour
     * @param {String} vmId ID of vm
     * @param {module:model/VmActionFlavour} vmActionFlavour 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vm}
     */
    this.vmActionFlavour = function(vmId, vmActionFlavour, opts) {
      return this.vmActionFlavourWithHttpInfo(vmId, vmActionFlavour, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/image
     * Action image
     * @param {String} vmId ID of vm
     * @param {module:model/VmActionImage} vmActionImage 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vm} and HTTP response
     */
    this.vmActionImageWithHttpInfo = function(vmId, vmActionImage, opts) {
      opts = opts || {};
      var postBody = vmActionImage;
      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling vmActionImage");
      }
      // verify the required parameter 'vmActionImage' is set
      if (vmActionImage === undefined || vmActionImage === null) {
        throw new Error("Missing the required parameter 'vmActionImage' when calling vmActionImage");
      }

      var pathParams = {
        'vmId': vmId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'x-idempotency-key': opts['xIdempotencyKey']
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Vm;
      return this.apiClient.callApi(
        '/vm/{vmId}/actions/image', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /actions/image
     * Action image
     * @param {String} vmId ID of vm
     * @param {module:model/VmActionImage} vmActionImage 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vm}
     */
    this.vmActionImage = function(vmId, vmActionImage, opts) {
      return this.vmActionImageWithHttpInfo(vmId, vmActionImage, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/password_reset
     * Action password_reset
     * @param {String} vmId ID of vm
     * @param {module:model/VmActionPasswordReset} vmActionPasswordReset 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vm} and HTTP response
     */
    this.vmActionPasswordResetWithHttpInfo = function(vmId, vmActionPasswordReset, opts) {
      opts = opts || {};
      var postBody = vmActionPasswordReset;
      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling vmActionPasswordReset");
      }
      // verify the required parameter 'vmActionPasswordReset' is set
      if (vmActionPasswordReset === undefined || vmActionPasswordReset === null) {
        throw new Error("Missing the required parameter 'vmActionPasswordReset' when calling vmActionPasswordReset");
      }

      var pathParams = {
        'vmId': vmId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'x-idempotency-key': opts['xIdempotencyKey']
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Vm;
      return this.apiClient.callApi(
        '/vm/{vmId}/actions/password_reset', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /actions/password_reset
     * Action password_reset
     * @param {String} vmId ID of vm
     * @param {module:model/VmActionPasswordReset} vmActionPasswordReset 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vm}
     */
    this.vmActionPasswordReset = function(vmId, vmActionPasswordReset, opts) {
      return this.vmActionPasswordResetWithHttpInfo(vmId, vmActionPasswordReset, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/rename
     * Action rename
     * @param {String} vmId ID of vm
     * @param {module:model/VmActionRename} vmActionRename 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vm} and HTTP response
     */
    this.vmActionRenameWithHttpInfo = function(vmId, vmActionRename, opts) {
      opts = opts || {};
      var postBody = vmActionRename;
      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling vmActionRename");
      }
      // verify the required parameter 'vmActionRename' is set
      if (vmActionRename === undefined || vmActionRename === null) {
        throw new Error("Missing the required parameter 'vmActionRename' when calling vmActionRename");
      }

      var pathParams = {
        'vmId': vmId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'x-idempotency-key': opts['xIdempotencyKey']
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Vm;
      return this.apiClient.callApi(
        '/vm/{vmId}/actions/rename', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /actions/rename
     * Action rename
     * @param {String} vmId ID of vm
     * @param {module:model/VmActionRename} vmActionRename 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vm}
     */
    this.vmActionRename = function(vmId, vmActionRename, opts) {
      return this.vmActionRenameWithHttpInfo(vmId, vmActionRename, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/restart
     * Action restart
     * @param {String} vmId ID of vm
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vm} and HTTP response
     */
    this.vmActionRestartWithHttpInfo = function(vmId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling vmActionRestart");
      }

      var pathParams = {
        'vmId': vmId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'x-idempotency-key': opts['xIdempotencyKey']
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Vm;
      return this.apiClient.callApi(
        '/vm/{vmId}/actions/restart', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /actions/restart
     * Action restart
     * @param {String} vmId ID of vm
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vm}
     */
    this.vmActionRestart = function(vmId, opts) {
      return this.vmActionRestartWithHttpInfo(vmId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/start
     * Action start
     * @param {String} vmId ID of vm
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vm} and HTTP response
     */
    this.vmActionStartWithHttpInfo = function(vmId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling vmActionStart");
      }

      var pathParams = {
        'vmId': vmId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'x-idempotency-key': opts['xIdempotencyKey']
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Vm;
      return this.apiClient.callApi(
        '/vm/{vmId}/actions/start', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /actions/start
     * Action start
     * @param {String} vmId ID of vm
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vm}
     */
    this.vmActionStart = function(vmId, opts) {
      return this.vmActionStartWithHttpInfo(vmId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/stop
     * Action stop
     * @param {String} vmId ID of vm
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vm} and HTTP response
     */
    this.vmActionStopWithHttpInfo = function(vmId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling vmActionStop");
      }

      var pathParams = {
        'vmId': vmId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'x-idempotency-key': opts['xIdempotencyKey']
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Vm;
      return this.apiClient.callApi(
        '/vm/{vmId}/actions/stop', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /actions/stop
     * Action stop
     * @param {String} vmId ID of vm
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vm}
     */
    this.vmActionStop = function(vmId, opts) {
      return this.vmActionStopWithHttpInfo(vmId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/turnoff
     * Action turnoff
     * @param {String} vmId ID of vm
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vm} and HTTP response
     */
    this.vmActionTurnoffWithHttpInfo = function(vmId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling vmActionTurnoff");
      }

      var pathParams = {
        'vmId': vmId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'x-idempotency-key': opts['xIdempotencyKey']
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Vm;
      return this.apiClient.callApi(
        '/vm/{vmId}/actions/turnoff', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /actions/turnoff
     * Action turnoff
     * @param {String} vmId ID of vm
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vm}
     */
    this.vmActionTurnoff = function(vmId, opts) {
      return this.vmActionTurnoffWithHttpInfo(vmId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create
     * Create vm
     * @param {module:model/VmCreate} vmCreate 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vm} and HTTP response
     */
    this.vmCreateWithHttpInfo = function(vmCreate, opts) {
      opts = opts || {};
      var postBody = vmCreate;
      // verify the required parameter 'vmCreate' is set
      if (vmCreate === undefined || vmCreate === null) {
        throw new Error("Missing the required parameter 'vmCreate' when calling vmCreate");
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'x-idempotency-key': opts['xIdempotencyKey']
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Vm;
      return this.apiClient.callApi(
        '/vm', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create
     * Create vm
     * @param {module:model/VmCreate} vmCreate 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vm}
     */
    this.vmCreate = function(vmCreate, opts) {
      return this.vmCreateWithHttpInfo(vmCreate, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete
     * @param {String} vmId ID of vm
     * @param {module:model/VmDelete} vmDelete 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.vmDeleteWithHttpInfo = function(vmId, vmDelete) {
      var postBody = vmDelete;
      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling vmDelete");
      }
      // verify the required parameter 'vmDelete' is set
      if (vmDelete === undefined || vmDelete === null) {
        throw new Error("Missing the required parameter 'vmDelete' when calling vmDelete");
      }

      var pathParams = {
        'vmId': vmId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;
      return this.apiClient.callApi(
        '/vm/{vmId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete
     * @param {String} vmId ID of vm
     * @param {module:model/VmDelete} vmDelete 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.vmDelete = function(vmId, vmDelete) {
      return this.vmDeleteWithHttpInfo(vmId, vmDelete)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights/:identity
     * @param {String} vmId ID of vm
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vm} and HTTP response
     */
    this.vmDeleteAccessrightsIdentityWithHttpInfo = function(vmId, identity) {
      var postBody = null;
      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling vmDeleteAccessrightsIdentity");
      }
      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling vmDeleteAccessrightsIdentity");
      }

      var pathParams = {
        'vmId': vmId,
        'identity': identity
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Vm;
      return this.apiClient.callApi(
        '/vm/{vmId}/accessrights/{identity}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights/:identity
     * @param {String} vmId ID of vm
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vm}
     */
    this.vmDeleteAccessrightsIdentity = function(vmId, identity) {
      return this.vmDeleteAccessrightsIdentityWithHttpInfo(vmId, identity)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /hdd/:diskId
     * @param {String} vmId ID of vm
     * @param {String} diskId diskId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Hdd} and HTTP response
     */
    this.vmDeleteHddDiskIdWithHttpInfo = function(vmId, diskId) {
      var postBody = null;
      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling vmDeleteHddDiskId");
      }
      // verify the required parameter 'diskId' is set
      if (diskId === undefined || diskId === null) {
        throw new Error("Missing the required parameter 'diskId' when calling vmDeleteHddDiskId");
      }

      var pathParams = {
        'vmId': vmId,
        'diskId': diskId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Hdd;
      return this.apiClient.callApi(
        '/vm/{vmId}/hdd/{diskId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /hdd/:diskId
     * @param {String} vmId ID of vm
     * @param {String} diskId diskId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Hdd}
     */
    this.vmDeleteHddDiskId = function(vmId, diskId) {
      return this.vmDeleteHddDiskIdWithHttpInfo(vmId, diskId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /netadp/:netadpId
     * @param {String} vmId ID of vm
     * @param {String} netadpId netadpId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Netadp} and HTTP response
     */
    this.vmDeleteNetadpNetadpIdWithHttpInfo = function(vmId, netadpId) {
      var postBody = null;
      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling vmDeleteNetadpNetadpId");
      }
      // verify the required parameter 'netadpId' is set
      if (netadpId === undefined || netadpId === null) {
        throw new Error("Missing the required parameter 'netadpId' when calling vmDeleteNetadpNetadpId");
      }

      var pathParams = {
        'vmId': vmId,
        'netadpId': netadpId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Netadp;
      return this.apiClient.callApi(
        '/vm/{vmId}/netadp/{netadpId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /netadp/:netadpId
     * @param {String} vmId ID of vm
     * @param {String} netadpId netadpId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Netadp}
     */
    this.vmDeleteNetadpNetadpId = function(vmId, netadpId) {
      return this.vmDeleteNetadpNetadpIdWithHttpInfo(vmId, netadpId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag/:key
     * @param {String} vmId ID of vm
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    this.vmDeleteTagKeyWithHttpInfo = function(vmId, key) {
      var postBody = null;
      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling vmDeleteTagKey");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling vmDeleteTagKey");
      }

      var pathParams = {
        'vmId': vmId,
        'key': key
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/vm/{vmId}/tag/{key}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag/:key
     * @param {String} vmId ID of vm
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    this.vmDeleteTagKey = function(vmId, key) {
      return this.vmDeleteTagKeyWithHttpInfo(vmId, key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /console
     * @param {String} vmId ID of vm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.vmGetConsoleWithHttpInfo = function(vmId) {
      var postBody = null;
      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling vmGetConsole");
      }

      var pathParams = {
        'vmId': vmId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;
      return this.apiClient.callApi(
        '/vm/{vmId}/console', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /console
     * @param {String} vmId ID of vm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.vmGetConsole = function(vmId) {
      return this.vmGetConsoleWithHttpInfo(vmId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services/:serviceId
     * @param {String} vmId ID of vm
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VmServices} and HTTP response
     */
    this.vmGetServicesServiceIdWithHttpInfo = function(vmId, serviceId) {
      var postBody = null;
      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling vmGetServicesServiceId");
      }
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling vmGetServicesServiceId");
      }

      var pathParams = {
        'vmId': vmId,
        'serviceId': serviceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = VmServices;
      return this.apiClient.callApi(
        '/vm/{vmId}/services/{serviceId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /services/:serviceId
     * @param {String} vmId ID of vm
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VmServices}
     */
    this.vmGetServicesServiceId = function(vmId, serviceId) {
      return this.vmGetServicesServiceIdWithHttpInfo(vmId, serviceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} vmId ID of vm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    this.vmGetTagWithHttpInfo = function(vmId) {
      var postBody = null;
      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling vmGetTag");
      }

      var pathParams = {
        'vmId': vmId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/vm/{vmId}/tag', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} vmId ID of vm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    this.vmGetTag = function(vmId) {
      return this.vmGetTagWithHttpInfo(vmId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List
     * List vm
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @param {Object.<String, {String: String}>} opts.tag Filter by tag
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Vm>} and HTTP response
     */
    this.vmListWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
        'name': opts['name'],
        'tag': opts['tag'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Vm];
      return this.apiClient.callApi(
        '/vm', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List
     * List vm
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @param {Object.<String, {String: String}>} opts.tag Filter by tag
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Vm>}
     */
    this.vmList = function(opts) {
      return this.vmListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} vmId ID of vm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    this.vmListAccessrightsWithHttpInfo = function(vmId) {
      var postBody = null;
      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling vmListAccessrights");
      }

      var pathParams = {
        'vmId': vmId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['String'];
      return this.apiClient.callApi(
        '/vm/{vmId}/accessrights', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights
     * @param {String} vmId ID of vm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    this.vmListAccessrights = function(vmId) {
      return this.vmListAccessrightsWithHttpInfo(vmId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /hdd
     * @param {String} vmId ID of vm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Hdd>} and HTTP response
     */
    this.vmListHddWithHttpInfo = function(vmId) {
      var postBody = null;
      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling vmListHdd");
      }

      var pathParams = {
        'vmId': vmId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Hdd];
      return this.apiClient.callApi(
        '/vm/{vmId}/hdd', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /hdd
     * @param {String} vmId ID of vm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Hdd>}
     */
    this.vmListHdd = function(vmId) {
      return this.vmListHddWithHttpInfo(vmId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /netadp
     * @param {String} vmId ID of vm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Netadp>} and HTTP response
     */
    this.vmListNetadpWithHttpInfo = function(vmId) {
      var postBody = null;
      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling vmListNetadp");
      }

      var pathParams = {
        'vmId': vmId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Netadp];
      return this.apiClient.callApi(
        '/vm/{vmId}/netadp', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /netadp
     * @param {String} vmId ID of vm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Netadp>}
     */
    this.vmListNetadp = function(vmId) {
      return this.vmListNetadpWithHttpInfo(vmId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /queue
     * @param {String} vmId ID of vm
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit $limit
     * @param {Number} opts.skip $skip
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Event>} and HTTP response
     */
    this.vmListQueueWithHttpInfo = function(vmId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling vmListQueue");
      }

      var pathParams = {
        'vmId': vmId
      };
      var queryParams = {
        '$limit': opts['limit'],
        '$skip': opts['skip'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Event];
      return this.apiClient.callApi(
        '/vm/{vmId}/queue', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /queue
     * @param {String} vmId ID of vm
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit $limit
     * @param {Number} opts.skip $skip
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Event>}
     */
    this.vmListQueue = function(vmId, opts) {
      return this.vmListQueueWithHttpInfo(vmId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services
     * @param {String} vmId ID of vm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/VmServices>} and HTTP response
     */
    this.vmListServicesWithHttpInfo = function(vmId) {
      var postBody = null;
      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling vmListServices");
      }

      var pathParams = {
        'vmId': vmId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [VmServices];
      return this.apiClient.callApi(
        '/vm/{vmId}/services', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /services
     * @param {String} vmId ID of vm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/VmServices>}
     */
    this.vmListServices = function(vmId) {
      return this.vmListServicesWithHttpInfo(vmId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} vmId ID of vm
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    this.vmPatchTagWithHttpInfo = function(vmId, requestBody) {
      var postBody = requestBody;
      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling vmPatchTag");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling vmPatchTag");
      }

      var pathParams = {
        'vmId': vmId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/vm/{vmId}/tag', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} vmId ID of vm
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    this.vmPatchTag = function(vmId, requestBody) {
      return this.vmPatchTagWithHttpInfo(vmId, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} vmId ID of vm
     * @param {module:model/VmPostAccessrights} vmPostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vm} and HTTP response
     */
    this.vmPostAccessrightsWithHttpInfo = function(vmId, vmPostAccessrights) {
      var postBody = vmPostAccessrights;
      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling vmPostAccessrights");
      }
      // verify the required parameter 'vmPostAccessrights' is set
      if (vmPostAccessrights === undefined || vmPostAccessrights === null) {
        throw new Error("Missing the required parameter 'vmPostAccessrights' when calling vmPostAccessrights");
      }

      var pathParams = {
        'vmId': vmId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Vm;
      return this.apiClient.callApi(
        '/vm/{vmId}/accessrights', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights
     * @param {String} vmId ID of vm
     * @param {module:model/VmPostAccessrights} vmPostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vm}
     */
    this.vmPostAccessrights = function(vmId, vmPostAccessrights) {
      return this.vmPostAccessrightsWithHttpInfo(vmId, vmPostAccessrights)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /hdd
     * @param {String} vmId ID of vm
     * @param {module:model/VmPostHdd} vmPostHdd 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Hdd} and HTTP response
     */
    this.vmPostHddWithHttpInfo = function(vmId, vmPostHdd) {
      var postBody = vmPostHdd;
      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling vmPostHdd");
      }
      // verify the required parameter 'vmPostHdd' is set
      if (vmPostHdd === undefined || vmPostHdd === null) {
        throw new Error("Missing the required parameter 'vmPostHdd' when calling vmPostHdd");
      }

      var pathParams = {
        'vmId': vmId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Hdd;
      return this.apiClient.callApi(
        '/vm/{vmId}/hdd', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /hdd
     * @param {String} vmId ID of vm
     * @param {module:model/VmPostHdd} vmPostHdd 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Hdd}
     */
    this.vmPostHdd = function(vmId, vmPostHdd) {
      return this.vmPostHddWithHttpInfo(vmId, vmPostHdd)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /netadp
     * @param {String} vmId ID of vm
     * @param {module:model/VmPostNetadp} vmPostNetadp 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Netadp} and HTTP response
     */
    this.vmPostNetadpWithHttpInfo = function(vmId, vmPostNetadp) {
      var postBody = vmPostNetadp;
      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling vmPostNetadp");
      }
      // verify the required parameter 'vmPostNetadp' is set
      if (vmPostNetadp === undefined || vmPostNetadp === null) {
        throw new Error("Missing the required parameter 'vmPostNetadp' when calling vmPostNetadp");
      }

      var pathParams = {
        'vmId': vmId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Netadp;
      return this.apiClient.callApi(
        '/vm/{vmId}/netadp', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /netadp
     * @param {String} vmId ID of vm
     * @param {module:model/VmPostNetadp} vmPostNetadp 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Netadp}
     */
    this.vmPostNetadp = function(vmId, vmPostNetadp) {
      return this.vmPostNetadpWithHttpInfo(vmId, vmPostNetadp)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} vmId ID of vm
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    this.vmPutTagWithHttpInfo = function(vmId, requestBody) {
      var postBody = requestBody;
      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling vmPutTag");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling vmPutTag");
      }

      var pathParams = {
        'vmId': vmId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/vm/{vmId}/tag', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} vmId ID of vm
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    this.vmPutTag = function(vmId, requestBody) {
      return this.vmPutTagWithHttpInfo(vmId, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get
     * Returns a single vm
     * @param {String} vmId ID of vm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vm} and HTTP response
     */
    this.vmShowWithHttpInfo = function(vmId) {
      var postBody = null;
      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling vmShow");
      }

      var pathParams = {
        'vmId': vmId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Vm;
      return this.apiClient.callApi(
        '/vm/{vmId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get
     * Returns a single vm
     * @param {String} vmId ID of vm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vm}
     */
    this.vmShow = function(vmId) {
      return this.vmShowWithHttpInfo(vmId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update
     * Returns modified vm
     * @param {String} vmId ID of vm
     * @param {module:model/VmUpdate} vmUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vm} and HTTP response
     */
    this.vmUpdateWithHttpInfo = function(vmId, vmUpdate) {
      var postBody = vmUpdate;
      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling vmUpdate");
      }
      // verify the required parameter 'vmUpdate' is set
      if (vmUpdate === undefined || vmUpdate === null) {
        throw new Error("Missing the required parameter 'vmUpdate' when calling vmUpdate");
      }

      var pathParams = {
        'vmId': vmId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Vm;
      return this.apiClient.callApi(
        '/vm/{vmId}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update
     * Returns modified vm
     * @param {String} vmId ID of vm
     * @param {module:model/VmUpdate} vmUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vm}
     */
    this.vmUpdate = function(vmId, vmUpdate) {
      return this.vmUpdateWithHttpInfo(vmId, vmUpdate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
