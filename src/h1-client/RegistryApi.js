/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Credential from '../model/Credential';
import Event from '../model/Event';
import InlineResponse400 from '../model/InlineResponse400';
import Registry from '../model/Registry';
import RegistryActionTransfer from '../model/RegistryActionTransfer';
import RegistryActionUpdateDomain from '../model/RegistryActionUpdateDomain';
import RegistryCreate from '../model/RegistryCreate';
import RegistryPatchCredentialId from '../model/RegistryPatchCredentialId';
import RegistryPatchCredentialpasswordId from '../model/RegistryPatchCredentialpasswordId';
import RegistryPostAccessrights from '../model/RegistryPostAccessrights';
import RegistryPostCredential from '../model/RegistryPostCredential';
import RegistryPostCredentialpassword from '../model/RegistryPostCredentialpassword';
import RegistryServices from '../model/RegistryServices';
import RegistryUpdate from '../model/RegistryUpdate';

/**
* Registry service.
* @module h1-client/RegistryApi
* @version 0.0.3
*/
export default class RegistryApi {

    /**
    * Constructs a new RegistryApi. 
    * @alias module:h1-client/RegistryApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * /actions/start
     * Action start
     * @param {String} registryId ID of registry
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Registry} and HTTP response
     */
    registryActionStartWithHttpInfo(registryId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryActionStart");
      }

      let pathParams = {
        'registryId': registryId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-idempotency-key': opts['xIdempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Registry;
      return this.apiClient.callApi(
        '/registry/{registryId}/actions/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /actions/start
     * Action start
     * @param {String} registryId ID of registry
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Registry}
     */
    registryActionStart(registryId, opts) {
      return this.registryActionStartWithHttpInfo(registryId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/stop
     * Action stop
     * @param {String} registryId ID of registry
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Registry} and HTTP response
     */
    registryActionStopWithHttpInfo(registryId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryActionStop");
      }

      let pathParams = {
        'registryId': registryId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-idempotency-key': opts['xIdempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Registry;
      return this.apiClient.callApi(
        '/registry/{registryId}/actions/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /actions/stop
     * Action stop
     * @param {String} registryId ID of registry
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Registry}
     */
    registryActionStop(registryId, opts) {
      return this.registryActionStopWithHttpInfo(registryId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/transfer
     * Action transfer
     * @param {String} registryId ID of registry
     * @param {module:model/RegistryActionTransfer} registryActionTransfer 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Registry} and HTTP response
     */
    registryActionTransferWithHttpInfo(registryId, registryActionTransfer, opts) {
      opts = opts || {};
      let postBody = registryActionTransfer;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryActionTransfer");
      }
      // verify the required parameter 'registryActionTransfer' is set
      if (registryActionTransfer === undefined || registryActionTransfer === null) {
        throw new Error("Missing the required parameter 'registryActionTransfer' when calling registryActionTransfer");
      }

      let pathParams = {
        'registryId': registryId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-idempotency-key': opts['xIdempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Registry;
      return this.apiClient.callApi(
        '/registry/{registryId}/actions/transfer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /actions/transfer
     * Action transfer
     * @param {String} registryId ID of registry
     * @param {module:model/RegistryActionTransfer} registryActionTransfer 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Registry}
     */
    registryActionTransfer(registryId, registryActionTransfer, opts) {
      return this.registryActionTransferWithHttpInfo(registryId, registryActionTransfer, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/update_domain
     * Action update_domain
     * @param {String} registryId ID of registry
     * @param {module:model/RegistryActionUpdateDomain} registryActionUpdateDomain 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Registry} and HTTP response
     */
    registryActionUpdateDomainWithHttpInfo(registryId, registryActionUpdateDomain, opts) {
      opts = opts || {};
      let postBody = registryActionUpdateDomain;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryActionUpdateDomain");
      }
      // verify the required parameter 'registryActionUpdateDomain' is set
      if (registryActionUpdateDomain === undefined || registryActionUpdateDomain === null) {
        throw new Error("Missing the required parameter 'registryActionUpdateDomain' when calling registryActionUpdateDomain");
      }

      let pathParams = {
        'registryId': registryId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-idempotency-key': opts['xIdempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Registry;
      return this.apiClient.callApi(
        '/registry/{registryId}/actions/update_domain', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /actions/update_domain
     * Action update_domain
     * @param {String} registryId ID of registry
     * @param {module:model/RegistryActionUpdateDomain} registryActionUpdateDomain 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Registry}
     */
    registryActionUpdateDomain(registryId, registryActionUpdateDomain, opts) {
      return this.registryActionUpdateDomainWithHttpInfo(registryId, registryActionUpdateDomain, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create
     * Create registry
     * @param {module:model/RegistryCreate} registryCreate 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Registry} and HTTP response
     */
    registryCreateWithHttpInfo(registryCreate, opts) {
      opts = opts || {};
      let postBody = registryCreate;
      // verify the required parameter 'registryCreate' is set
      if (registryCreate === undefined || registryCreate === null) {
        throw new Error("Missing the required parameter 'registryCreate' when calling registryCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-idempotency-key': opts['xIdempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Registry;
      return this.apiClient.callApi(
        '/registry', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create
     * Create registry
     * @param {module:model/RegistryCreate} registryCreate 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Registry}
     */
    registryCreate(registryCreate, opts) {
      return this.registryCreateWithHttpInfo(registryCreate, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete
     * @param {String} registryId ID of registry
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    registryDeleteWithHttpInfo(registryId) {
      let postBody = null;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryDelete");
      }

      let pathParams = {
        'registryId': registryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/registry/{registryId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete
     * @param {String} registryId ID of registry
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    registryDelete(registryId) {
      return this.registryDeleteWithHttpInfo(registryId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights/:identity
     * @param {String} registryId ID of registry
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Registry} and HTTP response
     */
    registryDeleteAccessrightsIdentityWithHttpInfo(registryId, identity) {
      let postBody = null;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryDeleteAccessrightsIdentity");
      }
      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling registryDeleteAccessrightsIdentity");
      }

      let pathParams = {
        'registryId': registryId,
        'identity': identity
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Registry;
      return this.apiClient.callApi(
        '/registry/{registryId}/accessrights/{identity}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights/:identity
     * @param {String} registryId ID of registry
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Registry}
     */
    registryDeleteAccessrightsIdentity(registryId, identity) {
      return this.registryDeleteAccessrightsIdentityWithHttpInfo(registryId, identity)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/:id
     * @param {String} registryId ID of registry
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Registry} and HTTP response
     */
    registryDeleteCredentialIdWithHttpInfo(registryId, id) {
      let postBody = null;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryDeleteCredentialId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling registryDeleteCredentialId");
      }

      let pathParams = {
        'registryId': registryId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Registry;
      return this.apiClient.callApi(
        '/registry/{registryId}/credential/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/:id
     * @param {String} registryId ID of registry
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Registry}
     */
    registryDeleteCredentialId(registryId, id) {
      return this.registryDeleteCredentialIdWithHttpInfo(registryId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password/:id
     * @param {String} registryId ID of registry
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Registry} and HTTP response
     */
    registryDeleteCredentialpasswordIdWithHttpInfo(registryId, id) {
      let postBody = null;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryDeleteCredentialpasswordId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling registryDeleteCredentialpasswordId");
      }

      let pathParams = {
        'registryId': registryId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Registry;
      return this.apiClient.callApi(
        '/registry/{registryId}/credential/password/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/password/:id
     * @param {String} registryId ID of registry
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Registry}
     */
    registryDeleteCredentialpasswordId(registryId, id) {
      return this.registryDeleteCredentialpasswordIdWithHttpInfo(registryId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /repository/:repositoryId/tag/:tagId
     * @param {String} registryId ID of registry
     * @param {String} repositoryId repositoryId
     * @param {String} tagId tagId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    registryDeleteRepositoryRepositoryIdtagTagIdWithHttpInfo(registryId, repositoryId, tagId) {
      let postBody = null;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryDeleteRepositoryRepositoryIdtagTagId");
      }
      // verify the required parameter 'repositoryId' is set
      if (repositoryId === undefined || repositoryId === null) {
        throw new Error("Missing the required parameter 'repositoryId' when calling registryDeleteRepositoryRepositoryIdtagTagId");
      }
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling registryDeleteRepositoryRepositoryIdtagTagId");
      }

      let pathParams = {
        'registryId': registryId,
        'repositoryId': repositoryId,
        'tagId': tagId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/registry/{registryId}/repository/{repositoryId}/tag/{tagId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /repository/:repositoryId/tag/:tagId
     * @param {String} registryId ID of registry
     * @param {String} repositoryId repositoryId
     * @param {String} tagId tagId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    registryDeleteRepositoryRepositoryIdtagTagId(registryId, repositoryId, tagId) {
      return this.registryDeleteRepositoryRepositoryIdtagTagIdWithHttpInfo(registryId, repositoryId, tagId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag/:key
     * @param {String} registryId ID of registry
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    registryDeleteTagKeyWithHttpInfo(registryId, key) {
      let postBody = null;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryDeleteTagKey");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling registryDeleteTagKey");
      }

      let pathParams = {
        'registryId': registryId,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/registry/{registryId}/tag/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag/:key
     * @param {String} registryId ID of registry
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    registryDeleteTagKey(registryId, key) {
      return this.registryDeleteTagKeyWithHttpInfo(registryId, key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/:id
     * @param {String} registryId ID of registry
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    registryGetCredentialIdWithHttpInfo(registryId, id) {
      let postBody = null;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryGetCredentialId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling registryGetCredentialId");
      }

      let pathParams = {
        'registryId': registryId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Credential;
      return this.apiClient.callApi(
        '/registry/{registryId}/credential/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/:id
     * @param {String} registryId ID of registry
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    registryGetCredentialId(registryId, id) {
      return this.registryGetCredentialIdWithHttpInfo(registryId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password/:id
     * @param {String} registryId ID of registry
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    registryGetCredentialpasswordIdWithHttpInfo(registryId, id) {
      let postBody = null;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryGetCredentialpasswordId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling registryGetCredentialpasswordId");
      }

      let pathParams = {
        'registryId': registryId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Credential;
      return this.apiClient.callApi(
        '/registry/{registryId}/credential/password/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/password/:id
     * @param {String} registryId ID of registry
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    registryGetCredentialpasswordId(registryId, id) {
      return this.registryGetCredentialpasswordIdWithHttpInfo(registryId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /repository/:repositoryId
     * @param {String} registryId ID of registry
     * @param {String} repositoryId repositoryId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    registryGetRepositoryRepositoryIdWithHttpInfo(registryId, repositoryId) {
      let postBody = null;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryGetRepositoryRepositoryId");
      }
      // verify the required parameter 'repositoryId' is set
      if (repositoryId === undefined || repositoryId === null) {
        throw new Error("Missing the required parameter 'repositoryId' when calling registryGetRepositoryRepositoryId");
      }

      let pathParams = {
        'registryId': registryId,
        'repositoryId': repositoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/registry/{registryId}/repository/{repositoryId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /repository/:repositoryId
     * @param {String} registryId ID of registry
     * @param {String} repositoryId repositoryId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    registryGetRepositoryRepositoryId(registryId, repositoryId) {
      return this.registryGetRepositoryRepositoryIdWithHttpInfo(registryId, repositoryId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /repository/:repositoryId/tag/:tagId
     * @param {String} registryId ID of registry
     * @param {String} repositoryId repositoryId
     * @param {String} tagId tagId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    registryGetRepositoryRepositoryIdtagTagIdWithHttpInfo(registryId, repositoryId, tagId) {
      let postBody = null;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryGetRepositoryRepositoryIdtagTagId");
      }
      // verify the required parameter 'repositoryId' is set
      if (repositoryId === undefined || repositoryId === null) {
        throw new Error("Missing the required parameter 'repositoryId' when calling registryGetRepositoryRepositoryIdtagTagId");
      }
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling registryGetRepositoryRepositoryIdtagTagId");
      }

      let pathParams = {
        'registryId': registryId,
        'repositoryId': repositoryId,
        'tagId': tagId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/registry/{registryId}/repository/{repositoryId}/tag/{tagId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /repository/:repositoryId/tag/:tagId
     * @param {String} registryId ID of registry
     * @param {String} repositoryId repositoryId
     * @param {String} tagId tagId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    registryGetRepositoryRepositoryIdtagTagId(registryId, repositoryId, tagId) {
      return this.registryGetRepositoryRepositoryIdtagTagIdWithHttpInfo(registryId, repositoryId, tagId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services/:serviceId
     * @param {String} registryId ID of registry
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RegistryServices} and HTTP response
     */
    registryGetServicesServiceIdWithHttpInfo(registryId, serviceId) {
      let postBody = null;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryGetServicesServiceId");
      }
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling registryGetServicesServiceId");
      }

      let pathParams = {
        'registryId': registryId,
        'serviceId': serviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RegistryServices;
      return this.apiClient.callApi(
        '/registry/{registryId}/services/{serviceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /services/:serviceId
     * @param {String} registryId ID of registry
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RegistryServices}
     */
    registryGetServicesServiceId(registryId, serviceId) {
      return this.registryGetServicesServiceIdWithHttpInfo(registryId, serviceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} registryId ID of registry
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    registryGetTagWithHttpInfo(registryId) {
      let postBody = null;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryGetTag");
      }

      let pathParams = {
        'registryId': registryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/registry/{registryId}/tag', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} registryId ID of registry
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    registryGetTag(registryId) {
      return this.registryGetTagWithHttpInfo(registryId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List
     * List registry
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @param {Object.<String, {String: String}>} opts.tag Filter by tag
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Registry>} and HTTP response
     */
    registryListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'tag': opts['tag']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Registry];
      return this.apiClient.callApi(
        '/registry', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List
     * List registry
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @param {Object.<String, {String: String}>} opts.tag Filter by tag
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Registry>}
     */
    registryList(opts) {
      return this.registryListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} registryId ID of registry
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    registryListAccessrightsWithHttpInfo(registryId) {
      let postBody = null;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryListAccessrights");
      }

      let pathParams = {
        'registryId': registryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/registry/{registryId}/accessrights', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights
     * @param {String} registryId ID of registry
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    registryListAccessrights(registryId) {
      return this.registryListAccessrightsWithHttpInfo(registryId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential
     * @param {String} registryId ID of registry
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Credential>} and HTTP response
     */
    registryListCredentialWithHttpInfo(registryId) {
      let postBody = null;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryListCredential");
      }

      let pathParams = {
        'registryId': registryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Credential];
      return this.apiClient.callApi(
        '/registry/{registryId}/credential', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential
     * @param {String} registryId ID of registry
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Credential>}
     */
    registryListCredential(registryId) {
      return this.registryListCredentialWithHttpInfo(registryId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password
     * @param {String} registryId ID of registry
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Credential>} and HTTP response
     */
    registryListCredentialpasswordWithHttpInfo(registryId) {
      let postBody = null;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryListCredentialpassword");
      }

      let pathParams = {
        'registryId': registryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Credential];
      return this.apiClient.callApi(
        '/registry/{registryId}/credential/password', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/password
     * @param {String} registryId ID of registry
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Credential>}
     */
    registryListCredentialpassword(registryId) {
      return this.registryListCredentialpasswordWithHttpInfo(registryId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /queue
     * @param {String} registryId ID of registry
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit $limit
     * @param {Number} opts.skip $skip
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Event>} and HTTP response
     */
    registryListQueueWithHttpInfo(registryId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryListQueue");
      }

      let pathParams = {
        'registryId': registryId
      };
      let queryParams = {
        '$limit': opts['limit'],
        '$skip': opts['skip']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Event];
      return this.apiClient.callApi(
        '/registry/{registryId}/queue', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /queue
     * @param {String} registryId ID of registry
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit $limit
     * @param {Number} opts.skip $skip
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Event>}
     */
    registryListQueue(registryId, opts) {
      return this.registryListQueueWithHttpInfo(registryId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /repository
     * @param {String} registryId ID of registry
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    registryListRepositoryWithHttpInfo(registryId) {
      let postBody = null;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryListRepository");
      }

      let pathParams = {
        'registryId': registryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/registry/{registryId}/repository', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /repository
     * @param {String} registryId ID of registry
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    registryListRepository(registryId) {
      return this.registryListRepositoryWithHttpInfo(registryId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /repository/:repositoryId/tag
     * @param {String} registryId ID of registry
     * @param {String} repositoryId repositoryId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    registryListRepositoryRepositoryIdtagWithHttpInfo(registryId, repositoryId) {
      let postBody = null;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryListRepositoryRepositoryIdtag");
      }
      // verify the required parameter 'repositoryId' is set
      if (repositoryId === undefined || repositoryId === null) {
        throw new Error("Missing the required parameter 'repositoryId' when calling registryListRepositoryRepositoryIdtag");
      }

      let pathParams = {
        'registryId': registryId,
        'repositoryId': repositoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/registry/{registryId}/repository/{repositoryId}/tag', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /repository/:repositoryId/tag
     * @param {String} registryId ID of registry
     * @param {String} repositoryId repositoryId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    registryListRepositoryRepositoryIdtag(registryId, repositoryId) {
      return this.registryListRepositoryRepositoryIdtagWithHttpInfo(registryId, repositoryId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services
     * @param {String} registryId ID of registry
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/RegistryServices>} and HTTP response
     */
    registryListServicesWithHttpInfo(registryId) {
      let postBody = null;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryListServices");
      }

      let pathParams = {
        'registryId': registryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RegistryServices];
      return this.apiClient.callApi(
        '/registry/{registryId}/services', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /services
     * @param {String} registryId ID of registry
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/RegistryServices>}
     */
    registryListServices(registryId) {
      return this.registryListServicesWithHttpInfo(registryId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/:id
     * @param {String} registryId ID of registry
     * @param {String} id id
     * @param {module:model/RegistryPatchCredentialId} registryPatchCredentialId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    registryPatchCredentialIdWithHttpInfo(registryId, id, registryPatchCredentialId) {
      let postBody = registryPatchCredentialId;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryPatchCredentialId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling registryPatchCredentialId");
      }
      // verify the required parameter 'registryPatchCredentialId' is set
      if (registryPatchCredentialId === undefined || registryPatchCredentialId === null) {
        throw new Error("Missing the required parameter 'registryPatchCredentialId' when calling registryPatchCredentialId");
      }

      let pathParams = {
        'registryId': registryId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Credential;
      return this.apiClient.callApi(
        '/registry/{registryId}/credential/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/:id
     * @param {String} registryId ID of registry
     * @param {String} id id
     * @param {module:model/RegistryPatchCredentialId} registryPatchCredentialId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    registryPatchCredentialId(registryId, id, registryPatchCredentialId) {
      return this.registryPatchCredentialIdWithHttpInfo(registryId, id, registryPatchCredentialId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password/:id
     * @param {String} registryId ID of registry
     * @param {String} id id
     * @param {module:model/RegistryPatchCredentialpasswordId} registryPatchCredentialpasswordId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    registryPatchCredentialpasswordIdWithHttpInfo(registryId, id, registryPatchCredentialpasswordId) {
      let postBody = registryPatchCredentialpasswordId;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryPatchCredentialpasswordId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling registryPatchCredentialpasswordId");
      }
      // verify the required parameter 'registryPatchCredentialpasswordId' is set
      if (registryPatchCredentialpasswordId === undefined || registryPatchCredentialpasswordId === null) {
        throw new Error("Missing the required parameter 'registryPatchCredentialpasswordId' when calling registryPatchCredentialpasswordId");
      }

      let pathParams = {
        'registryId': registryId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Credential;
      return this.apiClient.callApi(
        '/registry/{registryId}/credential/password/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/password/:id
     * @param {String} registryId ID of registry
     * @param {String} id id
     * @param {module:model/RegistryPatchCredentialpasswordId} registryPatchCredentialpasswordId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    registryPatchCredentialpasswordId(registryId, id, registryPatchCredentialpasswordId) {
      return this.registryPatchCredentialpasswordIdWithHttpInfo(registryId, id, registryPatchCredentialpasswordId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} registryId ID of registry
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    registryPatchTagWithHttpInfo(registryId, requestBody) {
      let postBody = requestBody;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryPatchTag");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling registryPatchTag");
      }

      let pathParams = {
        'registryId': registryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/registry/{registryId}/tag', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} registryId ID of registry
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    registryPatchTag(registryId, requestBody) {
      return this.registryPatchTagWithHttpInfo(registryId, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} registryId ID of registry
     * @param {module:model/RegistryPostAccessrights} registryPostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Registry} and HTTP response
     */
    registryPostAccessrightsWithHttpInfo(registryId, registryPostAccessrights) {
      let postBody = registryPostAccessrights;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryPostAccessrights");
      }
      // verify the required parameter 'registryPostAccessrights' is set
      if (registryPostAccessrights === undefined || registryPostAccessrights === null) {
        throw new Error("Missing the required parameter 'registryPostAccessrights' when calling registryPostAccessrights");
      }

      let pathParams = {
        'registryId': registryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Registry;
      return this.apiClient.callApi(
        '/registry/{registryId}/accessrights', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights
     * @param {String} registryId ID of registry
     * @param {module:model/RegistryPostAccessrights} registryPostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Registry}
     */
    registryPostAccessrights(registryId, registryPostAccessrights) {
      return this.registryPostAccessrightsWithHttpInfo(registryId, registryPostAccessrights)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential
     * @param {String} registryId ID of registry
     * @param {module:model/RegistryPostCredential} registryPostCredential 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    registryPostCredentialWithHttpInfo(registryId, registryPostCredential) {
      let postBody = registryPostCredential;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryPostCredential");
      }
      // verify the required parameter 'registryPostCredential' is set
      if (registryPostCredential === undefined || registryPostCredential === null) {
        throw new Error("Missing the required parameter 'registryPostCredential' when calling registryPostCredential");
      }

      let pathParams = {
        'registryId': registryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Credential;
      return this.apiClient.callApi(
        '/registry/{registryId}/credential', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential
     * @param {String} registryId ID of registry
     * @param {module:model/RegistryPostCredential} registryPostCredential 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    registryPostCredential(registryId, registryPostCredential) {
      return this.registryPostCredentialWithHttpInfo(registryId, registryPostCredential)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password
     * @param {String} registryId ID of registry
     * @param {module:model/RegistryPostCredentialpassword} registryPostCredentialpassword 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    registryPostCredentialpasswordWithHttpInfo(registryId, registryPostCredentialpassword) {
      let postBody = registryPostCredentialpassword;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryPostCredentialpassword");
      }
      // verify the required parameter 'registryPostCredentialpassword' is set
      if (registryPostCredentialpassword === undefined || registryPostCredentialpassword === null) {
        throw new Error("Missing the required parameter 'registryPostCredentialpassword' when calling registryPostCredentialpassword");
      }

      let pathParams = {
        'registryId': registryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Credential;
      return this.apiClient.callApi(
        '/registry/{registryId}/credential/password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/password
     * @param {String} registryId ID of registry
     * @param {module:model/RegistryPostCredentialpassword} registryPostCredentialpassword 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    registryPostCredentialpassword(registryId, registryPostCredentialpassword) {
      return this.registryPostCredentialpasswordWithHttpInfo(registryId, registryPostCredentialpassword)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} registryId ID of registry
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    registryPutTagWithHttpInfo(registryId, requestBody) {
      let postBody = requestBody;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryPutTag");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling registryPutTag");
      }

      let pathParams = {
        'registryId': registryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/registry/{registryId}/tag', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} registryId ID of registry
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    registryPutTag(registryId, requestBody) {
      return this.registryPutTagWithHttpInfo(registryId, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get
     * Returns a single registry
     * @param {String} registryId ID of registry
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Registry} and HTTP response
     */
    registryShowWithHttpInfo(registryId) {
      let postBody = null;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryShow");
      }

      let pathParams = {
        'registryId': registryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Registry;
      return this.apiClient.callApi(
        '/registry/{registryId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get
     * Returns a single registry
     * @param {String} registryId ID of registry
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Registry}
     */
    registryShow(registryId) {
      return this.registryShowWithHttpInfo(registryId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update
     * Returns modified registry
     * @param {String} registryId ID of registry
     * @param {module:model/RegistryUpdate} registryUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Registry} and HTTP response
     */
    registryUpdateWithHttpInfo(registryId, registryUpdate) {
      let postBody = registryUpdate;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryUpdate");
      }
      // verify the required parameter 'registryUpdate' is set
      if (registryUpdate === undefined || registryUpdate === null) {
        throw new Error("Missing the required parameter 'registryUpdate' when calling registryUpdate");
      }

      let pathParams = {
        'registryId': registryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Registry;
      return this.apiClient.callApi(
        '/registry/{registryId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update
     * Returns modified registry
     * @param {String} registryId ID of registry
     * @param {module:model/RegistryUpdate} registryUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Registry}
     */
    registryUpdate(registryId, registryUpdate) {
      return this.registryUpdateWithHttpInfo(registryId, registryUpdate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
