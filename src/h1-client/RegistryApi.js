/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Credential', 'model/Event', 'model/InlineResponse400', 'model/Registry', 'model/RegistryActionTransfer', 'model/RegistryActionUpdateDomain', 'model/RegistryCreate', 'model/RegistryPatchCredentialId', 'model/RegistryPatchCredentialpasswordId', 'model/RegistryPostAccessrights', 'model/RegistryPostCredential', 'model/RegistryPostCredentialpassword', 'model/RegistryServices', 'model/RegistryUpdate'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Credential'), require('../model/Event'), require('../model/InlineResponse400'), require('../model/Registry'), require('../model/RegistryActionTransfer'), require('../model/RegistryActionUpdateDomain'), require('../model/RegistryCreate'), require('../model/RegistryPatchCredentialId'), require('../model/RegistryPatchCredentialpasswordId'), require('../model/RegistryPostAccessrights'), require('../model/RegistryPostCredential'), require('../model/RegistryPostCredentialpassword'), require('../model/RegistryServices'), require('../model/RegistryUpdate'));
  } else {
    // Browser globals (root is window)
    if (!root.HyperoneClient) {
      root.HyperoneClient = {};
    }
    root.HyperoneClient.RegistryApi = factory(root.HyperoneClient.ApiClient, root.HyperoneClient.Credential, root.HyperoneClient.Event, root.HyperoneClient.InlineResponse400, root.HyperoneClient.Registry, root.HyperoneClient.RegistryActionTransfer, root.HyperoneClient.RegistryActionUpdateDomain, root.HyperoneClient.RegistryCreate, root.HyperoneClient.RegistryPatchCredentialId, root.HyperoneClient.RegistryPatchCredentialpasswordId, root.HyperoneClient.RegistryPostAccessrights, root.HyperoneClient.RegistryPostCredential, root.HyperoneClient.RegistryPostCredentialpassword, root.HyperoneClient.RegistryServices, root.HyperoneClient.RegistryUpdate);
  }
}(this, function(ApiClient, Credential, Event, InlineResponse400, Registry, RegistryActionTransfer, RegistryActionUpdateDomain, RegistryCreate, RegistryPatchCredentialId, RegistryPatchCredentialpasswordId, RegistryPostAccessrights, RegistryPostCredential, RegistryPostCredentialpassword, RegistryServices, RegistryUpdate) {
  'use strict';

  /**
   * Registry service.
   * @module h1-client/RegistryApi
   * @version 0.0.3
   */

  /**
   * Constructs a new RegistryApi. 
   * @alias module:h1-client/RegistryApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * /actions/start
     * Action start
     * @param {String} registryId ID of registry
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Registry} and HTTP response
     */
    this.registryActionStartWithHttpInfo = function(registryId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryActionStart");
      }

      var pathParams = {
        'registryId': registryId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'x-idempotency-key': opts['xIdempotencyKey']
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Registry;
      return this.apiClient.callApi(
        '/registry/{registryId}/actions/start', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /actions/start
     * Action start
     * @param {String} registryId ID of registry
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Registry}
     */
    this.registryActionStart = function(registryId, opts) {
      return this.registryActionStartWithHttpInfo(registryId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/stop
     * Action stop
     * @param {String} registryId ID of registry
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Registry} and HTTP response
     */
    this.registryActionStopWithHttpInfo = function(registryId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryActionStop");
      }

      var pathParams = {
        'registryId': registryId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'x-idempotency-key': opts['xIdempotencyKey']
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Registry;
      return this.apiClient.callApi(
        '/registry/{registryId}/actions/stop', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /actions/stop
     * Action stop
     * @param {String} registryId ID of registry
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Registry}
     */
    this.registryActionStop = function(registryId, opts) {
      return this.registryActionStopWithHttpInfo(registryId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/transfer
     * Action transfer
     * @param {String} registryId ID of registry
     * @param {module:model/RegistryActionTransfer} registryActionTransfer 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Registry} and HTTP response
     */
    this.registryActionTransferWithHttpInfo = function(registryId, registryActionTransfer, opts) {
      opts = opts || {};
      var postBody = registryActionTransfer;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryActionTransfer");
      }
      // verify the required parameter 'registryActionTransfer' is set
      if (registryActionTransfer === undefined || registryActionTransfer === null) {
        throw new Error("Missing the required parameter 'registryActionTransfer' when calling registryActionTransfer");
      }

      var pathParams = {
        'registryId': registryId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'x-idempotency-key': opts['xIdempotencyKey']
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Registry;
      return this.apiClient.callApi(
        '/registry/{registryId}/actions/transfer', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /actions/transfer
     * Action transfer
     * @param {String} registryId ID of registry
     * @param {module:model/RegistryActionTransfer} registryActionTransfer 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Registry}
     */
    this.registryActionTransfer = function(registryId, registryActionTransfer, opts) {
      return this.registryActionTransferWithHttpInfo(registryId, registryActionTransfer, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/update_domain
     * Action update_domain
     * @param {String} registryId ID of registry
     * @param {module:model/RegistryActionUpdateDomain} registryActionUpdateDomain 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Registry} and HTTP response
     */
    this.registryActionUpdateDomainWithHttpInfo = function(registryId, registryActionUpdateDomain, opts) {
      opts = opts || {};
      var postBody = registryActionUpdateDomain;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryActionUpdateDomain");
      }
      // verify the required parameter 'registryActionUpdateDomain' is set
      if (registryActionUpdateDomain === undefined || registryActionUpdateDomain === null) {
        throw new Error("Missing the required parameter 'registryActionUpdateDomain' when calling registryActionUpdateDomain");
      }

      var pathParams = {
        'registryId': registryId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'x-idempotency-key': opts['xIdempotencyKey']
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Registry;
      return this.apiClient.callApi(
        '/registry/{registryId}/actions/update_domain', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /actions/update_domain
     * Action update_domain
     * @param {String} registryId ID of registry
     * @param {module:model/RegistryActionUpdateDomain} registryActionUpdateDomain 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Registry}
     */
    this.registryActionUpdateDomain = function(registryId, registryActionUpdateDomain, opts) {
      return this.registryActionUpdateDomainWithHttpInfo(registryId, registryActionUpdateDomain, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create
     * Create registry
     * @param {module:model/RegistryCreate} registryCreate 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Registry} and HTTP response
     */
    this.registryCreateWithHttpInfo = function(registryCreate, opts) {
      opts = opts || {};
      var postBody = registryCreate;
      // verify the required parameter 'registryCreate' is set
      if (registryCreate === undefined || registryCreate === null) {
        throw new Error("Missing the required parameter 'registryCreate' when calling registryCreate");
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'x-idempotency-key': opts['xIdempotencyKey']
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Registry;
      return this.apiClient.callApi(
        '/registry', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create
     * Create registry
     * @param {module:model/RegistryCreate} registryCreate 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Registry}
     */
    this.registryCreate = function(registryCreate, opts) {
      return this.registryCreateWithHttpInfo(registryCreate, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete
     * @param {String} registryId ID of registry
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.registryDeleteWithHttpInfo = function(registryId) {
      var postBody = null;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryDelete");
      }

      var pathParams = {
        'registryId': registryId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;
      return this.apiClient.callApi(
        '/registry/{registryId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete
     * @param {String} registryId ID of registry
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.registryDelete = function(registryId) {
      return this.registryDeleteWithHttpInfo(registryId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights/:identity
     * @param {String} registryId ID of registry
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Registry} and HTTP response
     */
    this.registryDeleteAccessrightsIdentityWithHttpInfo = function(registryId, identity) {
      var postBody = null;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryDeleteAccessrightsIdentity");
      }
      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling registryDeleteAccessrightsIdentity");
      }

      var pathParams = {
        'registryId': registryId,
        'identity': identity
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Registry;
      return this.apiClient.callApi(
        '/registry/{registryId}/accessrights/{identity}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights/:identity
     * @param {String} registryId ID of registry
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Registry}
     */
    this.registryDeleteAccessrightsIdentity = function(registryId, identity) {
      return this.registryDeleteAccessrightsIdentityWithHttpInfo(registryId, identity)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/:id
     * @param {String} registryId ID of registry
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Registry} and HTTP response
     */
    this.registryDeleteCredentialIdWithHttpInfo = function(registryId, id) {
      var postBody = null;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryDeleteCredentialId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling registryDeleteCredentialId");
      }

      var pathParams = {
        'registryId': registryId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Registry;
      return this.apiClient.callApi(
        '/registry/{registryId}/credential/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/:id
     * @param {String} registryId ID of registry
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Registry}
     */
    this.registryDeleteCredentialId = function(registryId, id) {
      return this.registryDeleteCredentialIdWithHttpInfo(registryId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password/:id
     * @param {String} registryId ID of registry
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Registry} and HTTP response
     */
    this.registryDeleteCredentialpasswordIdWithHttpInfo = function(registryId, id) {
      var postBody = null;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryDeleteCredentialpasswordId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling registryDeleteCredentialpasswordId");
      }

      var pathParams = {
        'registryId': registryId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Registry;
      return this.apiClient.callApi(
        '/registry/{registryId}/credential/password/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/password/:id
     * @param {String} registryId ID of registry
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Registry}
     */
    this.registryDeleteCredentialpasswordId = function(registryId, id) {
      return this.registryDeleteCredentialpasswordIdWithHttpInfo(registryId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /repository/:repositoryId/tag/:tagId
     * @param {String} registryId ID of registry
     * @param {String} repositoryId repositoryId
     * @param {String} tagId tagId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.registryDeleteRepositoryRepositoryIdtagTagIdWithHttpInfo = function(registryId, repositoryId, tagId) {
      var postBody = null;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryDeleteRepositoryRepositoryIdtagTagId");
      }
      // verify the required parameter 'repositoryId' is set
      if (repositoryId === undefined || repositoryId === null) {
        throw new Error("Missing the required parameter 'repositoryId' when calling registryDeleteRepositoryRepositoryIdtagTagId");
      }
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling registryDeleteRepositoryRepositoryIdtagTagId");
      }

      var pathParams = {
        'registryId': registryId,
        'repositoryId': repositoryId,
        'tagId': tagId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;
      return this.apiClient.callApi(
        '/registry/{registryId}/repository/{repositoryId}/tag/{tagId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /repository/:repositoryId/tag/:tagId
     * @param {String} registryId ID of registry
     * @param {String} repositoryId repositoryId
     * @param {String} tagId tagId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.registryDeleteRepositoryRepositoryIdtagTagId = function(registryId, repositoryId, tagId) {
      return this.registryDeleteRepositoryRepositoryIdtagTagIdWithHttpInfo(registryId, repositoryId, tagId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag/:key
     * @param {String} registryId ID of registry
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    this.registryDeleteTagKeyWithHttpInfo = function(registryId, key) {
      var postBody = null;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryDeleteTagKey");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling registryDeleteTagKey");
      }

      var pathParams = {
        'registryId': registryId,
        'key': key
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/registry/{registryId}/tag/{key}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag/:key
     * @param {String} registryId ID of registry
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    this.registryDeleteTagKey = function(registryId, key) {
      return this.registryDeleteTagKeyWithHttpInfo(registryId, key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/:id
     * @param {String} registryId ID of registry
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    this.registryGetCredentialIdWithHttpInfo = function(registryId, id) {
      var postBody = null;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryGetCredentialId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling registryGetCredentialId");
      }

      var pathParams = {
        'registryId': registryId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Credential;
      return this.apiClient.callApi(
        '/registry/{registryId}/credential/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/:id
     * @param {String} registryId ID of registry
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    this.registryGetCredentialId = function(registryId, id) {
      return this.registryGetCredentialIdWithHttpInfo(registryId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password/:id
     * @param {String} registryId ID of registry
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    this.registryGetCredentialpasswordIdWithHttpInfo = function(registryId, id) {
      var postBody = null;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryGetCredentialpasswordId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling registryGetCredentialpasswordId");
      }

      var pathParams = {
        'registryId': registryId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Credential;
      return this.apiClient.callApi(
        '/registry/{registryId}/credential/password/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/password/:id
     * @param {String} registryId ID of registry
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    this.registryGetCredentialpasswordId = function(registryId, id) {
      return this.registryGetCredentialpasswordIdWithHttpInfo(registryId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /repository/:repositoryId
     * @param {String} registryId ID of registry
     * @param {String} repositoryId repositoryId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.registryGetRepositoryRepositoryIdWithHttpInfo = function(registryId, repositoryId) {
      var postBody = null;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryGetRepositoryRepositoryId");
      }
      // verify the required parameter 'repositoryId' is set
      if (repositoryId === undefined || repositoryId === null) {
        throw new Error("Missing the required parameter 'repositoryId' when calling registryGetRepositoryRepositoryId");
      }

      var pathParams = {
        'registryId': registryId,
        'repositoryId': repositoryId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;
      return this.apiClient.callApi(
        '/registry/{registryId}/repository/{repositoryId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /repository/:repositoryId
     * @param {String} registryId ID of registry
     * @param {String} repositoryId repositoryId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.registryGetRepositoryRepositoryId = function(registryId, repositoryId) {
      return this.registryGetRepositoryRepositoryIdWithHttpInfo(registryId, repositoryId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /repository/:repositoryId/tag/:tagId
     * @param {String} registryId ID of registry
     * @param {String} repositoryId repositoryId
     * @param {String} tagId tagId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.registryGetRepositoryRepositoryIdtagTagIdWithHttpInfo = function(registryId, repositoryId, tagId) {
      var postBody = null;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryGetRepositoryRepositoryIdtagTagId");
      }
      // verify the required parameter 'repositoryId' is set
      if (repositoryId === undefined || repositoryId === null) {
        throw new Error("Missing the required parameter 'repositoryId' when calling registryGetRepositoryRepositoryIdtagTagId");
      }
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling registryGetRepositoryRepositoryIdtagTagId");
      }

      var pathParams = {
        'registryId': registryId,
        'repositoryId': repositoryId,
        'tagId': tagId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;
      return this.apiClient.callApi(
        '/registry/{registryId}/repository/{repositoryId}/tag/{tagId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /repository/:repositoryId/tag/:tagId
     * @param {String} registryId ID of registry
     * @param {String} repositoryId repositoryId
     * @param {String} tagId tagId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.registryGetRepositoryRepositoryIdtagTagId = function(registryId, repositoryId, tagId) {
      return this.registryGetRepositoryRepositoryIdtagTagIdWithHttpInfo(registryId, repositoryId, tagId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services/:serviceId
     * @param {String} registryId ID of registry
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RegistryServices} and HTTP response
     */
    this.registryGetServicesServiceIdWithHttpInfo = function(registryId, serviceId) {
      var postBody = null;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryGetServicesServiceId");
      }
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling registryGetServicesServiceId");
      }

      var pathParams = {
        'registryId': registryId,
        'serviceId': serviceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = RegistryServices;
      return this.apiClient.callApi(
        '/registry/{registryId}/services/{serviceId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /services/:serviceId
     * @param {String} registryId ID of registry
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RegistryServices}
     */
    this.registryGetServicesServiceId = function(registryId, serviceId) {
      return this.registryGetServicesServiceIdWithHttpInfo(registryId, serviceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} registryId ID of registry
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    this.registryGetTagWithHttpInfo = function(registryId) {
      var postBody = null;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryGetTag");
      }

      var pathParams = {
        'registryId': registryId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/registry/{registryId}/tag', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} registryId ID of registry
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    this.registryGetTag = function(registryId) {
      return this.registryGetTagWithHttpInfo(registryId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List
     * List registry
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @param {Object.<String, {String: String}>} opts.tag Filter by tag
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Registry>} and HTTP response
     */
    this.registryListWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
        'name': opts['name'],
        'tag': opts['tag'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Registry];
      return this.apiClient.callApi(
        '/registry', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List
     * List registry
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @param {Object.<String, {String: String}>} opts.tag Filter by tag
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Registry>}
     */
    this.registryList = function(opts) {
      return this.registryListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} registryId ID of registry
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    this.registryListAccessrightsWithHttpInfo = function(registryId) {
      var postBody = null;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryListAccessrights");
      }

      var pathParams = {
        'registryId': registryId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['String'];
      return this.apiClient.callApi(
        '/registry/{registryId}/accessrights', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights
     * @param {String} registryId ID of registry
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    this.registryListAccessrights = function(registryId) {
      return this.registryListAccessrightsWithHttpInfo(registryId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential
     * @param {String} registryId ID of registry
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Credential>} and HTTP response
     */
    this.registryListCredentialWithHttpInfo = function(registryId) {
      var postBody = null;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryListCredential");
      }

      var pathParams = {
        'registryId': registryId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Credential];
      return this.apiClient.callApi(
        '/registry/{registryId}/credential', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential
     * @param {String} registryId ID of registry
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Credential>}
     */
    this.registryListCredential = function(registryId) {
      return this.registryListCredentialWithHttpInfo(registryId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password
     * @param {String} registryId ID of registry
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Credential>} and HTTP response
     */
    this.registryListCredentialpasswordWithHttpInfo = function(registryId) {
      var postBody = null;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryListCredentialpassword");
      }

      var pathParams = {
        'registryId': registryId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Credential];
      return this.apiClient.callApi(
        '/registry/{registryId}/credential/password', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/password
     * @param {String} registryId ID of registry
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Credential>}
     */
    this.registryListCredentialpassword = function(registryId) {
      return this.registryListCredentialpasswordWithHttpInfo(registryId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /queue
     * @param {String} registryId ID of registry
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit $limit (default to 100)
     * @param {Number} opts.skip $skip
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Event>} and HTTP response
     */
    this.registryListQueueWithHttpInfo = function(registryId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryListQueue");
      }

      var pathParams = {
        'registryId': registryId
      };
      var queryParams = {
        '$limit': opts['limit'],
        '$skip': opts['skip'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Event];
      return this.apiClient.callApi(
        '/registry/{registryId}/queue', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /queue
     * @param {String} registryId ID of registry
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit $limit (default to 100)
     * @param {Number} opts.skip $skip
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Event>}
     */
    this.registryListQueue = function(registryId, opts) {
      return this.registryListQueueWithHttpInfo(registryId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /repository
     * @param {String} registryId ID of registry
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.registryListRepositoryWithHttpInfo = function(registryId) {
      var postBody = null;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryListRepository");
      }

      var pathParams = {
        'registryId': registryId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;
      return this.apiClient.callApi(
        '/registry/{registryId}/repository', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /repository
     * @param {String} registryId ID of registry
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.registryListRepository = function(registryId) {
      return this.registryListRepositoryWithHttpInfo(registryId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /repository/:repositoryId/tag
     * @param {String} registryId ID of registry
     * @param {String} repositoryId repositoryId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.registryListRepositoryRepositoryIdtagWithHttpInfo = function(registryId, repositoryId) {
      var postBody = null;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryListRepositoryRepositoryIdtag");
      }
      // verify the required parameter 'repositoryId' is set
      if (repositoryId === undefined || repositoryId === null) {
        throw new Error("Missing the required parameter 'repositoryId' when calling registryListRepositoryRepositoryIdtag");
      }

      var pathParams = {
        'registryId': registryId,
        'repositoryId': repositoryId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;
      return this.apiClient.callApi(
        '/registry/{registryId}/repository/{repositoryId}/tag', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /repository/:repositoryId/tag
     * @param {String} registryId ID of registry
     * @param {String} repositoryId repositoryId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.registryListRepositoryRepositoryIdtag = function(registryId, repositoryId) {
      return this.registryListRepositoryRepositoryIdtagWithHttpInfo(registryId, repositoryId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services
     * @param {String} registryId ID of registry
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/RegistryServices>} and HTTP response
     */
    this.registryListServicesWithHttpInfo = function(registryId) {
      var postBody = null;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryListServices");
      }

      var pathParams = {
        'registryId': registryId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [RegistryServices];
      return this.apiClient.callApi(
        '/registry/{registryId}/services', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /services
     * @param {String} registryId ID of registry
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/RegistryServices>}
     */
    this.registryListServices = function(registryId) {
      return this.registryListServicesWithHttpInfo(registryId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/:id
     * @param {String} registryId ID of registry
     * @param {String} id id
     * @param {module:model/RegistryPatchCredentialId} registryPatchCredentialId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    this.registryPatchCredentialIdWithHttpInfo = function(registryId, id, registryPatchCredentialId) {
      var postBody = registryPatchCredentialId;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryPatchCredentialId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling registryPatchCredentialId");
      }
      // verify the required parameter 'registryPatchCredentialId' is set
      if (registryPatchCredentialId === undefined || registryPatchCredentialId === null) {
        throw new Error("Missing the required parameter 'registryPatchCredentialId' when calling registryPatchCredentialId");
      }

      var pathParams = {
        'registryId': registryId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Credential;
      return this.apiClient.callApi(
        '/registry/{registryId}/credential/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/:id
     * @param {String} registryId ID of registry
     * @param {String} id id
     * @param {module:model/RegistryPatchCredentialId} registryPatchCredentialId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    this.registryPatchCredentialId = function(registryId, id, registryPatchCredentialId) {
      return this.registryPatchCredentialIdWithHttpInfo(registryId, id, registryPatchCredentialId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password/:id
     * @param {String} registryId ID of registry
     * @param {String} id id
     * @param {module:model/RegistryPatchCredentialpasswordId} registryPatchCredentialpasswordId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    this.registryPatchCredentialpasswordIdWithHttpInfo = function(registryId, id, registryPatchCredentialpasswordId) {
      var postBody = registryPatchCredentialpasswordId;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryPatchCredentialpasswordId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling registryPatchCredentialpasswordId");
      }
      // verify the required parameter 'registryPatchCredentialpasswordId' is set
      if (registryPatchCredentialpasswordId === undefined || registryPatchCredentialpasswordId === null) {
        throw new Error("Missing the required parameter 'registryPatchCredentialpasswordId' when calling registryPatchCredentialpasswordId");
      }

      var pathParams = {
        'registryId': registryId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Credential;
      return this.apiClient.callApi(
        '/registry/{registryId}/credential/password/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/password/:id
     * @param {String} registryId ID of registry
     * @param {String} id id
     * @param {module:model/RegistryPatchCredentialpasswordId} registryPatchCredentialpasswordId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    this.registryPatchCredentialpasswordId = function(registryId, id, registryPatchCredentialpasswordId) {
      return this.registryPatchCredentialpasswordIdWithHttpInfo(registryId, id, registryPatchCredentialpasswordId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} registryId ID of registry
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    this.registryPatchTagWithHttpInfo = function(registryId, requestBody) {
      var postBody = requestBody;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryPatchTag");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling registryPatchTag");
      }

      var pathParams = {
        'registryId': registryId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/registry/{registryId}/tag', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} registryId ID of registry
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    this.registryPatchTag = function(registryId, requestBody) {
      return this.registryPatchTagWithHttpInfo(registryId, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} registryId ID of registry
     * @param {module:model/RegistryPostAccessrights} registryPostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Registry} and HTTP response
     */
    this.registryPostAccessrightsWithHttpInfo = function(registryId, registryPostAccessrights) {
      var postBody = registryPostAccessrights;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryPostAccessrights");
      }
      // verify the required parameter 'registryPostAccessrights' is set
      if (registryPostAccessrights === undefined || registryPostAccessrights === null) {
        throw new Error("Missing the required parameter 'registryPostAccessrights' when calling registryPostAccessrights");
      }

      var pathParams = {
        'registryId': registryId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Registry;
      return this.apiClient.callApi(
        '/registry/{registryId}/accessrights', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights
     * @param {String} registryId ID of registry
     * @param {module:model/RegistryPostAccessrights} registryPostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Registry}
     */
    this.registryPostAccessrights = function(registryId, registryPostAccessrights) {
      return this.registryPostAccessrightsWithHttpInfo(registryId, registryPostAccessrights)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential
     * @param {String} registryId ID of registry
     * @param {module:model/RegistryPostCredential} registryPostCredential 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    this.registryPostCredentialWithHttpInfo = function(registryId, registryPostCredential) {
      var postBody = registryPostCredential;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryPostCredential");
      }
      // verify the required parameter 'registryPostCredential' is set
      if (registryPostCredential === undefined || registryPostCredential === null) {
        throw new Error("Missing the required parameter 'registryPostCredential' when calling registryPostCredential");
      }

      var pathParams = {
        'registryId': registryId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Credential;
      return this.apiClient.callApi(
        '/registry/{registryId}/credential', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential
     * @param {String} registryId ID of registry
     * @param {module:model/RegistryPostCredential} registryPostCredential 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    this.registryPostCredential = function(registryId, registryPostCredential) {
      return this.registryPostCredentialWithHttpInfo(registryId, registryPostCredential)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password
     * @param {String} registryId ID of registry
     * @param {module:model/RegistryPostCredentialpassword} registryPostCredentialpassword 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    this.registryPostCredentialpasswordWithHttpInfo = function(registryId, registryPostCredentialpassword) {
      var postBody = registryPostCredentialpassword;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryPostCredentialpassword");
      }
      // verify the required parameter 'registryPostCredentialpassword' is set
      if (registryPostCredentialpassword === undefined || registryPostCredentialpassword === null) {
        throw new Error("Missing the required parameter 'registryPostCredentialpassword' when calling registryPostCredentialpassword");
      }

      var pathParams = {
        'registryId': registryId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Credential;
      return this.apiClient.callApi(
        '/registry/{registryId}/credential/password', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/password
     * @param {String} registryId ID of registry
     * @param {module:model/RegistryPostCredentialpassword} registryPostCredentialpassword 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    this.registryPostCredentialpassword = function(registryId, registryPostCredentialpassword) {
      return this.registryPostCredentialpasswordWithHttpInfo(registryId, registryPostCredentialpassword)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} registryId ID of registry
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    this.registryPutTagWithHttpInfo = function(registryId, requestBody) {
      var postBody = requestBody;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryPutTag");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling registryPutTag");
      }

      var pathParams = {
        'registryId': registryId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/registry/{registryId}/tag', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} registryId ID of registry
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    this.registryPutTag = function(registryId, requestBody) {
      return this.registryPutTagWithHttpInfo(registryId, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get
     * Returns a single registry
     * @param {String} registryId ID of registry
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Registry} and HTTP response
     */
    this.registryShowWithHttpInfo = function(registryId) {
      var postBody = null;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryShow");
      }

      var pathParams = {
        'registryId': registryId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Registry;
      return this.apiClient.callApi(
        '/registry/{registryId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get
     * Returns a single registry
     * @param {String} registryId ID of registry
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Registry}
     */
    this.registryShow = function(registryId) {
      return this.registryShowWithHttpInfo(registryId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update
     * Returns modified registry
     * @param {String} registryId ID of registry
     * @param {module:model/RegistryUpdate} registryUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Registry} and HTTP response
     */
    this.registryUpdateWithHttpInfo = function(registryId, registryUpdate) {
      var postBody = registryUpdate;
      // verify the required parameter 'registryId' is set
      if (registryId === undefined || registryId === null) {
        throw new Error("Missing the required parameter 'registryId' when calling registryUpdate");
      }
      // verify the required parameter 'registryUpdate' is set
      if (registryUpdate === undefined || registryUpdate === null) {
        throw new Error("Missing the required parameter 'registryUpdate' when calling registryUpdate");
      }

      var pathParams = {
        'registryId': registryId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Registry;
      return this.apiClient.callApi(
        '/registry/{registryId}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update
     * Returns modified registry
     * @param {String} registryId ID of registry
     * @param {module:model/RegistryUpdate} registryUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Registry}
     */
    this.registryUpdate = function(registryId, registryUpdate) {
      return this.registryUpdateWithHttpInfo(registryId, registryUpdate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
