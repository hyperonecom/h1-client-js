/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.2.3-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Credential', 'model/Event', 'model/InlineResponse2003', 'model/InlineResponse400', 'model/Website', 'model/WebsiteActionTransfer', 'model/WebsiteActionUpdateDomain', 'model/WebsiteCreate', 'model/WebsitePatchCredentialId', 'model/WebsitePatchCredentialcertificateId', 'model/WebsitePatchCredentialpasswordId', 'model/WebsitePostAccessrights', 'model/WebsitePostCredential', 'model/WebsitePostCredentialcertificate', 'model/WebsitePostCredentialpassword', 'model/WebsitePostSnapshot', 'model/WebsiteServices', 'model/WebsiteUpdate'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Credential'), require('../model/Event'), require('../model/InlineResponse2003'), require('../model/InlineResponse400'), require('../model/Website'), require('../model/WebsiteActionTransfer'), require('../model/WebsiteActionUpdateDomain'), require('../model/WebsiteCreate'), require('../model/WebsitePatchCredentialId'), require('../model/WebsitePatchCredentialcertificateId'), require('../model/WebsitePatchCredentialpasswordId'), require('../model/WebsitePostAccessrights'), require('../model/WebsitePostCredential'), require('../model/WebsitePostCredentialcertificate'), require('../model/WebsitePostCredentialpassword'), require('../model/WebsitePostSnapshot'), require('../model/WebsiteServices'), require('../model/WebsiteUpdate'));
  } else {
    // Browser globals (root is window)
    if (!root.HyperoneClient) {
      root.HyperoneClient = {};
    }
    root.HyperoneClient.WebsiteApi = factory(root.HyperoneClient.ApiClient, root.HyperoneClient.Credential, root.HyperoneClient.Event, root.HyperoneClient.InlineResponse2003, root.HyperoneClient.InlineResponse400, root.HyperoneClient.Website, root.HyperoneClient.WebsiteActionTransfer, root.HyperoneClient.WebsiteActionUpdateDomain, root.HyperoneClient.WebsiteCreate, root.HyperoneClient.WebsitePatchCredentialId, root.HyperoneClient.WebsitePatchCredentialcertificateId, root.HyperoneClient.WebsitePatchCredentialpasswordId, root.HyperoneClient.WebsitePostAccessrights, root.HyperoneClient.WebsitePostCredential, root.HyperoneClient.WebsitePostCredentialcertificate, root.HyperoneClient.WebsitePostCredentialpassword, root.HyperoneClient.WebsitePostSnapshot, root.HyperoneClient.WebsiteServices, root.HyperoneClient.WebsiteUpdate);
  }
}(this, function(ApiClient, Credential, Event, InlineResponse2003, InlineResponse400, Website, WebsiteActionTransfer, WebsiteActionUpdateDomain, WebsiteCreate, WebsitePatchCredentialId, WebsitePatchCredentialcertificateId, WebsitePatchCredentialpasswordId, WebsitePostAccessrights, WebsitePostCredential, WebsitePostCredentialcertificate, WebsitePostCredentialpassword, WebsitePostSnapshot, WebsiteServices, WebsiteUpdate) {
  'use strict';

  /**
   * Website service.
   * @module h1-client/WebsiteApi
   * @version 0.0.3
   */

  /**
   * Constructs a new WebsiteApi. 
   * @alias module:h1-client/WebsiteApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * /actions/restart
     * Action restart
     * @param {String} websiteId ID of website
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Website} and HTTP response
     */
    this.websiteActionRestartWithHttpInfo = function(websiteId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websiteActionRestart");
      }

      var pathParams = {
        'websiteId': websiteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'x-idempotency-key': opts['xIdempotencyKey']
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Website;
      return this.apiClient.callApi(
        '/website/{websiteId}/actions/restart', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /actions/restart
     * Action restart
     * @param {String} websiteId ID of website
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Website}
     */
    this.websiteActionRestart = function(websiteId, opts) {
      return this.websiteActionRestartWithHttpInfo(websiteId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/start
     * Action start
     * @param {String} websiteId ID of website
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Website} and HTTP response
     */
    this.websiteActionStartWithHttpInfo = function(websiteId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websiteActionStart");
      }

      var pathParams = {
        'websiteId': websiteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'x-idempotency-key': opts['xIdempotencyKey']
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Website;
      return this.apiClient.callApi(
        '/website/{websiteId}/actions/start', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /actions/start
     * Action start
     * @param {String} websiteId ID of website
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Website}
     */
    this.websiteActionStart = function(websiteId, opts) {
      return this.websiteActionStartWithHttpInfo(websiteId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/stop
     * Action stop
     * @param {String} websiteId ID of website
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Website} and HTTP response
     */
    this.websiteActionStopWithHttpInfo = function(websiteId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websiteActionStop");
      }

      var pathParams = {
        'websiteId': websiteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'x-idempotency-key': opts['xIdempotencyKey']
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Website;
      return this.apiClient.callApi(
        '/website/{websiteId}/actions/stop', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /actions/stop
     * Action stop
     * @param {String} websiteId ID of website
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Website}
     */
    this.websiteActionStop = function(websiteId, opts) {
      return this.websiteActionStopWithHttpInfo(websiteId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/transfer
     * Action transfer
     * @param {String} websiteId ID of website
     * @param {module:model/WebsiteActionTransfer} websiteActionTransfer 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Website} and HTTP response
     */
    this.websiteActionTransferWithHttpInfo = function(websiteId, websiteActionTransfer, opts) {
      opts = opts || {};
      var postBody = websiteActionTransfer;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websiteActionTransfer");
      }
      // verify the required parameter 'websiteActionTransfer' is set
      if (websiteActionTransfer === undefined || websiteActionTransfer === null) {
        throw new Error("Missing the required parameter 'websiteActionTransfer' when calling websiteActionTransfer");
      }

      var pathParams = {
        'websiteId': websiteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'x-idempotency-key': opts['xIdempotencyKey']
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Website;
      return this.apiClient.callApi(
        '/website/{websiteId}/actions/transfer', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /actions/transfer
     * Action transfer
     * @param {String} websiteId ID of website
     * @param {module:model/WebsiteActionTransfer} websiteActionTransfer 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Website}
     */
    this.websiteActionTransfer = function(websiteId, websiteActionTransfer, opts) {
      return this.websiteActionTransferWithHttpInfo(websiteId, websiteActionTransfer, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/update_domain
     * Action update_domain
     * @param {String} websiteId ID of website
     * @param {module:model/WebsiteActionUpdateDomain} websiteActionUpdateDomain 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Website} and HTTP response
     */
    this.websiteActionUpdateDomainWithHttpInfo = function(websiteId, websiteActionUpdateDomain, opts) {
      opts = opts || {};
      var postBody = websiteActionUpdateDomain;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websiteActionUpdateDomain");
      }
      // verify the required parameter 'websiteActionUpdateDomain' is set
      if (websiteActionUpdateDomain === undefined || websiteActionUpdateDomain === null) {
        throw new Error("Missing the required parameter 'websiteActionUpdateDomain' when calling websiteActionUpdateDomain");
      }

      var pathParams = {
        'websiteId': websiteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'x-idempotency-key': opts['xIdempotencyKey']
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Website;
      return this.apiClient.callApi(
        '/website/{websiteId}/actions/update_domain', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /actions/update_domain
     * Action update_domain
     * @param {String} websiteId ID of website
     * @param {module:model/WebsiteActionUpdateDomain} websiteActionUpdateDomain 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Website}
     */
    this.websiteActionUpdateDomain = function(websiteId, websiteActionUpdateDomain, opts) {
      return this.websiteActionUpdateDomainWithHttpInfo(websiteId, websiteActionUpdateDomain, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create
     * Create website
     * @param {module:model/WebsiteCreate} websiteCreate 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Website} and HTTP response
     */
    this.websiteCreateWithHttpInfo = function(websiteCreate, opts) {
      opts = opts || {};
      var postBody = websiteCreate;
      // verify the required parameter 'websiteCreate' is set
      if (websiteCreate === undefined || websiteCreate === null) {
        throw new Error("Missing the required parameter 'websiteCreate' when calling websiteCreate");
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'x-idempotency-key': opts['xIdempotencyKey']
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Website;
      return this.apiClient.callApi(
        '/website', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create
     * Create website
     * @param {module:model/WebsiteCreate} websiteCreate 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Website}
     */
    this.websiteCreate = function(websiteCreate, opts) {
      return this.websiteCreateWithHttpInfo(websiteCreate, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete
     * @param {String} websiteId ID of website
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.websiteDeleteWithHttpInfo = function(websiteId) {
      var postBody = null;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websiteDelete");
      }

      var pathParams = {
        'websiteId': websiteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;
      return this.apiClient.callApi(
        '/website/{websiteId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete
     * @param {String} websiteId ID of website
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.websiteDelete = function(websiteId) {
      return this.websiteDeleteWithHttpInfo(websiteId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights/:identity
     * @param {String} websiteId ID of website
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Website} and HTTP response
     */
    this.websiteDeleteAccessrightsIdentityWithHttpInfo = function(websiteId, identity) {
      var postBody = null;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websiteDeleteAccessrightsIdentity");
      }
      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling websiteDeleteAccessrightsIdentity");
      }

      var pathParams = {
        'websiteId': websiteId,
        'identity': identity
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Website;
      return this.apiClient.callApi(
        '/website/{websiteId}/accessrights/{identity}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights/:identity
     * @param {String} websiteId ID of website
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Website}
     */
    this.websiteDeleteAccessrightsIdentity = function(websiteId, identity) {
      return this.websiteDeleteAccessrightsIdentityWithHttpInfo(websiteId, identity)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/:id
     * @param {String} websiteId ID of website
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Website} and HTTP response
     */
    this.websiteDeleteCredentialIdWithHttpInfo = function(websiteId, id) {
      var postBody = null;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websiteDeleteCredentialId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling websiteDeleteCredentialId");
      }

      var pathParams = {
        'websiteId': websiteId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Website;
      return this.apiClient.callApi(
        '/website/{websiteId}/credential/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/:id
     * @param {String} websiteId ID of website
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Website}
     */
    this.websiteDeleteCredentialId = function(websiteId, id) {
      return this.websiteDeleteCredentialIdWithHttpInfo(websiteId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/certificate/:id
     * @param {String} websiteId ID of website
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2003} and HTTP response
     */
    this.websiteDeleteCredentialcertificateIdWithHttpInfo = function(websiteId, id) {
      var postBody = null;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websiteDeleteCredentialcertificateId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling websiteDeleteCredentialcertificateId");
      }

      var pathParams = {
        'websiteId': websiteId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse2003;
      return this.apiClient.callApi(
        '/website/{websiteId}/credential/certificate/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/certificate/:id
     * @param {String} websiteId ID of website
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2003}
     */
    this.websiteDeleteCredentialcertificateId = function(websiteId, id) {
      return this.websiteDeleteCredentialcertificateIdWithHttpInfo(websiteId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password/:id
     * @param {String} websiteId ID of website
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Website} and HTTP response
     */
    this.websiteDeleteCredentialpasswordIdWithHttpInfo = function(websiteId, id) {
      var postBody = null;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websiteDeleteCredentialpasswordId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling websiteDeleteCredentialpasswordId");
      }

      var pathParams = {
        'websiteId': websiteId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Website;
      return this.apiClient.callApi(
        '/website/{websiteId}/credential/password/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/password/:id
     * @param {String} websiteId ID of website
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Website}
     */
    this.websiteDeleteCredentialpasswordId = function(websiteId, id) {
      return this.websiteDeleteCredentialpasswordIdWithHttpInfo(websiteId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /snapshot/:id
     * @param {String} websiteId ID of website
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Website} and HTTP response
     */
    this.websiteDeleteSnapshotIdWithHttpInfo = function(websiteId, id) {
      var postBody = null;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websiteDeleteSnapshotId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling websiteDeleteSnapshotId");
      }

      var pathParams = {
        'websiteId': websiteId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Website;
      return this.apiClient.callApi(
        '/website/{websiteId}/snapshot/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /snapshot/:id
     * @param {String} websiteId ID of website
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Website}
     */
    this.websiteDeleteSnapshotId = function(websiteId, id) {
      return this.websiteDeleteSnapshotIdWithHttpInfo(websiteId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag/:key
     * @param {String} websiteId ID of website
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    this.websiteDeleteTagKeyWithHttpInfo = function(websiteId, key) {
      var postBody = null;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websiteDeleteTagKey");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling websiteDeleteTagKey");
      }

      var pathParams = {
        'websiteId': websiteId,
        'key': key
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/website/{websiteId}/tag/{key}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag/:key
     * @param {String} websiteId ID of website
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    this.websiteDeleteTagKey = function(websiteId, key) {
      return this.websiteDeleteTagKeyWithHttpInfo(websiteId, key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/:id
     * @param {String} websiteId ID of website
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    this.websiteGetCredentialIdWithHttpInfo = function(websiteId, id) {
      var postBody = null;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websiteGetCredentialId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling websiteGetCredentialId");
      }

      var pathParams = {
        'websiteId': websiteId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Credential;
      return this.apiClient.callApi(
        '/website/{websiteId}/credential/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/:id
     * @param {String} websiteId ID of website
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    this.websiteGetCredentialId = function(websiteId, id) {
      return this.websiteGetCredentialIdWithHttpInfo(websiteId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/certificate/:id
     * @param {String} websiteId ID of website
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    this.websiteGetCredentialcertificateIdWithHttpInfo = function(websiteId, id) {
      var postBody = null;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websiteGetCredentialcertificateId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling websiteGetCredentialcertificateId");
      }

      var pathParams = {
        'websiteId': websiteId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Credential;
      return this.apiClient.callApi(
        '/website/{websiteId}/credential/certificate/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/certificate/:id
     * @param {String} websiteId ID of website
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    this.websiteGetCredentialcertificateId = function(websiteId, id) {
      return this.websiteGetCredentialcertificateIdWithHttpInfo(websiteId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password/:id
     * @param {String} websiteId ID of website
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    this.websiteGetCredentialpasswordIdWithHttpInfo = function(websiteId, id) {
      var postBody = null;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websiteGetCredentialpasswordId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling websiteGetCredentialpasswordId");
      }

      var pathParams = {
        'websiteId': websiteId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Credential;
      return this.apiClient.callApi(
        '/website/{websiteId}/credential/password/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/password/:id
     * @param {String} websiteId ID of website
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    this.websiteGetCredentialpasswordId = function(websiteId, id) {
      return this.websiteGetCredentialpasswordIdWithHttpInfo(websiteId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services/:serviceId
     * @param {String} websiteId ID of website
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WebsiteServices} and HTTP response
     */
    this.websiteGetServicesServiceIdWithHttpInfo = function(websiteId, serviceId) {
      var postBody = null;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websiteGetServicesServiceId");
      }
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling websiteGetServicesServiceId");
      }

      var pathParams = {
        'websiteId': websiteId,
        'serviceId': serviceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = WebsiteServices;
      return this.apiClient.callApi(
        '/website/{websiteId}/services/{serviceId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /services/:serviceId
     * @param {String} websiteId ID of website
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WebsiteServices}
     */
    this.websiteGetServicesServiceId = function(websiteId, serviceId) {
      return this.websiteGetServicesServiceIdWithHttpInfo(websiteId, serviceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /snapshot/:id
     * @param {String} websiteId ID of website
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.websiteGetSnapshotIdWithHttpInfo = function(websiteId, id) {
      var postBody = null;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websiteGetSnapshotId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling websiteGetSnapshotId");
      }

      var pathParams = {
        'websiteId': websiteId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;
      return this.apiClient.callApi(
        '/website/{websiteId}/snapshot/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /snapshot/:id
     * @param {String} websiteId ID of website
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.websiteGetSnapshotId = function(websiteId, id) {
      return this.websiteGetSnapshotIdWithHttpInfo(websiteId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /snapshot/:id/download
     * @param {String} websiteId ID of website
     * @param {Object} opts Optional parameters
     * @param {String} opts.incremental incremental
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.websiteGetSnapshotIddownloadWithHttpInfo = function(websiteId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websiteGetSnapshotIddownload");
      }

      var pathParams = {
        'websiteId': websiteId
      };
      var queryParams = {
        'incremental': opts['incremental'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;
      return this.apiClient.callApi(
        '/website/{websiteId}/snapshot/:id/download', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /snapshot/:id/download
     * @param {String} websiteId ID of website
     * @param {Object} opts Optional parameters
     * @param {String} opts.incremental incremental
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.websiteGetSnapshotIddownload = function(websiteId, opts) {
      return this.websiteGetSnapshotIddownloadWithHttpInfo(websiteId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} websiteId ID of website
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    this.websiteGetTagWithHttpInfo = function(websiteId) {
      var postBody = null;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websiteGetTag");
      }

      var pathParams = {
        'websiteId': websiteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/website/{websiteId}/tag', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} websiteId ID of website
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    this.websiteGetTag = function(websiteId) {
      return this.websiteGetTagWithHttpInfo(websiteId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List
     * List website
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @param {Object.<String, {String: String}>} opts.tag Filter by tag
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Website>} and HTTP response
     */
    this.websiteListWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
        'name': opts['name'],
        'tag': opts['tag'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Website];
      return this.apiClient.callApi(
        '/website', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List
     * List website
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @param {Object.<String, {String: String}>} opts.tag Filter by tag
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Website>}
     */
    this.websiteList = function(opts) {
      return this.websiteListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} websiteId ID of website
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    this.websiteListAccessrightsWithHttpInfo = function(websiteId) {
      var postBody = null;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websiteListAccessrights");
      }

      var pathParams = {
        'websiteId': websiteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['String'];
      return this.apiClient.callApi(
        '/website/{websiteId}/accessrights', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights
     * @param {String} websiteId ID of website
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    this.websiteListAccessrights = function(websiteId) {
      return this.websiteListAccessrightsWithHttpInfo(websiteId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential
     * @param {String} websiteId ID of website
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Credential>} and HTTP response
     */
    this.websiteListCredentialWithHttpInfo = function(websiteId) {
      var postBody = null;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websiteListCredential");
      }

      var pathParams = {
        'websiteId': websiteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Credential];
      return this.apiClient.callApi(
        '/website/{websiteId}/credential', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential
     * @param {String} websiteId ID of website
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Credential>}
     */
    this.websiteListCredential = function(websiteId) {
      return this.websiteListCredentialWithHttpInfo(websiteId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/certificate
     * @param {String} websiteId ID of website
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Credential>} and HTTP response
     */
    this.websiteListCredentialcertificateWithHttpInfo = function(websiteId) {
      var postBody = null;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websiteListCredentialcertificate");
      }

      var pathParams = {
        'websiteId': websiteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Credential];
      return this.apiClient.callApi(
        '/website/{websiteId}/credential/certificate', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/certificate
     * @param {String} websiteId ID of website
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Credential>}
     */
    this.websiteListCredentialcertificate = function(websiteId) {
      return this.websiteListCredentialcertificateWithHttpInfo(websiteId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password
     * @param {String} websiteId ID of website
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Credential>} and HTTP response
     */
    this.websiteListCredentialpasswordWithHttpInfo = function(websiteId) {
      var postBody = null;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websiteListCredentialpassword");
      }

      var pathParams = {
        'websiteId': websiteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Credential];
      return this.apiClient.callApi(
        '/website/{websiteId}/credential/password', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/password
     * @param {String} websiteId ID of website
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Credential>}
     */
    this.websiteListCredentialpassword = function(websiteId) {
      return this.websiteListCredentialpasswordWithHttpInfo(websiteId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /queue
     * @param {String} websiteId ID of website
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit $limit
     * @param {Number} opts.skip $skip
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Event>} and HTTP response
     */
    this.websiteListQueueWithHttpInfo = function(websiteId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websiteListQueue");
      }

      var pathParams = {
        'websiteId': websiteId
      };
      var queryParams = {
        '$limit': opts['limit'],
        '$skip': opts['skip'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Event];
      return this.apiClient.callApi(
        '/website/{websiteId}/queue', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /queue
     * @param {String} websiteId ID of website
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit $limit
     * @param {Number} opts.skip $skip
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Event>}
     */
    this.websiteListQueue = function(websiteId, opts) {
      return this.websiteListQueueWithHttpInfo(websiteId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services
     * @param {String} websiteId ID of website
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/WebsiteServices>} and HTTP response
     */
    this.websiteListServicesWithHttpInfo = function(websiteId) {
      var postBody = null;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websiteListServices");
      }

      var pathParams = {
        'websiteId': websiteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [WebsiteServices];
      return this.apiClient.callApi(
        '/website/{websiteId}/services', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /services
     * @param {String} websiteId ID of website
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/WebsiteServices>}
     */
    this.websiteListServices = function(websiteId) {
      return this.websiteListServicesWithHttpInfo(websiteId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /snapshot
     * @param {String} websiteId ID of website
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.websiteListSnapshotWithHttpInfo = function(websiteId) {
      var postBody = null;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websiteListSnapshot");
      }

      var pathParams = {
        'websiteId': websiteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;
      return this.apiClient.callApi(
        '/website/{websiteId}/snapshot', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /snapshot
     * @param {String} websiteId ID of website
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.websiteListSnapshot = function(websiteId) {
      return this.websiteListSnapshotWithHttpInfo(websiteId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/:id
     * @param {String} websiteId ID of website
     * @param {String} id id
     * @param {module:model/WebsitePatchCredentialId} websitePatchCredentialId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    this.websitePatchCredentialIdWithHttpInfo = function(websiteId, id, websitePatchCredentialId) {
      var postBody = websitePatchCredentialId;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websitePatchCredentialId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling websitePatchCredentialId");
      }
      // verify the required parameter 'websitePatchCredentialId' is set
      if (websitePatchCredentialId === undefined || websitePatchCredentialId === null) {
        throw new Error("Missing the required parameter 'websitePatchCredentialId' when calling websitePatchCredentialId");
      }

      var pathParams = {
        'websiteId': websiteId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Credential;
      return this.apiClient.callApi(
        '/website/{websiteId}/credential/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/:id
     * @param {String} websiteId ID of website
     * @param {String} id id
     * @param {module:model/WebsitePatchCredentialId} websitePatchCredentialId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    this.websitePatchCredentialId = function(websiteId, id, websitePatchCredentialId) {
      return this.websitePatchCredentialIdWithHttpInfo(websiteId, id, websitePatchCredentialId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/certificate/:id
     * @param {String} websiteId ID of website
     * @param {String} id id
     * @param {module:model/WebsitePatchCredentialcertificateId} websitePatchCredentialcertificateId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    this.websitePatchCredentialcertificateIdWithHttpInfo = function(websiteId, id, websitePatchCredentialcertificateId) {
      var postBody = websitePatchCredentialcertificateId;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websitePatchCredentialcertificateId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling websitePatchCredentialcertificateId");
      }
      // verify the required parameter 'websitePatchCredentialcertificateId' is set
      if (websitePatchCredentialcertificateId === undefined || websitePatchCredentialcertificateId === null) {
        throw new Error("Missing the required parameter 'websitePatchCredentialcertificateId' when calling websitePatchCredentialcertificateId");
      }

      var pathParams = {
        'websiteId': websiteId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Credential;
      return this.apiClient.callApi(
        '/website/{websiteId}/credential/certificate/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/certificate/:id
     * @param {String} websiteId ID of website
     * @param {String} id id
     * @param {module:model/WebsitePatchCredentialcertificateId} websitePatchCredentialcertificateId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    this.websitePatchCredentialcertificateId = function(websiteId, id, websitePatchCredentialcertificateId) {
      return this.websitePatchCredentialcertificateIdWithHttpInfo(websiteId, id, websitePatchCredentialcertificateId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password/:id
     * @param {String} websiteId ID of website
     * @param {String} id id
     * @param {module:model/WebsitePatchCredentialpasswordId} websitePatchCredentialpasswordId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    this.websitePatchCredentialpasswordIdWithHttpInfo = function(websiteId, id, websitePatchCredentialpasswordId) {
      var postBody = websitePatchCredentialpasswordId;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websitePatchCredentialpasswordId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling websitePatchCredentialpasswordId");
      }
      // verify the required parameter 'websitePatchCredentialpasswordId' is set
      if (websitePatchCredentialpasswordId === undefined || websitePatchCredentialpasswordId === null) {
        throw new Error("Missing the required parameter 'websitePatchCredentialpasswordId' when calling websitePatchCredentialpasswordId");
      }

      var pathParams = {
        'websiteId': websiteId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Credential;
      return this.apiClient.callApi(
        '/website/{websiteId}/credential/password/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/password/:id
     * @param {String} websiteId ID of website
     * @param {String} id id
     * @param {module:model/WebsitePatchCredentialpasswordId} websitePatchCredentialpasswordId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    this.websitePatchCredentialpasswordId = function(websiteId, id, websitePatchCredentialpasswordId) {
      return this.websitePatchCredentialpasswordIdWithHttpInfo(websiteId, id, websitePatchCredentialpasswordId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} websiteId ID of website
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    this.websitePatchTagWithHttpInfo = function(websiteId, requestBody) {
      var postBody = requestBody;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websitePatchTag");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling websitePatchTag");
      }

      var pathParams = {
        'websiteId': websiteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/website/{websiteId}/tag', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} websiteId ID of website
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    this.websitePatchTag = function(websiteId, requestBody) {
      return this.websitePatchTagWithHttpInfo(websiteId, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} websiteId ID of website
     * @param {module:model/WebsitePostAccessrights} websitePostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Website} and HTTP response
     */
    this.websitePostAccessrightsWithHttpInfo = function(websiteId, websitePostAccessrights) {
      var postBody = websitePostAccessrights;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websitePostAccessrights");
      }
      // verify the required parameter 'websitePostAccessrights' is set
      if (websitePostAccessrights === undefined || websitePostAccessrights === null) {
        throw new Error("Missing the required parameter 'websitePostAccessrights' when calling websitePostAccessrights");
      }

      var pathParams = {
        'websiteId': websiteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Website;
      return this.apiClient.callApi(
        '/website/{websiteId}/accessrights', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights
     * @param {String} websiteId ID of website
     * @param {module:model/WebsitePostAccessrights} websitePostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Website}
     */
    this.websitePostAccessrights = function(websiteId, websitePostAccessrights) {
      return this.websitePostAccessrightsWithHttpInfo(websiteId, websitePostAccessrights)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential
     * @param {String} websiteId ID of website
     * @param {module:model/WebsitePostCredential} websitePostCredential 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    this.websitePostCredentialWithHttpInfo = function(websiteId, websitePostCredential) {
      var postBody = websitePostCredential;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websitePostCredential");
      }
      // verify the required parameter 'websitePostCredential' is set
      if (websitePostCredential === undefined || websitePostCredential === null) {
        throw new Error("Missing the required parameter 'websitePostCredential' when calling websitePostCredential");
      }

      var pathParams = {
        'websiteId': websiteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Credential;
      return this.apiClient.callApi(
        '/website/{websiteId}/credential', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential
     * @param {String} websiteId ID of website
     * @param {module:model/WebsitePostCredential} websitePostCredential 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    this.websitePostCredential = function(websiteId, websitePostCredential) {
      return this.websitePostCredentialWithHttpInfo(websiteId, websitePostCredential)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/certificate
     * @param {String} websiteId ID of website
     * @param {module:model/WebsitePostCredentialcertificate} websitePostCredentialcertificate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    this.websitePostCredentialcertificateWithHttpInfo = function(websiteId, websitePostCredentialcertificate) {
      var postBody = websitePostCredentialcertificate;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websitePostCredentialcertificate");
      }
      // verify the required parameter 'websitePostCredentialcertificate' is set
      if (websitePostCredentialcertificate === undefined || websitePostCredentialcertificate === null) {
        throw new Error("Missing the required parameter 'websitePostCredentialcertificate' when calling websitePostCredentialcertificate");
      }

      var pathParams = {
        'websiteId': websiteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Credential;
      return this.apiClient.callApi(
        '/website/{websiteId}/credential/certificate', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/certificate
     * @param {String} websiteId ID of website
     * @param {module:model/WebsitePostCredentialcertificate} websitePostCredentialcertificate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    this.websitePostCredentialcertificate = function(websiteId, websitePostCredentialcertificate) {
      return this.websitePostCredentialcertificateWithHttpInfo(websiteId, websitePostCredentialcertificate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password
     * @param {String} websiteId ID of website
     * @param {module:model/WebsitePostCredentialpassword} websitePostCredentialpassword 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    this.websitePostCredentialpasswordWithHttpInfo = function(websiteId, websitePostCredentialpassword) {
      var postBody = websitePostCredentialpassword;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websitePostCredentialpassword");
      }
      // verify the required parameter 'websitePostCredentialpassword' is set
      if (websitePostCredentialpassword === undefined || websitePostCredentialpassword === null) {
        throw new Error("Missing the required parameter 'websitePostCredentialpassword' when calling websitePostCredentialpassword");
      }

      var pathParams = {
        'websiteId': websiteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Credential;
      return this.apiClient.callApi(
        '/website/{websiteId}/credential/password', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/password
     * @param {String} websiteId ID of website
     * @param {module:model/WebsitePostCredentialpassword} websitePostCredentialpassword 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    this.websitePostCredentialpassword = function(websiteId, websitePostCredentialpassword) {
      return this.websitePostCredentialpasswordWithHttpInfo(websiteId, websitePostCredentialpassword)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /snapshot
     * @param {String} websiteId ID of website
     * @param {module:model/WebsitePostSnapshot} websitePostSnapshot 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Website} and HTTP response
     */
    this.websitePostSnapshotWithHttpInfo = function(websiteId, websitePostSnapshot) {
      var postBody = websitePostSnapshot;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websitePostSnapshot");
      }
      // verify the required parameter 'websitePostSnapshot' is set
      if (websitePostSnapshot === undefined || websitePostSnapshot === null) {
        throw new Error("Missing the required parameter 'websitePostSnapshot' when calling websitePostSnapshot");
      }

      var pathParams = {
        'websiteId': websiteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Website;
      return this.apiClient.callApi(
        '/website/{websiteId}/snapshot', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /snapshot
     * @param {String} websiteId ID of website
     * @param {module:model/WebsitePostSnapshot} websitePostSnapshot 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Website}
     */
    this.websitePostSnapshot = function(websiteId, websitePostSnapshot) {
      return this.websitePostSnapshotWithHttpInfo(websiteId, websitePostSnapshot)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} websiteId ID of website
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    this.websitePutTagWithHttpInfo = function(websiteId, requestBody) {
      var postBody = requestBody;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websitePutTag");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling websitePutTag");
      }

      var pathParams = {
        'websiteId': websiteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/website/{websiteId}/tag', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} websiteId ID of website
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    this.websitePutTag = function(websiteId, requestBody) {
      return this.websitePutTagWithHttpInfo(websiteId, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get
     * Returns a single website
     * @param {String} websiteId ID of website
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Website} and HTTP response
     */
    this.websiteShowWithHttpInfo = function(websiteId) {
      var postBody = null;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websiteShow");
      }

      var pathParams = {
        'websiteId': websiteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Website;
      return this.apiClient.callApi(
        '/website/{websiteId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get
     * Returns a single website
     * @param {String} websiteId ID of website
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Website}
     */
    this.websiteShow = function(websiteId) {
      return this.websiteShowWithHttpInfo(websiteId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update
     * Returns modified website
     * @param {String} websiteId ID of website
     * @param {module:model/WebsiteUpdate} websiteUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Website} and HTTP response
     */
    this.websiteUpdateWithHttpInfo = function(websiteId, websiteUpdate) {
      var postBody = websiteUpdate;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websiteUpdate");
      }
      // verify the required parameter 'websiteUpdate' is set
      if (websiteUpdate === undefined || websiteUpdate === null) {
        throw new Error("Missing the required parameter 'websiteUpdate' when calling websiteUpdate");
      }

      var pathParams = {
        'websiteId': websiteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Website;
      return this.apiClient.callApi(
        '/website/{websiteId}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update
     * Returns modified website
     * @param {String} websiteId ID of website
     * @param {module:model/WebsiteUpdate} websiteUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Website}
     */
    this.websiteUpdate = function(websiteId, websiteUpdate) {
      return this.websiteUpdateWithHttpInfo(websiteId, websiteUpdate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
