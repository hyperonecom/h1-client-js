/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Credential from '../model/Credential';
import Event from '../model/Event';
import InlineResponse2003 from '../model/InlineResponse2003';
import InlineResponse400 from '../model/InlineResponse400';
import Website from '../model/Website';
import WebsiteActionTransfer from '../model/WebsiteActionTransfer';
import WebsiteActionUpdateDomain from '../model/WebsiteActionUpdateDomain';
import WebsiteCreate from '../model/WebsiteCreate';
import WebsitePatchCredentialId from '../model/WebsitePatchCredentialId';
import WebsitePatchCredentialcertificateId from '../model/WebsitePatchCredentialcertificateId';
import WebsitePatchCredentialpasswordId from '../model/WebsitePatchCredentialpasswordId';
import WebsitePostAccessrights from '../model/WebsitePostAccessrights';
import WebsitePostCredential from '../model/WebsitePostCredential';
import WebsitePostCredentialcertificate from '../model/WebsitePostCredentialcertificate';
import WebsitePostCredentialpassword from '../model/WebsitePostCredentialpassword';
import WebsitePostSnapshot from '../model/WebsitePostSnapshot';
import WebsiteServices from '../model/WebsiteServices';
import WebsiteUpdate from '../model/WebsiteUpdate';

/**
* Website service.
* @module h1-client/WebsiteApi
* @version 0.0.3
*/
export default class WebsiteApi {

    /**
    * Constructs a new WebsiteApi. 
    * @alias module:h1-client/WebsiteApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * /actions/restart
     * Action restart
     * @param {String} websiteId ID of website
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Website} and HTTP response
     */
    websiteActionRestartWithHttpInfo(websiteId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websiteActionRestart");
      }

      let pathParams = {
        'websiteId': websiteId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-idempotency-key': opts['xIdempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Website;
      return this.apiClient.callApi(
        '/website/{websiteId}/actions/restart', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /actions/restart
     * Action restart
     * @param {String} websiteId ID of website
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Website}
     */
    websiteActionRestart(websiteId, opts) {
      return this.websiteActionRestartWithHttpInfo(websiteId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/start
     * Action start
     * @param {String} websiteId ID of website
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Website} and HTTP response
     */
    websiteActionStartWithHttpInfo(websiteId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websiteActionStart");
      }

      let pathParams = {
        'websiteId': websiteId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-idempotency-key': opts['xIdempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Website;
      return this.apiClient.callApi(
        '/website/{websiteId}/actions/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /actions/start
     * Action start
     * @param {String} websiteId ID of website
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Website}
     */
    websiteActionStart(websiteId, opts) {
      return this.websiteActionStartWithHttpInfo(websiteId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/stop
     * Action stop
     * @param {String} websiteId ID of website
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Website} and HTTP response
     */
    websiteActionStopWithHttpInfo(websiteId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websiteActionStop");
      }

      let pathParams = {
        'websiteId': websiteId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-idempotency-key': opts['xIdempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Website;
      return this.apiClient.callApi(
        '/website/{websiteId}/actions/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /actions/stop
     * Action stop
     * @param {String} websiteId ID of website
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Website}
     */
    websiteActionStop(websiteId, opts) {
      return this.websiteActionStopWithHttpInfo(websiteId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/transfer
     * Action transfer
     * @param {String} websiteId ID of website
     * @param {module:model/WebsiteActionTransfer} websiteActionTransfer 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Website} and HTTP response
     */
    websiteActionTransferWithHttpInfo(websiteId, websiteActionTransfer, opts) {
      opts = opts || {};
      let postBody = websiteActionTransfer;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websiteActionTransfer");
      }
      // verify the required parameter 'websiteActionTransfer' is set
      if (websiteActionTransfer === undefined || websiteActionTransfer === null) {
        throw new Error("Missing the required parameter 'websiteActionTransfer' when calling websiteActionTransfer");
      }

      let pathParams = {
        'websiteId': websiteId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-idempotency-key': opts['xIdempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Website;
      return this.apiClient.callApi(
        '/website/{websiteId}/actions/transfer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /actions/transfer
     * Action transfer
     * @param {String} websiteId ID of website
     * @param {module:model/WebsiteActionTransfer} websiteActionTransfer 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Website}
     */
    websiteActionTransfer(websiteId, websiteActionTransfer, opts) {
      return this.websiteActionTransferWithHttpInfo(websiteId, websiteActionTransfer, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/update_domain
     * Action update_domain
     * @param {String} websiteId ID of website
     * @param {module:model/WebsiteActionUpdateDomain} websiteActionUpdateDomain 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Website} and HTTP response
     */
    websiteActionUpdateDomainWithHttpInfo(websiteId, websiteActionUpdateDomain, opts) {
      opts = opts || {};
      let postBody = websiteActionUpdateDomain;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websiteActionUpdateDomain");
      }
      // verify the required parameter 'websiteActionUpdateDomain' is set
      if (websiteActionUpdateDomain === undefined || websiteActionUpdateDomain === null) {
        throw new Error("Missing the required parameter 'websiteActionUpdateDomain' when calling websiteActionUpdateDomain");
      }

      let pathParams = {
        'websiteId': websiteId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-idempotency-key': opts['xIdempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Website;
      return this.apiClient.callApi(
        '/website/{websiteId}/actions/update_domain', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /actions/update_domain
     * Action update_domain
     * @param {String} websiteId ID of website
     * @param {module:model/WebsiteActionUpdateDomain} websiteActionUpdateDomain 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Website}
     */
    websiteActionUpdateDomain(websiteId, websiteActionUpdateDomain, opts) {
      return this.websiteActionUpdateDomainWithHttpInfo(websiteId, websiteActionUpdateDomain, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create
     * Create website
     * @param {module:model/WebsiteCreate} websiteCreate 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Website} and HTTP response
     */
    websiteCreateWithHttpInfo(websiteCreate, opts) {
      opts = opts || {};
      let postBody = websiteCreate;
      // verify the required parameter 'websiteCreate' is set
      if (websiteCreate === undefined || websiteCreate === null) {
        throw new Error("Missing the required parameter 'websiteCreate' when calling websiteCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-idempotency-key': opts['xIdempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Website;
      return this.apiClient.callApi(
        '/website', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create
     * Create website
     * @param {module:model/WebsiteCreate} websiteCreate 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Website}
     */
    websiteCreate(websiteCreate, opts) {
      return this.websiteCreateWithHttpInfo(websiteCreate, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete
     * @param {String} websiteId ID of website
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    websiteDeleteWithHttpInfo(websiteId) {
      let postBody = null;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websiteDelete");
      }

      let pathParams = {
        'websiteId': websiteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/website/{websiteId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete
     * @param {String} websiteId ID of website
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    websiteDelete(websiteId) {
      return this.websiteDeleteWithHttpInfo(websiteId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights/:identity
     * @param {String} websiteId ID of website
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Website} and HTTP response
     */
    websiteDeleteAccessrightsIdentityWithHttpInfo(websiteId, identity) {
      let postBody = null;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websiteDeleteAccessrightsIdentity");
      }
      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling websiteDeleteAccessrightsIdentity");
      }

      let pathParams = {
        'websiteId': websiteId,
        'identity': identity
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Website;
      return this.apiClient.callApi(
        '/website/{websiteId}/accessrights/{identity}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights/:identity
     * @param {String} websiteId ID of website
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Website}
     */
    websiteDeleteAccessrightsIdentity(websiteId, identity) {
      return this.websiteDeleteAccessrightsIdentityWithHttpInfo(websiteId, identity)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/:id
     * @param {String} websiteId ID of website
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Website} and HTTP response
     */
    websiteDeleteCredentialIdWithHttpInfo(websiteId, id) {
      let postBody = null;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websiteDeleteCredentialId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling websiteDeleteCredentialId");
      }

      let pathParams = {
        'websiteId': websiteId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Website;
      return this.apiClient.callApi(
        '/website/{websiteId}/credential/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/:id
     * @param {String} websiteId ID of website
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Website}
     */
    websiteDeleteCredentialId(websiteId, id) {
      return this.websiteDeleteCredentialIdWithHttpInfo(websiteId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/certificate/:id
     * @param {String} websiteId ID of website
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2003} and HTTP response
     */
    websiteDeleteCredentialcertificateIdWithHttpInfo(websiteId, id) {
      let postBody = null;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websiteDeleteCredentialcertificateId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling websiteDeleteCredentialcertificateId");
      }

      let pathParams = {
        'websiteId': websiteId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2003;
      return this.apiClient.callApi(
        '/website/{websiteId}/credential/certificate/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/certificate/:id
     * @param {String} websiteId ID of website
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2003}
     */
    websiteDeleteCredentialcertificateId(websiteId, id) {
      return this.websiteDeleteCredentialcertificateIdWithHttpInfo(websiteId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password/:id
     * @param {String} websiteId ID of website
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Website} and HTTP response
     */
    websiteDeleteCredentialpasswordIdWithHttpInfo(websiteId, id) {
      let postBody = null;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websiteDeleteCredentialpasswordId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling websiteDeleteCredentialpasswordId");
      }

      let pathParams = {
        'websiteId': websiteId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Website;
      return this.apiClient.callApi(
        '/website/{websiteId}/credential/password/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/password/:id
     * @param {String} websiteId ID of website
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Website}
     */
    websiteDeleteCredentialpasswordId(websiteId, id) {
      return this.websiteDeleteCredentialpasswordIdWithHttpInfo(websiteId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /snapshot/:id
     * @param {String} websiteId ID of website
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Website} and HTTP response
     */
    websiteDeleteSnapshotIdWithHttpInfo(websiteId, id) {
      let postBody = null;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websiteDeleteSnapshotId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling websiteDeleteSnapshotId");
      }

      let pathParams = {
        'websiteId': websiteId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Website;
      return this.apiClient.callApi(
        '/website/{websiteId}/snapshot/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /snapshot/:id
     * @param {String} websiteId ID of website
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Website}
     */
    websiteDeleteSnapshotId(websiteId, id) {
      return this.websiteDeleteSnapshotIdWithHttpInfo(websiteId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag/:key
     * @param {String} websiteId ID of website
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    websiteDeleteTagKeyWithHttpInfo(websiteId, key) {
      let postBody = null;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websiteDeleteTagKey");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling websiteDeleteTagKey");
      }

      let pathParams = {
        'websiteId': websiteId,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/website/{websiteId}/tag/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag/:key
     * @param {String} websiteId ID of website
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    websiteDeleteTagKey(websiteId, key) {
      return this.websiteDeleteTagKeyWithHttpInfo(websiteId, key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/:id
     * @param {String} websiteId ID of website
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    websiteGetCredentialIdWithHttpInfo(websiteId, id) {
      let postBody = null;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websiteGetCredentialId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling websiteGetCredentialId");
      }

      let pathParams = {
        'websiteId': websiteId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Credential;
      return this.apiClient.callApi(
        '/website/{websiteId}/credential/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/:id
     * @param {String} websiteId ID of website
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    websiteGetCredentialId(websiteId, id) {
      return this.websiteGetCredentialIdWithHttpInfo(websiteId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/certificate/:id
     * @param {String} websiteId ID of website
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    websiteGetCredentialcertificateIdWithHttpInfo(websiteId, id) {
      let postBody = null;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websiteGetCredentialcertificateId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling websiteGetCredentialcertificateId");
      }

      let pathParams = {
        'websiteId': websiteId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Credential;
      return this.apiClient.callApi(
        '/website/{websiteId}/credential/certificate/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/certificate/:id
     * @param {String} websiteId ID of website
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    websiteGetCredentialcertificateId(websiteId, id) {
      return this.websiteGetCredentialcertificateIdWithHttpInfo(websiteId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password/:id
     * @param {String} websiteId ID of website
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    websiteGetCredentialpasswordIdWithHttpInfo(websiteId, id) {
      let postBody = null;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websiteGetCredentialpasswordId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling websiteGetCredentialpasswordId");
      }

      let pathParams = {
        'websiteId': websiteId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Credential;
      return this.apiClient.callApi(
        '/website/{websiteId}/credential/password/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/password/:id
     * @param {String} websiteId ID of website
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    websiteGetCredentialpasswordId(websiteId, id) {
      return this.websiteGetCredentialpasswordIdWithHttpInfo(websiteId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services/:serviceId
     * @param {String} websiteId ID of website
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WebsiteServices} and HTTP response
     */
    websiteGetServicesServiceIdWithHttpInfo(websiteId, serviceId) {
      let postBody = null;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websiteGetServicesServiceId");
      }
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling websiteGetServicesServiceId");
      }

      let pathParams = {
        'websiteId': websiteId,
        'serviceId': serviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebsiteServices;
      return this.apiClient.callApi(
        '/website/{websiteId}/services/{serviceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /services/:serviceId
     * @param {String} websiteId ID of website
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WebsiteServices}
     */
    websiteGetServicesServiceId(websiteId, serviceId) {
      return this.websiteGetServicesServiceIdWithHttpInfo(websiteId, serviceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /snapshot/:id
     * @param {String} websiteId ID of website
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    websiteGetSnapshotIdWithHttpInfo(websiteId, id) {
      let postBody = null;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websiteGetSnapshotId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling websiteGetSnapshotId");
      }

      let pathParams = {
        'websiteId': websiteId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/website/{websiteId}/snapshot/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /snapshot/:id
     * @param {String} websiteId ID of website
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    websiteGetSnapshotId(websiteId, id) {
      return this.websiteGetSnapshotIdWithHttpInfo(websiteId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /snapshot/:id/download
     * @param {String} websiteId ID of website
     * @param {Object} opts Optional parameters
     * @param {String} opts.incremental incremental
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    websiteGetSnapshotIddownloadWithHttpInfo(websiteId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websiteGetSnapshotIddownload");
      }

      let pathParams = {
        'websiteId': websiteId
      };
      let queryParams = {
        'incremental': opts['incremental']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/website/{websiteId}/snapshot/:id/download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /snapshot/:id/download
     * @param {String} websiteId ID of website
     * @param {Object} opts Optional parameters
     * @param {String} opts.incremental incremental
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    websiteGetSnapshotIddownload(websiteId, opts) {
      return this.websiteGetSnapshotIddownloadWithHttpInfo(websiteId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} websiteId ID of website
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    websiteGetTagWithHttpInfo(websiteId) {
      let postBody = null;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websiteGetTag");
      }

      let pathParams = {
        'websiteId': websiteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/website/{websiteId}/tag', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} websiteId ID of website
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    websiteGetTag(websiteId) {
      return this.websiteGetTagWithHttpInfo(websiteId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List
     * List website
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @param {Object.<String, {String: String}>} opts.tag Filter by tag
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Website>} and HTTP response
     */
    websiteListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'tag': opts['tag']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Website];
      return this.apiClient.callApi(
        '/website', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List
     * List website
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @param {Object.<String, {String: String}>} opts.tag Filter by tag
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Website>}
     */
    websiteList(opts) {
      return this.websiteListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} websiteId ID of website
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    websiteListAccessrightsWithHttpInfo(websiteId) {
      let postBody = null;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websiteListAccessrights");
      }

      let pathParams = {
        'websiteId': websiteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/website/{websiteId}/accessrights', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights
     * @param {String} websiteId ID of website
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    websiteListAccessrights(websiteId) {
      return this.websiteListAccessrightsWithHttpInfo(websiteId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential
     * @param {String} websiteId ID of website
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Credential>} and HTTP response
     */
    websiteListCredentialWithHttpInfo(websiteId) {
      let postBody = null;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websiteListCredential");
      }

      let pathParams = {
        'websiteId': websiteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Credential];
      return this.apiClient.callApi(
        '/website/{websiteId}/credential', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential
     * @param {String} websiteId ID of website
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Credential>}
     */
    websiteListCredential(websiteId) {
      return this.websiteListCredentialWithHttpInfo(websiteId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/certificate
     * @param {String} websiteId ID of website
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Credential>} and HTTP response
     */
    websiteListCredentialcertificateWithHttpInfo(websiteId) {
      let postBody = null;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websiteListCredentialcertificate");
      }

      let pathParams = {
        'websiteId': websiteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Credential];
      return this.apiClient.callApi(
        '/website/{websiteId}/credential/certificate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/certificate
     * @param {String} websiteId ID of website
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Credential>}
     */
    websiteListCredentialcertificate(websiteId) {
      return this.websiteListCredentialcertificateWithHttpInfo(websiteId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password
     * @param {String} websiteId ID of website
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Credential>} and HTTP response
     */
    websiteListCredentialpasswordWithHttpInfo(websiteId) {
      let postBody = null;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websiteListCredentialpassword");
      }

      let pathParams = {
        'websiteId': websiteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Credential];
      return this.apiClient.callApi(
        '/website/{websiteId}/credential/password', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/password
     * @param {String} websiteId ID of website
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Credential>}
     */
    websiteListCredentialpassword(websiteId) {
      return this.websiteListCredentialpasswordWithHttpInfo(websiteId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /queue
     * @param {String} websiteId ID of website
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit $limit
     * @param {Number} opts.skip $skip
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Event>} and HTTP response
     */
    websiteListQueueWithHttpInfo(websiteId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websiteListQueue");
      }

      let pathParams = {
        'websiteId': websiteId
      };
      let queryParams = {
        '$limit': opts['limit'],
        '$skip': opts['skip']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Event];
      return this.apiClient.callApi(
        '/website/{websiteId}/queue', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /queue
     * @param {String} websiteId ID of website
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit $limit
     * @param {Number} opts.skip $skip
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Event>}
     */
    websiteListQueue(websiteId, opts) {
      return this.websiteListQueueWithHttpInfo(websiteId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services
     * @param {String} websiteId ID of website
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/WebsiteServices>} and HTTP response
     */
    websiteListServicesWithHttpInfo(websiteId) {
      let postBody = null;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websiteListServices");
      }

      let pathParams = {
        'websiteId': websiteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [WebsiteServices];
      return this.apiClient.callApi(
        '/website/{websiteId}/services', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /services
     * @param {String} websiteId ID of website
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/WebsiteServices>}
     */
    websiteListServices(websiteId) {
      return this.websiteListServicesWithHttpInfo(websiteId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /snapshot
     * @param {String} websiteId ID of website
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    websiteListSnapshotWithHttpInfo(websiteId) {
      let postBody = null;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websiteListSnapshot");
      }

      let pathParams = {
        'websiteId': websiteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/website/{websiteId}/snapshot', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /snapshot
     * @param {String} websiteId ID of website
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    websiteListSnapshot(websiteId) {
      return this.websiteListSnapshotWithHttpInfo(websiteId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/:id
     * @param {String} websiteId ID of website
     * @param {String} id id
     * @param {module:model/WebsitePatchCredentialId} websitePatchCredentialId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    websitePatchCredentialIdWithHttpInfo(websiteId, id, websitePatchCredentialId) {
      let postBody = websitePatchCredentialId;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websitePatchCredentialId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling websitePatchCredentialId");
      }
      // verify the required parameter 'websitePatchCredentialId' is set
      if (websitePatchCredentialId === undefined || websitePatchCredentialId === null) {
        throw new Error("Missing the required parameter 'websitePatchCredentialId' when calling websitePatchCredentialId");
      }

      let pathParams = {
        'websiteId': websiteId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Credential;
      return this.apiClient.callApi(
        '/website/{websiteId}/credential/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/:id
     * @param {String} websiteId ID of website
     * @param {String} id id
     * @param {module:model/WebsitePatchCredentialId} websitePatchCredentialId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    websitePatchCredentialId(websiteId, id, websitePatchCredentialId) {
      return this.websitePatchCredentialIdWithHttpInfo(websiteId, id, websitePatchCredentialId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/certificate/:id
     * @param {String} websiteId ID of website
     * @param {String} id id
     * @param {module:model/WebsitePatchCredentialcertificateId} websitePatchCredentialcertificateId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    websitePatchCredentialcertificateIdWithHttpInfo(websiteId, id, websitePatchCredentialcertificateId) {
      let postBody = websitePatchCredentialcertificateId;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websitePatchCredentialcertificateId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling websitePatchCredentialcertificateId");
      }
      // verify the required parameter 'websitePatchCredentialcertificateId' is set
      if (websitePatchCredentialcertificateId === undefined || websitePatchCredentialcertificateId === null) {
        throw new Error("Missing the required parameter 'websitePatchCredentialcertificateId' when calling websitePatchCredentialcertificateId");
      }

      let pathParams = {
        'websiteId': websiteId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Credential;
      return this.apiClient.callApi(
        '/website/{websiteId}/credential/certificate/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/certificate/:id
     * @param {String} websiteId ID of website
     * @param {String} id id
     * @param {module:model/WebsitePatchCredentialcertificateId} websitePatchCredentialcertificateId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    websitePatchCredentialcertificateId(websiteId, id, websitePatchCredentialcertificateId) {
      return this.websitePatchCredentialcertificateIdWithHttpInfo(websiteId, id, websitePatchCredentialcertificateId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password/:id
     * @param {String} websiteId ID of website
     * @param {String} id id
     * @param {module:model/WebsitePatchCredentialpasswordId} websitePatchCredentialpasswordId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    websitePatchCredentialpasswordIdWithHttpInfo(websiteId, id, websitePatchCredentialpasswordId) {
      let postBody = websitePatchCredentialpasswordId;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websitePatchCredentialpasswordId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling websitePatchCredentialpasswordId");
      }
      // verify the required parameter 'websitePatchCredentialpasswordId' is set
      if (websitePatchCredentialpasswordId === undefined || websitePatchCredentialpasswordId === null) {
        throw new Error("Missing the required parameter 'websitePatchCredentialpasswordId' when calling websitePatchCredentialpasswordId");
      }

      let pathParams = {
        'websiteId': websiteId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Credential;
      return this.apiClient.callApi(
        '/website/{websiteId}/credential/password/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/password/:id
     * @param {String} websiteId ID of website
     * @param {String} id id
     * @param {module:model/WebsitePatchCredentialpasswordId} websitePatchCredentialpasswordId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    websitePatchCredentialpasswordId(websiteId, id, websitePatchCredentialpasswordId) {
      return this.websitePatchCredentialpasswordIdWithHttpInfo(websiteId, id, websitePatchCredentialpasswordId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} websiteId ID of website
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    websitePatchTagWithHttpInfo(websiteId, requestBody) {
      let postBody = requestBody;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websitePatchTag");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling websitePatchTag");
      }

      let pathParams = {
        'websiteId': websiteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/website/{websiteId}/tag', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} websiteId ID of website
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    websitePatchTag(websiteId, requestBody) {
      return this.websitePatchTagWithHttpInfo(websiteId, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} websiteId ID of website
     * @param {module:model/WebsitePostAccessrights} websitePostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Website} and HTTP response
     */
    websitePostAccessrightsWithHttpInfo(websiteId, websitePostAccessrights) {
      let postBody = websitePostAccessrights;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websitePostAccessrights");
      }
      // verify the required parameter 'websitePostAccessrights' is set
      if (websitePostAccessrights === undefined || websitePostAccessrights === null) {
        throw new Error("Missing the required parameter 'websitePostAccessrights' when calling websitePostAccessrights");
      }

      let pathParams = {
        'websiteId': websiteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Website;
      return this.apiClient.callApi(
        '/website/{websiteId}/accessrights', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights
     * @param {String} websiteId ID of website
     * @param {module:model/WebsitePostAccessrights} websitePostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Website}
     */
    websitePostAccessrights(websiteId, websitePostAccessrights) {
      return this.websitePostAccessrightsWithHttpInfo(websiteId, websitePostAccessrights)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential
     * @param {String} websiteId ID of website
     * @param {module:model/WebsitePostCredential} websitePostCredential 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    websitePostCredentialWithHttpInfo(websiteId, websitePostCredential) {
      let postBody = websitePostCredential;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websitePostCredential");
      }
      // verify the required parameter 'websitePostCredential' is set
      if (websitePostCredential === undefined || websitePostCredential === null) {
        throw new Error("Missing the required parameter 'websitePostCredential' when calling websitePostCredential");
      }

      let pathParams = {
        'websiteId': websiteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Credential;
      return this.apiClient.callApi(
        '/website/{websiteId}/credential', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential
     * @param {String} websiteId ID of website
     * @param {module:model/WebsitePostCredential} websitePostCredential 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    websitePostCredential(websiteId, websitePostCredential) {
      return this.websitePostCredentialWithHttpInfo(websiteId, websitePostCredential)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/certificate
     * @param {String} websiteId ID of website
     * @param {module:model/WebsitePostCredentialcertificate} websitePostCredentialcertificate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    websitePostCredentialcertificateWithHttpInfo(websiteId, websitePostCredentialcertificate) {
      let postBody = websitePostCredentialcertificate;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websitePostCredentialcertificate");
      }
      // verify the required parameter 'websitePostCredentialcertificate' is set
      if (websitePostCredentialcertificate === undefined || websitePostCredentialcertificate === null) {
        throw new Error("Missing the required parameter 'websitePostCredentialcertificate' when calling websitePostCredentialcertificate");
      }

      let pathParams = {
        'websiteId': websiteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Credential;
      return this.apiClient.callApi(
        '/website/{websiteId}/credential/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/certificate
     * @param {String} websiteId ID of website
     * @param {module:model/WebsitePostCredentialcertificate} websitePostCredentialcertificate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    websitePostCredentialcertificate(websiteId, websitePostCredentialcertificate) {
      return this.websitePostCredentialcertificateWithHttpInfo(websiteId, websitePostCredentialcertificate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password
     * @param {String} websiteId ID of website
     * @param {module:model/WebsitePostCredentialpassword} websitePostCredentialpassword 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    websitePostCredentialpasswordWithHttpInfo(websiteId, websitePostCredentialpassword) {
      let postBody = websitePostCredentialpassword;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websitePostCredentialpassword");
      }
      // verify the required parameter 'websitePostCredentialpassword' is set
      if (websitePostCredentialpassword === undefined || websitePostCredentialpassword === null) {
        throw new Error("Missing the required parameter 'websitePostCredentialpassword' when calling websitePostCredentialpassword");
      }

      let pathParams = {
        'websiteId': websiteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Credential;
      return this.apiClient.callApi(
        '/website/{websiteId}/credential/password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/password
     * @param {String} websiteId ID of website
     * @param {module:model/WebsitePostCredentialpassword} websitePostCredentialpassword 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    websitePostCredentialpassword(websiteId, websitePostCredentialpassword) {
      return this.websitePostCredentialpasswordWithHttpInfo(websiteId, websitePostCredentialpassword)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /snapshot
     * @param {String} websiteId ID of website
     * @param {module:model/WebsitePostSnapshot} websitePostSnapshot 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Website} and HTTP response
     */
    websitePostSnapshotWithHttpInfo(websiteId, websitePostSnapshot) {
      let postBody = websitePostSnapshot;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websitePostSnapshot");
      }
      // verify the required parameter 'websitePostSnapshot' is set
      if (websitePostSnapshot === undefined || websitePostSnapshot === null) {
        throw new Error("Missing the required parameter 'websitePostSnapshot' when calling websitePostSnapshot");
      }

      let pathParams = {
        'websiteId': websiteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Website;
      return this.apiClient.callApi(
        '/website/{websiteId}/snapshot', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /snapshot
     * @param {String} websiteId ID of website
     * @param {module:model/WebsitePostSnapshot} websitePostSnapshot 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Website}
     */
    websitePostSnapshot(websiteId, websitePostSnapshot) {
      return this.websitePostSnapshotWithHttpInfo(websiteId, websitePostSnapshot)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} websiteId ID of website
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    websitePutTagWithHttpInfo(websiteId, requestBody) {
      let postBody = requestBody;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websitePutTag");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling websitePutTag");
      }

      let pathParams = {
        'websiteId': websiteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/website/{websiteId}/tag', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} websiteId ID of website
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    websitePutTag(websiteId, requestBody) {
      return this.websitePutTagWithHttpInfo(websiteId, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get
     * Returns a single website
     * @param {String} websiteId ID of website
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Website} and HTTP response
     */
    websiteShowWithHttpInfo(websiteId) {
      let postBody = null;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websiteShow");
      }

      let pathParams = {
        'websiteId': websiteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Website;
      return this.apiClient.callApi(
        '/website/{websiteId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get
     * Returns a single website
     * @param {String} websiteId ID of website
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Website}
     */
    websiteShow(websiteId) {
      return this.websiteShowWithHttpInfo(websiteId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update
     * Returns modified website
     * @param {String} websiteId ID of website
     * @param {module:model/WebsiteUpdate} websiteUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Website} and HTTP response
     */
    websiteUpdateWithHttpInfo(websiteId, websiteUpdate) {
      let postBody = websiteUpdate;
      // verify the required parameter 'websiteId' is set
      if (websiteId === undefined || websiteId === null) {
        throw new Error("Missing the required parameter 'websiteId' when calling websiteUpdate");
      }
      // verify the required parameter 'websiteUpdate' is set
      if (websiteUpdate === undefined || websiteUpdate === null) {
        throw new Error("Missing the required parameter 'websiteUpdate' when calling websiteUpdate");
      }

      let pathParams = {
        'websiteId': websiteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Website;
      return this.apiClient.callApi(
        '/website/{websiteId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update
     * Returns modified website
     * @param {String} websiteId ID of website
     * @param {module:model/WebsiteUpdate} websiteUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Website}
     */
    websiteUpdate(websiteId, websiteUpdate) {
      return this.websiteUpdateWithHttpInfo(websiteId, websiteUpdate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
