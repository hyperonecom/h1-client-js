/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Event from '../model/Event';
import InlineResponse400 from '../model/InlineResponse400';
import Netadp from '../model/Netadp';
import NetadpActionFirewallAdd from '../model/NetadpActionFirewallAdd';
import NetadpPostAccessrights from '../model/NetadpPostAccessrights';
import NetadpServices from '../model/NetadpServices';

/**
* Netadp service.
* @module h1-client/NetadpApi
* @version 0.0.3
*/
export default class NetadpApi {

    /**
    * Constructs a new NetadpApi. 
    * @alias module:h1-client/NetadpApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * /actions/firewall_add
     * Action firewall_add
     * @param {String} netadpId ID of netadp
     * @param {module:model/NetadpActionFirewallAdd} netadpActionFirewallAdd 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Netadp} and HTTP response
     */
    netadpActionFirewallAddWithHttpInfo(netadpId, netadpActionFirewallAdd, opts) {
      opts = opts || {};
      let postBody = netadpActionFirewallAdd;
      // verify the required parameter 'netadpId' is set
      if (netadpId === undefined || netadpId === null) {
        throw new Error("Missing the required parameter 'netadpId' when calling netadpActionFirewallAdd");
      }
      // verify the required parameter 'netadpActionFirewallAdd' is set
      if (netadpActionFirewallAdd === undefined || netadpActionFirewallAdd === null) {
        throw new Error("Missing the required parameter 'netadpActionFirewallAdd' when calling netadpActionFirewallAdd");
      }

      let pathParams = {
        'netadpId': netadpId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-idempotency-key': opts['xIdempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Netadp;
      return this.apiClient.callApi(
        '/netadp/{netadpId}/actions/firewall_add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /actions/firewall_add
     * Action firewall_add
     * @param {String} netadpId ID of netadp
     * @param {module:model/NetadpActionFirewallAdd} netadpActionFirewallAdd 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Netadp}
     */
    netadpActionFirewallAdd(netadpId, netadpActionFirewallAdd, opts) {
      return this.netadpActionFirewallAddWithHttpInfo(netadpId, netadpActionFirewallAdd, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/firewall_remove
     * Action firewall_remove
     * @param {String} netadpId ID of netadp
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Netadp} and HTTP response
     */
    netadpActionFirewallRemoveWithHttpInfo(netadpId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'netadpId' is set
      if (netadpId === undefined || netadpId === null) {
        throw new Error("Missing the required parameter 'netadpId' when calling netadpActionFirewallRemove");
      }

      let pathParams = {
        'netadpId': netadpId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-idempotency-key': opts['xIdempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Netadp;
      return this.apiClient.callApi(
        '/netadp/{netadpId}/actions/firewall_remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /actions/firewall_remove
     * Action firewall_remove
     * @param {String} netadpId ID of netadp
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Netadp}
     */
    netadpActionFirewallRemove(netadpId, opts) {
      return this.netadpActionFirewallRemoveWithHttpInfo(netadpId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights/:identity
     * @param {String} netadpId ID of netadp
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Netadp} and HTTP response
     */
    netadpDeleteAccessrightsIdentityWithHttpInfo(netadpId, identity) {
      let postBody = null;
      // verify the required parameter 'netadpId' is set
      if (netadpId === undefined || netadpId === null) {
        throw new Error("Missing the required parameter 'netadpId' when calling netadpDeleteAccessrightsIdentity");
      }
      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling netadpDeleteAccessrightsIdentity");
      }

      let pathParams = {
        'netadpId': netadpId,
        'identity': identity
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Netadp;
      return this.apiClient.callApi(
        '/netadp/{netadpId}/accessrights/{identity}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights/:identity
     * @param {String} netadpId ID of netadp
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Netadp}
     */
    netadpDeleteAccessrightsIdentity(netadpId, identity) {
      return this.netadpDeleteAccessrightsIdentityWithHttpInfo(netadpId, identity)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag/:key
     * @param {String} netadpId ID of netadp
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    netadpDeleteTagKeyWithHttpInfo(netadpId, key) {
      let postBody = null;
      // verify the required parameter 'netadpId' is set
      if (netadpId === undefined || netadpId === null) {
        throw new Error("Missing the required parameter 'netadpId' when calling netadpDeleteTagKey");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling netadpDeleteTagKey");
      }

      let pathParams = {
        'netadpId': netadpId,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/netadp/{netadpId}/tag/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag/:key
     * @param {String} netadpId ID of netadp
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    netadpDeleteTagKey(netadpId, key) {
      return this.netadpDeleteTagKeyWithHttpInfo(netadpId, key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services/:serviceId
     * @param {String} netadpId ID of netadp
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NetadpServices} and HTTP response
     */
    netadpGetServicesServiceIdWithHttpInfo(netadpId, serviceId) {
      let postBody = null;
      // verify the required parameter 'netadpId' is set
      if (netadpId === undefined || netadpId === null) {
        throw new Error("Missing the required parameter 'netadpId' when calling netadpGetServicesServiceId");
      }
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling netadpGetServicesServiceId");
      }

      let pathParams = {
        'netadpId': netadpId,
        'serviceId': serviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NetadpServices;
      return this.apiClient.callApi(
        '/netadp/{netadpId}/services/{serviceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /services/:serviceId
     * @param {String} netadpId ID of netadp
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NetadpServices}
     */
    netadpGetServicesServiceId(netadpId, serviceId) {
      return this.netadpGetServicesServiceIdWithHttpInfo(netadpId, serviceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} netadpId ID of netadp
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    netadpGetTagWithHttpInfo(netadpId) {
      let postBody = null;
      // verify the required parameter 'netadpId' is set
      if (netadpId === undefined || netadpId === null) {
        throw new Error("Missing the required parameter 'netadpId' when calling netadpGetTag");
      }

      let pathParams = {
        'netadpId': netadpId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/netadp/{netadpId}/tag', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} netadpId ID of netadp
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    netadpGetTag(netadpId) {
      return this.netadpGetTagWithHttpInfo(netadpId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List
     * List netadp
     * @param {Object} opts Optional parameters
     * @param {String} opts.assignedResource Filter by assigned.resource
     * @param {String} opts.assignedId Filter by assigned.id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Netadp>} and HTTP response
     */
    netadpListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'assigned.resource': opts['assignedResource'],
        'assigned.id': opts['assignedId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Netadp];
      return this.apiClient.callApi(
        '/netadp', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List
     * List netadp
     * @param {Object} opts Optional parameters
     * @param {String} opts.assignedResource Filter by assigned.resource
     * @param {String} opts.assignedId Filter by assigned.id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Netadp>}
     */
    netadpList(opts) {
      return this.netadpListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} netadpId ID of netadp
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    netadpListAccessrightsWithHttpInfo(netadpId) {
      let postBody = null;
      // verify the required parameter 'netadpId' is set
      if (netadpId === undefined || netadpId === null) {
        throw new Error("Missing the required parameter 'netadpId' when calling netadpListAccessrights");
      }

      let pathParams = {
        'netadpId': netadpId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/netadp/{netadpId}/accessrights', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights
     * @param {String} netadpId ID of netadp
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    netadpListAccessrights(netadpId) {
      return this.netadpListAccessrightsWithHttpInfo(netadpId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /queue
     * @param {String} netadpId ID of netadp
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit $limit
     * @param {Number} opts.skip $skip
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Event>} and HTTP response
     */
    netadpListQueueWithHttpInfo(netadpId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'netadpId' is set
      if (netadpId === undefined || netadpId === null) {
        throw new Error("Missing the required parameter 'netadpId' when calling netadpListQueue");
      }

      let pathParams = {
        'netadpId': netadpId
      };
      let queryParams = {
        '$limit': opts['limit'],
        '$skip': opts['skip']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Event];
      return this.apiClient.callApi(
        '/netadp/{netadpId}/queue', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /queue
     * @param {String} netadpId ID of netadp
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit $limit
     * @param {Number} opts.skip $skip
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Event>}
     */
    netadpListQueue(netadpId, opts) {
      return this.netadpListQueueWithHttpInfo(netadpId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services
     * @param {String} netadpId ID of netadp
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/NetadpServices>} and HTTP response
     */
    netadpListServicesWithHttpInfo(netadpId) {
      let postBody = null;
      // verify the required parameter 'netadpId' is set
      if (netadpId === undefined || netadpId === null) {
        throw new Error("Missing the required parameter 'netadpId' when calling netadpListServices");
      }

      let pathParams = {
        'netadpId': netadpId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [NetadpServices];
      return this.apiClient.callApi(
        '/netadp/{netadpId}/services', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /services
     * @param {String} netadpId ID of netadp
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/NetadpServices>}
     */
    netadpListServices(netadpId) {
      return this.netadpListServicesWithHttpInfo(netadpId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} netadpId ID of netadp
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    netadpPatchTagWithHttpInfo(netadpId, requestBody) {
      let postBody = requestBody;
      // verify the required parameter 'netadpId' is set
      if (netadpId === undefined || netadpId === null) {
        throw new Error("Missing the required parameter 'netadpId' when calling netadpPatchTag");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling netadpPatchTag");
      }

      let pathParams = {
        'netadpId': netadpId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/netadp/{netadpId}/tag', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} netadpId ID of netadp
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    netadpPatchTag(netadpId, requestBody) {
      return this.netadpPatchTagWithHttpInfo(netadpId, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} netadpId ID of netadp
     * @param {module:model/NetadpPostAccessrights} netadpPostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Netadp} and HTTP response
     */
    netadpPostAccessrightsWithHttpInfo(netadpId, netadpPostAccessrights) {
      let postBody = netadpPostAccessrights;
      // verify the required parameter 'netadpId' is set
      if (netadpId === undefined || netadpId === null) {
        throw new Error("Missing the required parameter 'netadpId' when calling netadpPostAccessrights");
      }
      // verify the required parameter 'netadpPostAccessrights' is set
      if (netadpPostAccessrights === undefined || netadpPostAccessrights === null) {
        throw new Error("Missing the required parameter 'netadpPostAccessrights' when calling netadpPostAccessrights");
      }

      let pathParams = {
        'netadpId': netadpId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Netadp;
      return this.apiClient.callApi(
        '/netadp/{netadpId}/accessrights', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights
     * @param {String} netadpId ID of netadp
     * @param {module:model/NetadpPostAccessrights} netadpPostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Netadp}
     */
    netadpPostAccessrights(netadpId, netadpPostAccessrights) {
      return this.netadpPostAccessrightsWithHttpInfo(netadpId, netadpPostAccessrights)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} netadpId ID of netadp
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    netadpPutTagWithHttpInfo(netadpId, requestBody) {
      let postBody = requestBody;
      // verify the required parameter 'netadpId' is set
      if (netadpId === undefined || netadpId === null) {
        throw new Error("Missing the required parameter 'netadpId' when calling netadpPutTag");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling netadpPutTag");
      }

      let pathParams = {
        'netadpId': netadpId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/netadp/{netadpId}/tag', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} netadpId ID of netadp
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    netadpPutTag(netadpId, requestBody) {
      return this.netadpPutTagWithHttpInfo(netadpId, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get
     * Returns a single netadp
     * @param {String} netadpId ID of netadp
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Netadp} and HTTP response
     */
    netadpShowWithHttpInfo(netadpId) {
      let postBody = null;
      // verify the required parameter 'netadpId' is set
      if (netadpId === undefined || netadpId === null) {
        throw new Error("Missing the required parameter 'netadpId' when calling netadpShow");
      }

      let pathParams = {
        'netadpId': netadpId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Netadp;
      return this.apiClient.callApi(
        '/netadp/{netadpId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get
     * Returns a single netadp
     * @param {String} netadpId ID of netadp
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Netadp}
     */
    netadpShow(netadpId) {
      return this.netadpShowWithHttpInfo(netadpId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
