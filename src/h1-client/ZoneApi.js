/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Event from '../model/Event';
import InlineResponse400 from '../model/InlineResponse400';
import Zone from '../model/Zone';
import ZoneCreate from '../model/ZoneCreate';
import ZonePatchRecordsetRecordsetId from '../model/ZonePatchRecordsetRecordsetId';
import ZonePostAccessrights from '../model/ZonePostAccessrights';
import ZonePostRecordset from '../model/ZonePostRecordset';
import ZoneRecordset from '../model/ZoneRecordset';
import ZoneRecordsetRecord from '../model/ZoneRecordsetRecord';
import ZoneServices from '../model/ZoneServices';
import ZoneUpdate from '../model/ZoneUpdate';

/**
* Zone service.
* @module h1-client/ZoneApi
* @version 0.0.3
*/
export default class ZoneApi {

    /**
    * Constructs a new ZoneApi. 
    * @alias module:h1-client/ZoneApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create
     * Create zone
     * @param {module:model/ZoneCreate} zoneCreate 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Zone} and HTTP response
     */
    zoneCreateWithHttpInfo(zoneCreate, opts) {
      opts = opts || {};
      let postBody = zoneCreate;
      // verify the required parameter 'zoneCreate' is set
      if (zoneCreate === undefined || zoneCreate === null) {
        throw new Error("Missing the required parameter 'zoneCreate' when calling zoneCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-idempotency-key': opts['xIdempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Zone;
      return this.apiClient.callApi(
        '/zone', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create
     * Create zone
     * @param {module:model/ZoneCreate} zoneCreate 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Zone}
     */
    zoneCreate(zoneCreate, opts) {
      return this.zoneCreateWithHttpInfo(zoneCreate, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete
     * @param {String} zoneId ID of zone
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    zoneDeleteWithHttpInfo(zoneId) {
      let postBody = null;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling zoneDelete");
      }

      let pathParams = {
        'zoneId': zoneId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/zone/{zoneId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete
     * @param {String} zoneId ID of zone
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    zoneDelete(zoneId) {
      return this.zoneDeleteWithHttpInfo(zoneId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights/:identity
     * @param {String} zoneId ID of zone
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Zone} and HTTP response
     */
    zoneDeleteAccessrightsIdentityWithHttpInfo(zoneId, identity) {
      let postBody = null;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling zoneDeleteAccessrightsIdentity");
      }
      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling zoneDeleteAccessrightsIdentity");
      }

      let pathParams = {
        'zoneId': zoneId,
        'identity': identity
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Zone;
      return this.apiClient.callApi(
        '/zone/{zoneId}/accessrights/{identity}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights/:identity
     * @param {String} zoneId ID of zone
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Zone}
     */
    zoneDeleteAccessrightsIdentity(zoneId, identity) {
      return this.zoneDeleteAccessrightsIdentityWithHttpInfo(zoneId, identity)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /recordset/:recordsetId
     * @param {String} zoneId ID of zone
     * @param {String} recordsetId recordsetId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Zone} and HTTP response
     */
    zoneDeleteRecordsetRecordsetIdWithHttpInfo(zoneId, recordsetId) {
      let postBody = null;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling zoneDeleteRecordsetRecordsetId");
      }
      // verify the required parameter 'recordsetId' is set
      if (recordsetId === undefined || recordsetId === null) {
        throw new Error("Missing the required parameter 'recordsetId' when calling zoneDeleteRecordsetRecordsetId");
      }

      let pathParams = {
        'zoneId': zoneId,
        'recordsetId': recordsetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Zone;
      return this.apiClient.callApi(
        '/zone/{zoneId}/recordset/{recordsetId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /recordset/:recordsetId
     * @param {String} zoneId ID of zone
     * @param {String} recordsetId recordsetId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Zone}
     */
    zoneDeleteRecordsetRecordsetId(zoneId, recordsetId) {
      return this.zoneDeleteRecordsetRecordsetIdWithHttpInfo(zoneId, recordsetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag/:key
     * @param {String} zoneId ID of zone
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    zoneDeleteTagKeyWithHttpInfo(zoneId, key) {
      let postBody = null;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling zoneDeleteTagKey");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling zoneDeleteTagKey");
      }

      let pathParams = {
        'zoneId': zoneId,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/zone/{zoneId}/tag/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag/:key
     * @param {String} zoneId ID of zone
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    zoneDeleteTagKey(zoneId, key) {
      return this.zoneDeleteTagKeyWithHttpInfo(zoneId, key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /recordset/:recordsetId
     * @param {String} zoneId ID of zone
     * @param {String} recordsetId recordsetId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ZoneRecordset} and HTTP response
     */
    zoneGetRecordsetRecordsetIdWithHttpInfo(zoneId, recordsetId) {
      let postBody = null;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling zoneGetRecordsetRecordsetId");
      }
      // verify the required parameter 'recordsetId' is set
      if (recordsetId === undefined || recordsetId === null) {
        throw new Error("Missing the required parameter 'recordsetId' when calling zoneGetRecordsetRecordsetId");
      }

      let pathParams = {
        'zoneId': zoneId,
        'recordsetId': recordsetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ZoneRecordset;
      return this.apiClient.callApi(
        '/zone/{zoneId}/recordset/{recordsetId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /recordset/:recordsetId
     * @param {String} zoneId ID of zone
     * @param {String} recordsetId recordsetId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ZoneRecordset}
     */
    zoneGetRecordsetRecordsetId(zoneId, recordsetId) {
      return this.zoneGetRecordsetRecordsetIdWithHttpInfo(zoneId, recordsetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services/:serviceId
     * @param {String} zoneId ID of zone
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ZoneServices} and HTTP response
     */
    zoneGetServicesServiceIdWithHttpInfo(zoneId, serviceId) {
      let postBody = null;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling zoneGetServicesServiceId");
      }
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling zoneGetServicesServiceId");
      }

      let pathParams = {
        'zoneId': zoneId,
        'serviceId': serviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ZoneServices;
      return this.apiClient.callApi(
        '/zone/{zoneId}/services/{serviceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /services/:serviceId
     * @param {String} zoneId ID of zone
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ZoneServices}
     */
    zoneGetServicesServiceId(zoneId, serviceId) {
      return this.zoneGetServicesServiceIdWithHttpInfo(zoneId, serviceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} zoneId ID of zone
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    zoneGetTagWithHttpInfo(zoneId) {
      let postBody = null;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling zoneGetTag");
      }

      let pathParams = {
        'zoneId': zoneId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/zone/{zoneId}/tag', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} zoneId ID of zone
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    zoneGetTag(zoneId) {
      return this.zoneGetTagWithHttpInfo(zoneId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List
     * List zone
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @param {Object.<String, {String: String}>} opts.tag Filter by tag
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Zone>} and HTTP response
     */
    zoneListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'tag': opts['tag']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Zone];
      return this.apiClient.callApi(
        '/zone', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List
     * List zone
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @param {Object.<String, {String: String}>} opts.tag Filter by tag
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Zone>}
     */
    zoneList(opts) {
      return this.zoneListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} zoneId ID of zone
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    zoneListAccessrightsWithHttpInfo(zoneId) {
      let postBody = null;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling zoneListAccessrights");
      }

      let pathParams = {
        'zoneId': zoneId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/zone/{zoneId}/accessrights', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights
     * @param {String} zoneId ID of zone
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    zoneListAccessrights(zoneId) {
      return this.zoneListAccessrightsWithHttpInfo(zoneId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /queue
     * @param {String} zoneId ID of zone
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit $limit
     * @param {Number} opts.skip $skip
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Event>} and HTTP response
     */
    zoneListQueueWithHttpInfo(zoneId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling zoneListQueue");
      }

      let pathParams = {
        'zoneId': zoneId
      };
      let queryParams = {
        '$limit': opts['limit'],
        '$skip': opts['skip']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Event];
      return this.apiClient.callApi(
        '/zone/{zoneId}/queue', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /queue
     * @param {String} zoneId ID of zone
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit $limit
     * @param {Number} opts.skip $skip
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Event>}
     */
    zoneListQueue(zoneId, opts) {
      return this.zoneListQueueWithHttpInfo(zoneId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /recordset
     * @param {String} zoneId ID of zone
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ZoneRecordset>} and HTTP response
     */
    zoneListRecordsetWithHttpInfo(zoneId) {
      let postBody = null;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling zoneListRecordset");
      }

      let pathParams = {
        'zoneId': zoneId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ZoneRecordset];
      return this.apiClient.callApi(
        '/zone/{zoneId}/recordset', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /recordset
     * @param {String} zoneId ID of zone
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ZoneRecordset>}
     */
    zoneListRecordset(zoneId) {
      return this.zoneListRecordsetWithHttpInfo(zoneId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /recordset/:recordsetId/record
     * @param {String} zoneId ID of zone
     * @param {String} recordsetId recordsetId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ZoneRecordsetRecord>} and HTTP response
     */
    zoneListRecordsetRecordsetIdrecordWithHttpInfo(zoneId, recordsetId) {
      let postBody = null;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling zoneListRecordsetRecordsetIdrecord");
      }
      // verify the required parameter 'recordsetId' is set
      if (recordsetId === undefined || recordsetId === null) {
        throw new Error("Missing the required parameter 'recordsetId' when calling zoneListRecordsetRecordsetIdrecord");
      }

      let pathParams = {
        'zoneId': zoneId,
        'recordsetId': recordsetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ZoneRecordsetRecord];
      return this.apiClient.callApi(
        '/zone/{zoneId}/recordset/{recordsetId}/record', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /recordset/:recordsetId/record
     * @param {String} zoneId ID of zone
     * @param {String} recordsetId recordsetId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ZoneRecordsetRecord>}
     */
    zoneListRecordsetRecordsetIdrecord(zoneId, recordsetId) {
      return this.zoneListRecordsetRecordsetIdrecordWithHttpInfo(zoneId, recordsetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services
     * @param {String} zoneId ID of zone
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ZoneServices>} and HTTP response
     */
    zoneListServicesWithHttpInfo(zoneId) {
      let postBody = null;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling zoneListServices");
      }

      let pathParams = {
        'zoneId': zoneId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ZoneServices];
      return this.apiClient.callApi(
        '/zone/{zoneId}/services', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /services
     * @param {String} zoneId ID of zone
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ZoneServices>}
     */
    zoneListServices(zoneId) {
      return this.zoneListServicesWithHttpInfo(zoneId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /recordset/:recordsetId
     * @param {String} zoneId ID of zone
     * @param {String} recordsetId recordsetId
     * @param {module:model/ZonePatchRecordsetRecordsetId} zonePatchRecordsetRecordsetId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ZoneRecordset} and HTTP response
     */
    zonePatchRecordsetRecordsetIdWithHttpInfo(zoneId, recordsetId, zonePatchRecordsetRecordsetId) {
      let postBody = zonePatchRecordsetRecordsetId;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling zonePatchRecordsetRecordsetId");
      }
      // verify the required parameter 'recordsetId' is set
      if (recordsetId === undefined || recordsetId === null) {
        throw new Error("Missing the required parameter 'recordsetId' when calling zonePatchRecordsetRecordsetId");
      }
      // verify the required parameter 'zonePatchRecordsetRecordsetId' is set
      if (zonePatchRecordsetRecordsetId === undefined || zonePatchRecordsetRecordsetId === null) {
        throw new Error("Missing the required parameter 'zonePatchRecordsetRecordsetId' when calling zonePatchRecordsetRecordsetId");
      }

      let pathParams = {
        'zoneId': zoneId,
        'recordsetId': recordsetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ZoneRecordset;
      return this.apiClient.callApi(
        '/zone/{zoneId}/recordset/{recordsetId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /recordset/:recordsetId
     * @param {String} zoneId ID of zone
     * @param {String} recordsetId recordsetId
     * @param {module:model/ZonePatchRecordsetRecordsetId} zonePatchRecordsetRecordsetId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ZoneRecordset}
     */
    zonePatchRecordsetRecordsetId(zoneId, recordsetId, zonePatchRecordsetRecordsetId) {
      return this.zonePatchRecordsetRecordsetIdWithHttpInfo(zoneId, recordsetId, zonePatchRecordsetRecordsetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} zoneId ID of zone
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    zonePatchTagWithHttpInfo(zoneId, requestBody) {
      let postBody = requestBody;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling zonePatchTag");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling zonePatchTag");
      }

      let pathParams = {
        'zoneId': zoneId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/zone/{zoneId}/tag', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} zoneId ID of zone
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    zonePatchTag(zoneId, requestBody) {
      return this.zonePatchTagWithHttpInfo(zoneId, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} zoneId ID of zone
     * @param {module:model/ZonePostAccessrights} zonePostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Zone} and HTTP response
     */
    zonePostAccessrightsWithHttpInfo(zoneId, zonePostAccessrights) {
      let postBody = zonePostAccessrights;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling zonePostAccessrights");
      }
      // verify the required parameter 'zonePostAccessrights' is set
      if (zonePostAccessrights === undefined || zonePostAccessrights === null) {
        throw new Error("Missing the required parameter 'zonePostAccessrights' when calling zonePostAccessrights");
      }

      let pathParams = {
        'zoneId': zoneId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Zone;
      return this.apiClient.callApi(
        '/zone/{zoneId}/accessrights', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights
     * @param {String} zoneId ID of zone
     * @param {module:model/ZonePostAccessrights} zonePostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Zone}
     */
    zonePostAccessrights(zoneId, zonePostAccessrights) {
      return this.zonePostAccessrightsWithHttpInfo(zoneId, zonePostAccessrights)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /recordset
     * @param {String} zoneId ID of zone
     * @param {module:model/ZonePostRecordset} zonePostRecordset 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ZoneRecordset} and HTTP response
     */
    zonePostRecordsetWithHttpInfo(zoneId, zonePostRecordset) {
      let postBody = zonePostRecordset;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling zonePostRecordset");
      }
      // verify the required parameter 'zonePostRecordset' is set
      if (zonePostRecordset === undefined || zonePostRecordset === null) {
        throw new Error("Missing the required parameter 'zonePostRecordset' when calling zonePostRecordset");
      }

      let pathParams = {
        'zoneId': zoneId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ZoneRecordset;
      return this.apiClient.callApi(
        '/zone/{zoneId}/recordset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /recordset
     * @param {String} zoneId ID of zone
     * @param {module:model/ZonePostRecordset} zonePostRecordset 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ZoneRecordset}
     */
    zonePostRecordset(zoneId, zonePostRecordset) {
      return this.zonePostRecordsetWithHttpInfo(zoneId, zonePostRecordset)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /recordset/:recordsetId/record
     * @param {String} zoneId ID of zone
     * @param {String} recordsetId recordsetId
     * @param {Array.<Object>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ZoneRecordsetRecord} and HTTP response
     */
    zonePutRecordsetRecordsetIdrecordWithHttpInfo(zoneId, recordsetId, requestBody) {
      let postBody = requestBody;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling zonePutRecordsetRecordsetIdrecord");
      }
      // verify the required parameter 'recordsetId' is set
      if (recordsetId === undefined || recordsetId === null) {
        throw new Error("Missing the required parameter 'recordsetId' when calling zonePutRecordsetRecordsetIdrecord");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling zonePutRecordsetRecordsetIdrecord");
      }

      let pathParams = {
        'zoneId': zoneId,
        'recordsetId': recordsetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ZoneRecordsetRecord;
      return this.apiClient.callApi(
        '/zone/{zoneId}/recordset/{recordsetId}/record', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /recordset/:recordsetId/record
     * @param {String} zoneId ID of zone
     * @param {String} recordsetId recordsetId
     * @param {Array.<Object>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ZoneRecordsetRecord}
     */
    zonePutRecordsetRecordsetIdrecord(zoneId, recordsetId, requestBody) {
      return this.zonePutRecordsetRecordsetIdrecordWithHttpInfo(zoneId, recordsetId, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} zoneId ID of zone
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    zonePutTagWithHttpInfo(zoneId, requestBody) {
      let postBody = requestBody;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling zonePutTag");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling zonePutTag");
      }

      let pathParams = {
        'zoneId': zoneId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/zone/{zoneId}/tag', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} zoneId ID of zone
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    zonePutTag(zoneId, requestBody) {
      return this.zonePutTagWithHttpInfo(zoneId, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get
     * Returns a single zone
     * @param {String} zoneId ID of zone
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Zone} and HTTP response
     */
    zoneShowWithHttpInfo(zoneId) {
      let postBody = null;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling zoneShow");
      }

      let pathParams = {
        'zoneId': zoneId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Zone;
      return this.apiClient.callApi(
        '/zone/{zoneId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get
     * Returns a single zone
     * @param {String} zoneId ID of zone
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Zone}
     */
    zoneShow(zoneId) {
      return this.zoneShowWithHttpInfo(zoneId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update
     * Returns modified zone
     * @param {String} zoneId ID of zone
     * @param {module:model/ZoneUpdate} zoneUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Zone} and HTTP response
     */
    zoneUpdateWithHttpInfo(zoneId, zoneUpdate) {
      let postBody = zoneUpdate;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling zoneUpdate");
      }
      // verify the required parameter 'zoneUpdate' is set
      if (zoneUpdate === undefined || zoneUpdate === null) {
        throw new Error("Missing the required parameter 'zoneUpdate' when calling zoneUpdate");
      }

      let pathParams = {
        'zoneId': zoneId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Zone;
      return this.apiClient.callApi(
        '/zone/{zoneId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update
     * Returns modified zone
     * @param {String} zoneId ID of zone
     * @param {module:model/ZoneUpdate} zoneUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Zone}
     */
    zoneUpdate(zoneId, zoneUpdate) {
      return this.zoneUpdateWithHttpInfo(zoneId, zoneUpdate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
