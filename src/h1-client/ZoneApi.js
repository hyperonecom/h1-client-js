/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Event', 'model/InlineResponse400', 'model/Zone', 'model/ZoneCreate', 'model/ZonePatchRecordsetRecordsetId', 'model/ZonePostAccessrights', 'model/ZonePostRecordset', 'model/ZoneRecordset', 'model/ZoneRecordsetRecord', 'model/ZoneServices', 'model/ZoneUpdate'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Event'), require('../model/InlineResponse400'), require('../model/Zone'), require('../model/ZoneCreate'), require('../model/ZonePatchRecordsetRecordsetId'), require('../model/ZonePostAccessrights'), require('../model/ZonePostRecordset'), require('../model/ZoneRecordset'), require('../model/ZoneRecordsetRecord'), require('../model/ZoneServices'), require('../model/ZoneUpdate'));
  } else {
    // Browser globals (root is window)
    if (!root.HyperoneClient) {
      root.HyperoneClient = {};
    }
    root.HyperoneClient.ZoneApi = factory(root.HyperoneClient.ApiClient, root.HyperoneClient.Event, root.HyperoneClient.InlineResponse400, root.HyperoneClient.Zone, root.HyperoneClient.ZoneCreate, root.HyperoneClient.ZonePatchRecordsetRecordsetId, root.HyperoneClient.ZonePostAccessrights, root.HyperoneClient.ZonePostRecordset, root.HyperoneClient.ZoneRecordset, root.HyperoneClient.ZoneRecordsetRecord, root.HyperoneClient.ZoneServices, root.HyperoneClient.ZoneUpdate);
  }
}(this, function(ApiClient, Event, InlineResponse400, Zone, ZoneCreate, ZonePatchRecordsetRecordsetId, ZonePostAccessrights, ZonePostRecordset, ZoneRecordset, ZoneRecordsetRecord, ZoneServices, ZoneUpdate) {
  'use strict';

  /**
   * Zone service.
   * @module h1-client/ZoneApi
   * @version 0.0.3
   */

  /**
   * Constructs a new ZoneApi. 
   * @alias module:h1-client/ZoneApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create
     * Create zone
     * @param {module:model/ZoneCreate} zoneCreate 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Zone} and HTTP response
     */
    this.zoneCreateWithHttpInfo = function(zoneCreate, opts) {
      opts = opts || {};
      var postBody = zoneCreate;
      // verify the required parameter 'zoneCreate' is set
      if (zoneCreate === undefined || zoneCreate === null) {
        throw new Error("Missing the required parameter 'zoneCreate' when calling zoneCreate");
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'x-idempotency-key': opts['xIdempotencyKey']
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Zone;
      return this.apiClient.callApi(
        '/zone', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create
     * Create zone
     * @param {module:model/ZoneCreate} zoneCreate 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Zone}
     */
    this.zoneCreate = function(zoneCreate, opts) {
      return this.zoneCreateWithHttpInfo(zoneCreate, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete
     * @param {String} zoneId ID of zone
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.zoneDeleteWithHttpInfo = function(zoneId) {
      var postBody = null;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling zoneDelete");
      }

      var pathParams = {
        'zoneId': zoneId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;
      return this.apiClient.callApi(
        '/zone/{zoneId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete
     * @param {String} zoneId ID of zone
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.zoneDelete = function(zoneId) {
      return this.zoneDeleteWithHttpInfo(zoneId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights/:identity
     * @param {String} zoneId ID of zone
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Zone} and HTTP response
     */
    this.zoneDeleteAccessrightsIdentityWithHttpInfo = function(zoneId, identity) {
      var postBody = null;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling zoneDeleteAccessrightsIdentity");
      }
      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling zoneDeleteAccessrightsIdentity");
      }

      var pathParams = {
        'zoneId': zoneId,
        'identity': identity
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Zone;
      return this.apiClient.callApi(
        '/zone/{zoneId}/accessrights/{identity}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights/:identity
     * @param {String} zoneId ID of zone
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Zone}
     */
    this.zoneDeleteAccessrightsIdentity = function(zoneId, identity) {
      return this.zoneDeleteAccessrightsIdentityWithHttpInfo(zoneId, identity)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /recordset/:recordsetId
     * @param {String} zoneId ID of zone
     * @param {String} recordsetId recordsetId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Zone} and HTTP response
     */
    this.zoneDeleteRecordsetRecordsetIdWithHttpInfo = function(zoneId, recordsetId) {
      var postBody = null;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling zoneDeleteRecordsetRecordsetId");
      }
      // verify the required parameter 'recordsetId' is set
      if (recordsetId === undefined || recordsetId === null) {
        throw new Error("Missing the required parameter 'recordsetId' when calling zoneDeleteRecordsetRecordsetId");
      }

      var pathParams = {
        'zoneId': zoneId,
        'recordsetId': recordsetId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Zone;
      return this.apiClient.callApi(
        '/zone/{zoneId}/recordset/{recordsetId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /recordset/:recordsetId
     * @param {String} zoneId ID of zone
     * @param {String} recordsetId recordsetId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Zone}
     */
    this.zoneDeleteRecordsetRecordsetId = function(zoneId, recordsetId) {
      return this.zoneDeleteRecordsetRecordsetIdWithHttpInfo(zoneId, recordsetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag/:key
     * @param {String} zoneId ID of zone
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    this.zoneDeleteTagKeyWithHttpInfo = function(zoneId, key) {
      var postBody = null;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling zoneDeleteTagKey");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling zoneDeleteTagKey");
      }

      var pathParams = {
        'zoneId': zoneId,
        'key': key
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/zone/{zoneId}/tag/{key}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag/:key
     * @param {String} zoneId ID of zone
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    this.zoneDeleteTagKey = function(zoneId, key) {
      return this.zoneDeleteTagKeyWithHttpInfo(zoneId, key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /recordset/:recordsetId
     * @param {String} zoneId ID of zone
     * @param {String} recordsetId recordsetId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ZoneRecordset} and HTTP response
     */
    this.zoneGetRecordsetRecordsetIdWithHttpInfo = function(zoneId, recordsetId) {
      var postBody = null;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling zoneGetRecordsetRecordsetId");
      }
      // verify the required parameter 'recordsetId' is set
      if (recordsetId === undefined || recordsetId === null) {
        throw new Error("Missing the required parameter 'recordsetId' when calling zoneGetRecordsetRecordsetId");
      }

      var pathParams = {
        'zoneId': zoneId,
        'recordsetId': recordsetId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ZoneRecordset;
      return this.apiClient.callApi(
        '/zone/{zoneId}/recordset/{recordsetId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /recordset/:recordsetId
     * @param {String} zoneId ID of zone
     * @param {String} recordsetId recordsetId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ZoneRecordset}
     */
    this.zoneGetRecordsetRecordsetId = function(zoneId, recordsetId) {
      return this.zoneGetRecordsetRecordsetIdWithHttpInfo(zoneId, recordsetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services/:serviceId
     * @param {String} zoneId ID of zone
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ZoneServices} and HTTP response
     */
    this.zoneGetServicesServiceIdWithHttpInfo = function(zoneId, serviceId) {
      var postBody = null;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling zoneGetServicesServiceId");
      }
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling zoneGetServicesServiceId");
      }

      var pathParams = {
        'zoneId': zoneId,
        'serviceId': serviceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ZoneServices;
      return this.apiClient.callApi(
        '/zone/{zoneId}/services/{serviceId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /services/:serviceId
     * @param {String} zoneId ID of zone
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ZoneServices}
     */
    this.zoneGetServicesServiceId = function(zoneId, serviceId) {
      return this.zoneGetServicesServiceIdWithHttpInfo(zoneId, serviceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} zoneId ID of zone
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    this.zoneGetTagWithHttpInfo = function(zoneId) {
      var postBody = null;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling zoneGetTag");
      }

      var pathParams = {
        'zoneId': zoneId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/zone/{zoneId}/tag', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} zoneId ID of zone
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    this.zoneGetTag = function(zoneId) {
      return this.zoneGetTagWithHttpInfo(zoneId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List
     * List zone
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @param {Object.<String, {String: String}>} opts.tag Filter by tag
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Zone>} and HTTP response
     */
    this.zoneListWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
        'name': opts['name'],
        'tag': opts['tag'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Zone];
      return this.apiClient.callApi(
        '/zone', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List
     * List zone
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @param {Object.<String, {String: String}>} opts.tag Filter by tag
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Zone>}
     */
    this.zoneList = function(opts) {
      return this.zoneListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} zoneId ID of zone
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    this.zoneListAccessrightsWithHttpInfo = function(zoneId) {
      var postBody = null;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling zoneListAccessrights");
      }

      var pathParams = {
        'zoneId': zoneId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['String'];
      return this.apiClient.callApi(
        '/zone/{zoneId}/accessrights', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights
     * @param {String} zoneId ID of zone
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    this.zoneListAccessrights = function(zoneId) {
      return this.zoneListAccessrightsWithHttpInfo(zoneId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /queue
     * @param {String} zoneId ID of zone
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit $limit (default to 100)
     * @param {Number} opts.skip $skip
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Event>} and HTTP response
     */
    this.zoneListQueueWithHttpInfo = function(zoneId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling zoneListQueue");
      }

      var pathParams = {
        'zoneId': zoneId
      };
      var queryParams = {
        '$limit': opts['limit'],
        '$skip': opts['skip'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Event];
      return this.apiClient.callApi(
        '/zone/{zoneId}/queue', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /queue
     * @param {String} zoneId ID of zone
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit $limit (default to 100)
     * @param {Number} opts.skip $skip
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Event>}
     */
    this.zoneListQueue = function(zoneId, opts) {
      return this.zoneListQueueWithHttpInfo(zoneId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /recordset
     * @param {String} zoneId ID of zone
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ZoneRecordset>} and HTTP response
     */
    this.zoneListRecordsetWithHttpInfo = function(zoneId) {
      var postBody = null;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling zoneListRecordset");
      }

      var pathParams = {
        'zoneId': zoneId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [ZoneRecordset];
      return this.apiClient.callApi(
        '/zone/{zoneId}/recordset', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /recordset
     * @param {String} zoneId ID of zone
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ZoneRecordset>}
     */
    this.zoneListRecordset = function(zoneId) {
      return this.zoneListRecordsetWithHttpInfo(zoneId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /recordset/:recordsetId/record
     * @param {String} zoneId ID of zone
     * @param {String} recordsetId recordsetId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ZoneRecordsetRecord>} and HTTP response
     */
    this.zoneListRecordsetRecordsetIdrecordWithHttpInfo = function(zoneId, recordsetId) {
      var postBody = null;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling zoneListRecordsetRecordsetIdrecord");
      }
      // verify the required parameter 'recordsetId' is set
      if (recordsetId === undefined || recordsetId === null) {
        throw new Error("Missing the required parameter 'recordsetId' when calling zoneListRecordsetRecordsetIdrecord");
      }

      var pathParams = {
        'zoneId': zoneId,
        'recordsetId': recordsetId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [ZoneRecordsetRecord];
      return this.apiClient.callApi(
        '/zone/{zoneId}/recordset/{recordsetId}/record', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /recordset/:recordsetId/record
     * @param {String} zoneId ID of zone
     * @param {String} recordsetId recordsetId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ZoneRecordsetRecord>}
     */
    this.zoneListRecordsetRecordsetIdrecord = function(zoneId, recordsetId) {
      return this.zoneListRecordsetRecordsetIdrecordWithHttpInfo(zoneId, recordsetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services
     * @param {String} zoneId ID of zone
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ZoneServices>} and HTTP response
     */
    this.zoneListServicesWithHttpInfo = function(zoneId) {
      var postBody = null;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling zoneListServices");
      }

      var pathParams = {
        'zoneId': zoneId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [ZoneServices];
      return this.apiClient.callApi(
        '/zone/{zoneId}/services', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /services
     * @param {String} zoneId ID of zone
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ZoneServices>}
     */
    this.zoneListServices = function(zoneId) {
      return this.zoneListServicesWithHttpInfo(zoneId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /recordset/:recordsetId
     * @param {String} zoneId ID of zone
     * @param {String} recordsetId recordsetId
     * @param {module:model/ZonePatchRecordsetRecordsetId} zonePatchRecordsetRecordsetId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ZoneRecordset} and HTTP response
     */
    this.zonePatchRecordsetRecordsetIdWithHttpInfo = function(zoneId, recordsetId, zonePatchRecordsetRecordsetId) {
      var postBody = zonePatchRecordsetRecordsetId;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling zonePatchRecordsetRecordsetId");
      }
      // verify the required parameter 'recordsetId' is set
      if (recordsetId === undefined || recordsetId === null) {
        throw new Error("Missing the required parameter 'recordsetId' when calling zonePatchRecordsetRecordsetId");
      }
      // verify the required parameter 'zonePatchRecordsetRecordsetId' is set
      if (zonePatchRecordsetRecordsetId === undefined || zonePatchRecordsetRecordsetId === null) {
        throw new Error("Missing the required parameter 'zonePatchRecordsetRecordsetId' when calling zonePatchRecordsetRecordsetId");
      }

      var pathParams = {
        'zoneId': zoneId,
        'recordsetId': recordsetId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ZoneRecordset;
      return this.apiClient.callApi(
        '/zone/{zoneId}/recordset/{recordsetId}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /recordset/:recordsetId
     * @param {String} zoneId ID of zone
     * @param {String} recordsetId recordsetId
     * @param {module:model/ZonePatchRecordsetRecordsetId} zonePatchRecordsetRecordsetId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ZoneRecordset}
     */
    this.zonePatchRecordsetRecordsetId = function(zoneId, recordsetId, zonePatchRecordsetRecordsetId) {
      return this.zonePatchRecordsetRecordsetIdWithHttpInfo(zoneId, recordsetId, zonePatchRecordsetRecordsetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} zoneId ID of zone
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    this.zonePatchTagWithHttpInfo = function(zoneId, requestBody) {
      var postBody = requestBody;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling zonePatchTag");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling zonePatchTag");
      }

      var pathParams = {
        'zoneId': zoneId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/zone/{zoneId}/tag', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} zoneId ID of zone
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    this.zonePatchTag = function(zoneId, requestBody) {
      return this.zonePatchTagWithHttpInfo(zoneId, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} zoneId ID of zone
     * @param {module:model/ZonePostAccessrights} zonePostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Zone} and HTTP response
     */
    this.zonePostAccessrightsWithHttpInfo = function(zoneId, zonePostAccessrights) {
      var postBody = zonePostAccessrights;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling zonePostAccessrights");
      }
      // verify the required parameter 'zonePostAccessrights' is set
      if (zonePostAccessrights === undefined || zonePostAccessrights === null) {
        throw new Error("Missing the required parameter 'zonePostAccessrights' when calling zonePostAccessrights");
      }

      var pathParams = {
        'zoneId': zoneId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Zone;
      return this.apiClient.callApi(
        '/zone/{zoneId}/accessrights', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights
     * @param {String} zoneId ID of zone
     * @param {module:model/ZonePostAccessrights} zonePostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Zone}
     */
    this.zonePostAccessrights = function(zoneId, zonePostAccessrights) {
      return this.zonePostAccessrightsWithHttpInfo(zoneId, zonePostAccessrights)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /recordset
     * @param {String} zoneId ID of zone
     * @param {module:model/ZonePostRecordset} zonePostRecordset 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ZoneRecordset} and HTTP response
     */
    this.zonePostRecordsetWithHttpInfo = function(zoneId, zonePostRecordset) {
      var postBody = zonePostRecordset;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling zonePostRecordset");
      }
      // verify the required parameter 'zonePostRecordset' is set
      if (zonePostRecordset === undefined || zonePostRecordset === null) {
        throw new Error("Missing the required parameter 'zonePostRecordset' when calling zonePostRecordset");
      }

      var pathParams = {
        'zoneId': zoneId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ZoneRecordset;
      return this.apiClient.callApi(
        '/zone/{zoneId}/recordset', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /recordset
     * @param {String} zoneId ID of zone
     * @param {module:model/ZonePostRecordset} zonePostRecordset 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ZoneRecordset}
     */
    this.zonePostRecordset = function(zoneId, zonePostRecordset) {
      return this.zonePostRecordsetWithHttpInfo(zoneId, zonePostRecordset)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /recordset/:recordsetId/record
     * @param {String} zoneId ID of zone
     * @param {String} recordsetId recordsetId
     * @param {Array.<Object>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ZoneRecordsetRecord} and HTTP response
     */
    this.zonePutRecordsetRecordsetIdrecordWithHttpInfo = function(zoneId, recordsetId, requestBody) {
      var postBody = requestBody;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling zonePutRecordsetRecordsetIdrecord");
      }
      // verify the required parameter 'recordsetId' is set
      if (recordsetId === undefined || recordsetId === null) {
        throw new Error("Missing the required parameter 'recordsetId' when calling zonePutRecordsetRecordsetIdrecord");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling zonePutRecordsetRecordsetIdrecord");
      }

      var pathParams = {
        'zoneId': zoneId,
        'recordsetId': recordsetId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ZoneRecordsetRecord;
      return this.apiClient.callApi(
        '/zone/{zoneId}/recordset/{recordsetId}/record', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /recordset/:recordsetId/record
     * @param {String} zoneId ID of zone
     * @param {String} recordsetId recordsetId
     * @param {Array.<Object>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ZoneRecordsetRecord}
     */
    this.zonePutRecordsetRecordsetIdrecord = function(zoneId, recordsetId, requestBody) {
      return this.zonePutRecordsetRecordsetIdrecordWithHttpInfo(zoneId, recordsetId, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} zoneId ID of zone
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    this.zonePutTagWithHttpInfo = function(zoneId, requestBody) {
      var postBody = requestBody;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling zonePutTag");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling zonePutTag");
      }

      var pathParams = {
        'zoneId': zoneId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/zone/{zoneId}/tag', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} zoneId ID of zone
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    this.zonePutTag = function(zoneId, requestBody) {
      return this.zonePutTagWithHttpInfo(zoneId, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get
     * Returns a single zone
     * @param {String} zoneId ID of zone
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Zone} and HTTP response
     */
    this.zoneShowWithHttpInfo = function(zoneId) {
      var postBody = null;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling zoneShow");
      }

      var pathParams = {
        'zoneId': zoneId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Zone;
      return this.apiClient.callApi(
        '/zone/{zoneId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get
     * Returns a single zone
     * @param {String} zoneId ID of zone
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Zone}
     */
    this.zoneShow = function(zoneId) {
      return this.zoneShowWithHttpInfo(zoneId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update
     * Returns modified zone
     * @param {String} zoneId ID of zone
     * @param {module:model/ZoneUpdate} zoneUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Zone} and HTTP response
     */
    this.zoneUpdateWithHttpInfo = function(zoneId, zoneUpdate) {
      var postBody = zoneUpdate;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling zoneUpdate");
      }
      // verify the required parameter 'zoneUpdate' is set
      if (zoneUpdate === undefined || zoneUpdate === null) {
        throw new Error("Missing the required parameter 'zoneUpdate' when calling zoneUpdate");
      }

      var pathParams = {
        'zoneId': zoneId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Zone;
      return this.apiClient.callApi(
        '/zone/{zoneId}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update
     * Returns modified zone
     * @param {String} zoneId ID of zone
     * @param {module:model/ZoneUpdate} zoneUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Zone}
     */
    this.zoneUpdate = function(zoneId, zoneUpdate) {
      return this.zoneUpdateWithHttpInfo(zoneId, zoneUpdate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
