/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Event from '../model/Event';
import InlineResponse400 from '../model/InlineResponse400';
import Vmhost from '../model/Vmhost';
import VmhostPostAccessrights from '../model/VmhostPostAccessrights';
import VmhostServices from '../model/VmhostServices';

/**
* Vmhost service.
* @module h1-client/VmhostApi
* @version 0.0.3
*/
export default class VmhostApi {

    /**
    * Constructs a new VmhostApi. 
    * @alias module:h1-client/VmhostApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * /accessrights/:identity
     * @param {String} vmhostId ID of vmhost
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vmhost} and HTTP response
     */
    vmhostDeleteAccessrightsIdentityWithHttpInfo(vmhostId, identity) {
      let postBody = null;
      // verify the required parameter 'vmhostId' is set
      if (vmhostId === undefined || vmhostId === null) {
        throw new Error("Missing the required parameter 'vmhostId' when calling vmhostDeleteAccessrightsIdentity");
      }
      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling vmhostDeleteAccessrightsIdentity");
      }

      let pathParams = {
        'vmhostId': vmhostId,
        'identity': identity
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Vmhost;
      return this.apiClient.callApi(
        '/vmhost/{vmhostId}/accessrights/{identity}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights/:identity
     * @param {String} vmhostId ID of vmhost
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vmhost}
     */
    vmhostDeleteAccessrightsIdentity(vmhostId, identity) {
      return this.vmhostDeleteAccessrightsIdentityWithHttpInfo(vmhostId, identity)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag/:key
     * @param {String} vmhostId ID of vmhost
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    vmhostDeleteTagKeyWithHttpInfo(vmhostId, key) {
      let postBody = null;
      // verify the required parameter 'vmhostId' is set
      if (vmhostId === undefined || vmhostId === null) {
        throw new Error("Missing the required parameter 'vmhostId' when calling vmhostDeleteTagKey");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling vmhostDeleteTagKey");
      }

      let pathParams = {
        'vmhostId': vmhostId,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/vmhost/{vmhostId}/tag/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag/:key
     * @param {String} vmhostId ID of vmhost
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    vmhostDeleteTagKey(vmhostId, key) {
      return this.vmhostDeleteTagKeyWithHttpInfo(vmhostId, key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services/:serviceId
     * @param {String} vmhostId ID of vmhost
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VmhostServices} and HTTP response
     */
    vmhostGetServicesServiceIdWithHttpInfo(vmhostId, serviceId) {
      let postBody = null;
      // verify the required parameter 'vmhostId' is set
      if (vmhostId === undefined || vmhostId === null) {
        throw new Error("Missing the required parameter 'vmhostId' when calling vmhostGetServicesServiceId");
      }
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling vmhostGetServicesServiceId");
      }

      let pathParams = {
        'vmhostId': vmhostId,
        'serviceId': serviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VmhostServices;
      return this.apiClient.callApi(
        '/vmhost/{vmhostId}/services/{serviceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /services/:serviceId
     * @param {String} vmhostId ID of vmhost
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VmhostServices}
     */
    vmhostGetServicesServiceId(vmhostId, serviceId) {
      return this.vmhostGetServicesServiceIdWithHttpInfo(vmhostId, serviceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} vmhostId ID of vmhost
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    vmhostGetTagWithHttpInfo(vmhostId) {
      let postBody = null;
      // verify the required parameter 'vmhostId' is set
      if (vmhostId === undefined || vmhostId === null) {
        throw new Error("Missing the required parameter 'vmhostId' when calling vmhostGetTag");
      }

      let pathParams = {
        'vmhostId': vmhostId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/vmhost/{vmhostId}/tag', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} vmhostId ID of vmhost
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    vmhostGetTag(vmhostId) {
      return this.vmhostGetTagWithHttpInfo(vmhostId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List
     * List vmhost
     * @param {Object} opts Optional parameters
     * @param {String} opts.enabledServices Filter by enabledServices
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Vmhost>} and HTTP response
     */
    vmhostListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'enabledServices': opts['enabledServices']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Vmhost];
      return this.apiClient.callApi(
        '/vmhost', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List
     * List vmhost
     * @param {Object} opts Optional parameters
     * @param {String} opts.enabledServices Filter by enabledServices
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Vmhost>}
     */
    vmhostList(opts) {
      return this.vmhostListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} vmhostId ID of vmhost
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    vmhostListAccessrightsWithHttpInfo(vmhostId) {
      let postBody = null;
      // verify the required parameter 'vmhostId' is set
      if (vmhostId === undefined || vmhostId === null) {
        throw new Error("Missing the required parameter 'vmhostId' when calling vmhostListAccessrights");
      }

      let pathParams = {
        'vmhostId': vmhostId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/vmhost/{vmhostId}/accessrights', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights
     * @param {String} vmhostId ID of vmhost
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    vmhostListAccessrights(vmhostId) {
      return this.vmhostListAccessrightsWithHttpInfo(vmhostId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /queue
     * @param {String} vmhostId ID of vmhost
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit $limit
     * @param {Number} opts.skip $skip
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Event>} and HTTP response
     */
    vmhostListQueueWithHttpInfo(vmhostId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'vmhostId' is set
      if (vmhostId === undefined || vmhostId === null) {
        throw new Error("Missing the required parameter 'vmhostId' when calling vmhostListQueue");
      }

      let pathParams = {
        'vmhostId': vmhostId
      };
      let queryParams = {
        '$limit': opts['limit'],
        '$skip': opts['skip']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Event];
      return this.apiClient.callApi(
        '/vmhost/{vmhostId}/queue', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /queue
     * @param {String} vmhostId ID of vmhost
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit $limit
     * @param {Number} opts.skip $skip
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Event>}
     */
    vmhostListQueue(vmhostId, opts) {
      return this.vmhostListQueueWithHttpInfo(vmhostId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services
     * @param {String} vmhostId ID of vmhost
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/VmhostServices>} and HTTP response
     */
    vmhostListServicesWithHttpInfo(vmhostId) {
      let postBody = null;
      // verify the required parameter 'vmhostId' is set
      if (vmhostId === undefined || vmhostId === null) {
        throw new Error("Missing the required parameter 'vmhostId' when calling vmhostListServices");
      }

      let pathParams = {
        'vmhostId': vmhostId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [VmhostServices];
      return this.apiClient.callApi(
        '/vmhost/{vmhostId}/services', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /services
     * @param {String} vmhostId ID of vmhost
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/VmhostServices>}
     */
    vmhostListServices(vmhostId) {
      return this.vmhostListServicesWithHttpInfo(vmhostId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} vmhostId ID of vmhost
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    vmhostPatchTagWithHttpInfo(vmhostId, requestBody) {
      let postBody = requestBody;
      // verify the required parameter 'vmhostId' is set
      if (vmhostId === undefined || vmhostId === null) {
        throw new Error("Missing the required parameter 'vmhostId' when calling vmhostPatchTag");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling vmhostPatchTag");
      }

      let pathParams = {
        'vmhostId': vmhostId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/vmhost/{vmhostId}/tag', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} vmhostId ID of vmhost
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    vmhostPatchTag(vmhostId, requestBody) {
      return this.vmhostPatchTagWithHttpInfo(vmhostId, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} vmhostId ID of vmhost
     * @param {module:model/VmhostPostAccessrights} vmhostPostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vmhost} and HTTP response
     */
    vmhostPostAccessrightsWithHttpInfo(vmhostId, vmhostPostAccessrights) {
      let postBody = vmhostPostAccessrights;
      // verify the required parameter 'vmhostId' is set
      if (vmhostId === undefined || vmhostId === null) {
        throw new Error("Missing the required parameter 'vmhostId' when calling vmhostPostAccessrights");
      }
      // verify the required parameter 'vmhostPostAccessrights' is set
      if (vmhostPostAccessrights === undefined || vmhostPostAccessrights === null) {
        throw new Error("Missing the required parameter 'vmhostPostAccessrights' when calling vmhostPostAccessrights");
      }

      let pathParams = {
        'vmhostId': vmhostId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Vmhost;
      return this.apiClient.callApi(
        '/vmhost/{vmhostId}/accessrights', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights
     * @param {String} vmhostId ID of vmhost
     * @param {module:model/VmhostPostAccessrights} vmhostPostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vmhost}
     */
    vmhostPostAccessrights(vmhostId, vmhostPostAccessrights) {
      return this.vmhostPostAccessrightsWithHttpInfo(vmhostId, vmhostPostAccessrights)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} vmhostId ID of vmhost
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    vmhostPutTagWithHttpInfo(vmhostId, requestBody) {
      let postBody = requestBody;
      // verify the required parameter 'vmhostId' is set
      if (vmhostId === undefined || vmhostId === null) {
        throw new Error("Missing the required parameter 'vmhostId' when calling vmhostPutTag");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling vmhostPutTag");
      }

      let pathParams = {
        'vmhostId': vmhostId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/vmhost/{vmhostId}/tag', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} vmhostId ID of vmhost
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    vmhostPutTag(vmhostId, requestBody) {
      return this.vmhostPutTagWithHttpInfo(vmhostId, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get
     * Returns a single vmhost
     * @param {String} vmhostId ID of vmhost
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vmhost} and HTTP response
     */
    vmhostShowWithHttpInfo(vmhostId) {
      let postBody = null;
      // verify the required parameter 'vmhostId' is set
      if (vmhostId === undefined || vmhostId === null) {
        throw new Error("Missing the required parameter 'vmhostId' when calling vmhostShow");
      }

      let pathParams = {
        'vmhostId': vmhostId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Vmhost;
      return this.apiClient.callApi(
        '/vmhost/{vmhostId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get
     * Returns a single vmhost
     * @param {String} vmhostId ID of vmhost
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vmhost}
     */
    vmhostShow(vmhostId) {
      return this.vmhostShowWithHttpInfo(vmhostId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
