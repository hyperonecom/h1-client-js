/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Event from '../model/Event';
import InlineResponse400 from '../model/InlineResponse400';
import Iso from '../model/Iso';
import IsoActionTransfer from '../model/IsoActionTransfer';
import IsoCreate from '../model/IsoCreate';
import IsoPostAccessrights from '../model/IsoPostAccessrights';
import IsoServices from '../model/IsoServices';
import IsoUpdate from '../model/IsoUpdate';

/**
* Iso service.
* @module h1-client/IsoApi
* @version 0.0.3
*/
export default class IsoApi {

    /**
    * Constructs a new IsoApi. 
    * @alias module:h1-client/IsoApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * /actions/transfer
     * Action transfer
     * @param {String} isoId ID of iso
     * @param {module:model/IsoActionTransfer} isoActionTransfer 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Iso} and HTTP response
     */
    isoActionTransferWithHttpInfo(isoId, isoActionTransfer, opts) {
      opts = opts || {};
      let postBody = isoActionTransfer;
      // verify the required parameter 'isoId' is set
      if (isoId === undefined || isoId === null) {
        throw new Error("Missing the required parameter 'isoId' when calling isoActionTransfer");
      }
      // verify the required parameter 'isoActionTransfer' is set
      if (isoActionTransfer === undefined || isoActionTransfer === null) {
        throw new Error("Missing the required parameter 'isoActionTransfer' when calling isoActionTransfer");
      }

      let pathParams = {
        'isoId': isoId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-idempotency-key': opts['xIdempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Iso;
      return this.apiClient.callApi(
        '/iso/{isoId}/actions/transfer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /actions/transfer
     * Action transfer
     * @param {String} isoId ID of iso
     * @param {module:model/IsoActionTransfer} isoActionTransfer 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Iso}
     */
    isoActionTransfer(isoId, isoActionTransfer, opts) {
      return this.isoActionTransferWithHttpInfo(isoId, isoActionTransfer, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create
     * Create iso
     * @param {module:model/IsoCreate} isoCreate 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Iso} and HTTP response
     */
    isoCreateWithHttpInfo(isoCreate, opts) {
      opts = opts || {};
      let postBody = isoCreate;
      // verify the required parameter 'isoCreate' is set
      if (isoCreate === undefined || isoCreate === null) {
        throw new Error("Missing the required parameter 'isoCreate' when calling isoCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-idempotency-key': opts['xIdempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Iso;
      return this.apiClient.callApi(
        '/iso', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create
     * Create iso
     * @param {module:model/IsoCreate} isoCreate 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Iso}
     */
    isoCreate(isoCreate, opts) {
      return this.isoCreateWithHttpInfo(isoCreate, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete
     * @param {String} isoId ID of iso
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    isoDeleteWithHttpInfo(isoId) {
      let postBody = null;
      // verify the required parameter 'isoId' is set
      if (isoId === undefined || isoId === null) {
        throw new Error("Missing the required parameter 'isoId' when calling isoDelete");
      }

      let pathParams = {
        'isoId': isoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/iso/{isoId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete
     * @param {String} isoId ID of iso
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    isoDelete(isoId) {
      return this.isoDeleteWithHttpInfo(isoId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights/:identity
     * @param {String} isoId ID of iso
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Iso} and HTTP response
     */
    isoDeleteAccessrightsIdentityWithHttpInfo(isoId, identity) {
      let postBody = null;
      // verify the required parameter 'isoId' is set
      if (isoId === undefined || isoId === null) {
        throw new Error("Missing the required parameter 'isoId' when calling isoDeleteAccessrightsIdentity");
      }
      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling isoDeleteAccessrightsIdentity");
      }

      let pathParams = {
        'isoId': isoId,
        'identity': identity
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Iso;
      return this.apiClient.callApi(
        '/iso/{isoId}/accessrights/{identity}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights/:identity
     * @param {String} isoId ID of iso
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Iso}
     */
    isoDeleteAccessrightsIdentity(isoId, identity) {
      return this.isoDeleteAccessrightsIdentityWithHttpInfo(isoId, identity)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag/:key
     * @param {String} isoId ID of iso
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    isoDeleteTagKeyWithHttpInfo(isoId, key) {
      let postBody = null;
      // verify the required parameter 'isoId' is set
      if (isoId === undefined || isoId === null) {
        throw new Error("Missing the required parameter 'isoId' when calling isoDeleteTagKey");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling isoDeleteTagKey");
      }

      let pathParams = {
        'isoId': isoId,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/iso/{isoId}/tag/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag/:key
     * @param {String} isoId ID of iso
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    isoDeleteTagKey(isoId, key) {
      return this.isoDeleteTagKeyWithHttpInfo(isoId, key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services/:serviceId
     * @param {String} isoId ID of iso
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IsoServices} and HTTP response
     */
    isoGetServicesServiceIdWithHttpInfo(isoId, serviceId) {
      let postBody = null;
      // verify the required parameter 'isoId' is set
      if (isoId === undefined || isoId === null) {
        throw new Error("Missing the required parameter 'isoId' when calling isoGetServicesServiceId");
      }
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling isoGetServicesServiceId");
      }

      let pathParams = {
        'isoId': isoId,
        'serviceId': serviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IsoServices;
      return this.apiClient.callApi(
        '/iso/{isoId}/services/{serviceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /services/:serviceId
     * @param {String} isoId ID of iso
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IsoServices}
     */
    isoGetServicesServiceId(isoId, serviceId) {
      return this.isoGetServicesServiceIdWithHttpInfo(isoId, serviceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} isoId ID of iso
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    isoGetTagWithHttpInfo(isoId) {
      let postBody = null;
      // verify the required parameter 'isoId' is set
      if (isoId === undefined || isoId === null) {
        throw new Error("Missing the required parameter 'isoId' when calling isoGetTag");
      }

      let pathParams = {
        'isoId': isoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/iso/{isoId}/tag', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} isoId ID of iso
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    isoGetTag(isoId) {
      return this.isoGetTagWithHttpInfo(isoId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List
     * List iso
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @param {Object.<String, {String: String}>} opts.tag Filter by tag
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Iso>} and HTTP response
     */
    isoListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'tag': opts['tag']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Iso];
      return this.apiClient.callApi(
        '/iso', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List
     * List iso
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @param {Object.<String, {String: String}>} opts.tag Filter by tag
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Iso>}
     */
    isoList(opts) {
      return this.isoListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} isoId ID of iso
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    isoListAccessrightsWithHttpInfo(isoId) {
      let postBody = null;
      // verify the required parameter 'isoId' is set
      if (isoId === undefined || isoId === null) {
        throw new Error("Missing the required parameter 'isoId' when calling isoListAccessrights");
      }

      let pathParams = {
        'isoId': isoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/iso/{isoId}/accessrights', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights
     * @param {String} isoId ID of iso
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    isoListAccessrights(isoId) {
      return this.isoListAccessrightsWithHttpInfo(isoId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /queue
     * @param {String} isoId ID of iso
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit $limit
     * @param {Number} opts.skip $skip
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Event>} and HTTP response
     */
    isoListQueueWithHttpInfo(isoId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'isoId' is set
      if (isoId === undefined || isoId === null) {
        throw new Error("Missing the required parameter 'isoId' when calling isoListQueue");
      }

      let pathParams = {
        'isoId': isoId
      };
      let queryParams = {
        '$limit': opts['limit'],
        '$skip': opts['skip']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Event];
      return this.apiClient.callApi(
        '/iso/{isoId}/queue', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /queue
     * @param {String} isoId ID of iso
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit $limit
     * @param {Number} opts.skip $skip
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Event>}
     */
    isoListQueue(isoId, opts) {
      return this.isoListQueueWithHttpInfo(isoId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services
     * @param {String} isoId ID of iso
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/IsoServices>} and HTTP response
     */
    isoListServicesWithHttpInfo(isoId) {
      let postBody = null;
      // verify the required parameter 'isoId' is set
      if (isoId === undefined || isoId === null) {
        throw new Error("Missing the required parameter 'isoId' when calling isoListServices");
      }

      let pathParams = {
        'isoId': isoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [IsoServices];
      return this.apiClient.callApi(
        '/iso/{isoId}/services', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /services
     * @param {String} isoId ID of iso
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/IsoServices>}
     */
    isoListServices(isoId) {
      return this.isoListServicesWithHttpInfo(isoId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} isoId ID of iso
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    isoPatchTagWithHttpInfo(isoId, requestBody) {
      let postBody = requestBody;
      // verify the required parameter 'isoId' is set
      if (isoId === undefined || isoId === null) {
        throw new Error("Missing the required parameter 'isoId' when calling isoPatchTag");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling isoPatchTag");
      }

      let pathParams = {
        'isoId': isoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/iso/{isoId}/tag', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} isoId ID of iso
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    isoPatchTag(isoId, requestBody) {
      return this.isoPatchTagWithHttpInfo(isoId, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} isoId ID of iso
     * @param {module:model/IsoPostAccessrights} isoPostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Iso} and HTTP response
     */
    isoPostAccessrightsWithHttpInfo(isoId, isoPostAccessrights) {
      let postBody = isoPostAccessrights;
      // verify the required parameter 'isoId' is set
      if (isoId === undefined || isoId === null) {
        throw new Error("Missing the required parameter 'isoId' when calling isoPostAccessrights");
      }
      // verify the required parameter 'isoPostAccessrights' is set
      if (isoPostAccessrights === undefined || isoPostAccessrights === null) {
        throw new Error("Missing the required parameter 'isoPostAccessrights' when calling isoPostAccessrights");
      }

      let pathParams = {
        'isoId': isoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Iso;
      return this.apiClient.callApi(
        '/iso/{isoId}/accessrights', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights
     * @param {String} isoId ID of iso
     * @param {module:model/IsoPostAccessrights} isoPostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Iso}
     */
    isoPostAccessrights(isoId, isoPostAccessrights) {
      return this.isoPostAccessrightsWithHttpInfo(isoId, isoPostAccessrights)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} isoId ID of iso
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    isoPutTagWithHttpInfo(isoId, requestBody) {
      let postBody = requestBody;
      // verify the required parameter 'isoId' is set
      if (isoId === undefined || isoId === null) {
        throw new Error("Missing the required parameter 'isoId' when calling isoPutTag");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling isoPutTag");
      }

      let pathParams = {
        'isoId': isoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/iso/{isoId}/tag', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} isoId ID of iso
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    isoPutTag(isoId, requestBody) {
      return this.isoPutTagWithHttpInfo(isoId, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get
     * Returns a single iso
     * @param {String} isoId ID of iso
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Iso} and HTTP response
     */
    isoShowWithHttpInfo(isoId) {
      let postBody = null;
      // verify the required parameter 'isoId' is set
      if (isoId === undefined || isoId === null) {
        throw new Error("Missing the required parameter 'isoId' when calling isoShow");
      }

      let pathParams = {
        'isoId': isoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Iso;
      return this.apiClient.callApi(
        '/iso/{isoId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get
     * Returns a single iso
     * @param {String} isoId ID of iso
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Iso}
     */
    isoShow(isoId) {
      return this.isoShowWithHttpInfo(isoId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update
     * Returns modified iso
     * @param {String} isoId ID of iso
     * @param {module:model/IsoUpdate} isoUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Iso} and HTTP response
     */
    isoUpdateWithHttpInfo(isoId, isoUpdate) {
      let postBody = isoUpdate;
      // verify the required parameter 'isoId' is set
      if (isoId === undefined || isoId === null) {
        throw new Error("Missing the required parameter 'isoId' when calling isoUpdate");
      }
      // verify the required parameter 'isoUpdate' is set
      if (isoUpdate === undefined || isoUpdate === null) {
        throw new Error("Missing the required parameter 'isoUpdate' when calling isoUpdate");
      }

      let pathParams = {
        'isoId': isoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Iso;
      return this.apiClient.callApi(
        '/iso/{isoId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update
     * Returns modified iso
     * @param {String} isoId ID of iso
     * @param {module:model/IsoUpdate} isoUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Iso}
     */
    isoUpdate(isoId, isoUpdate) {
      return this.isoUpdateWithHttpInfo(isoId, isoUpdate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
