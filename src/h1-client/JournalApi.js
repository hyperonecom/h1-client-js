/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Credential from '../model/Credential';
import Event from '../model/Event';
import InlineResponse400 from '../model/InlineResponse400';
import Journal from '../model/Journal';
import JournalActionTransfer from '../model/JournalActionTransfer';
import JournalActionUpdateRetention from '../model/JournalActionUpdateRetention';
import JournalCreate from '../model/JournalCreate';
import JournalPatchCredentialId from '../model/JournalPatchCredentialId';
import JournalPatchCredentialpasswordId from '../model/JournalPatchCredentialpasswordId';
import JournalPostAccessrights from '../model/JournalPostAccessrights';
import JournalPostCredential from '../model/JournalPostCredential';
import JournalPostCredentialpassword from '../model/JournalPostCredentialpassword';
import JournalServices from '../model/JournalServices';
import JournalUpdate from '../model/JournalUpdate';

/**
* Journal service.
* @module h1-client/JournalApi
* @version 0.0.3
*/
export default class JournalApi {

    /**
    * Constructs a new JournalApi. 
    * @alias module:h1-client/JournalApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * /actions/transfer
     * Action transfer
     * @param {String} journalId ID of journal
     * @param {module:model/JournalActionTransfer} journalActionTransfer 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Journal} and HTTP response
     */
    journalActionTransferWithHttpInfo(journalId, journalActionTransfer, opts) {
      opts = opts || {};
      let postBody = journalActionTransfer;
      // verify the required parameter 'journalId' is set
      if (journalId === undefined || journalId === null) {
        throw new Error("Missing the required parameter 'journalId' when calling journalActionTransfer");
      }
      // verify the required parameter 'journalActionTransfer' is set
      if (journalActionTransfer === undefined || journalActionTransfer === null) {
        throw new Error("Missing the required parameter 'journalActionTransfer' when calling journalActionTransfer");
      }

      let pathParams = {
        'journalId': journalId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-idempotency-key': opts['xIdempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Journal;
      return this.apiClient.callApi(
        '/journal/{journalId}/actions/transfer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /actions/transfer
     * Action transfer
     * @param {String} journalId ID of journal
     * @param {module:model/JournalActionTransfer} journalActionTransfer 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Journal}
     */
    journalActionTransfer(journalId, journalActionTransfer, opts) {
      return this.journalActionTransferWithHttpInfo(journalId, journalActionTransfer, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/update_retention
     * Action update_retention
     * @param {String} journalId ID of journal
     * @param {module:model/JournalActionUpdateRetention} journalActionUpdateRetention 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Journal} and HTTP response
     */
    journalActionUpdateRetentionWithHttpInfo(journalId, journalActionUpdateRetention, opts) {
      opts = opts || {};
      let postBody = journalActionUpdateRetention;
      // verify the required parameter 'journalId' is set
      if (journalId === undefined || journalId === null) {
        throw new Error("Missing the required parameter 'journalId' when calling journalActionUpdateRetention");
      }
      // verify the required parameter 'journalActionUpdateRetention' is set
      if (journalActionUpdateRetention === undefined || journalActionUpdateRetention === null) {
        throw new Error("Missing the required parameter 'journalActionUpdateRetention' when calling journalActionUpdateRetention");
      }

      let pathParams = {
        'journalId': journalId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-idempotency-key': opts['xIdempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Journal;
      return this.apiClient.callApi(
        '/journal/{journalId}/actions/update_retention', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /actions/update_retention
     * Action update_retention
     * @param {String} journalId ID of journal
     * @param {module:model/JournalActionUpdateRetention} journalActionUpdateRetention 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Journal}
     */
    journalActionUpdateRetention(journalId, journalActionUpdateRetention, opts) {
      return this.journalActionUpdateRetentionWithHttpInfo(journalId, journalActionUpdateRetention, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create
     * Create journal
     * @param {module:model/JournalCreate} journalCreate 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Journal} and HTTP response
     */
    journalCreateWithHttpInfo(journalCreate, opts) {
      opts = opts || {};
      let postBody = journalCreate;
      // verify the required parameter 'journalCreate' is set
      if (journalCreate === undefined || journalCreate === null) {
        throw new Error("Missing the required parameter 'journalCreate' when calling journalCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-idempotency-key': opts['xIdempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Journal;
      return this.apiClient.callApi(
        '/journal', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create
     * Create journal
     * @param {module:model/JournalCreate} journalCreate 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Journal}
     */
    journalCreate(journalCreate, opts) {
      return this.journalCreateWithHttpInfo(journalCreate, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete
     * @param {String} journalId ID of journal
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    journalDeleteWithHttpInfo(journalId) {
      let postBody = null;
      // verify the required parameter 'journalId' is set
      if (journalId === undefined || journalId === null) {
        throw new Error("Missing the required parameter 'journalId' when calling journalDelete");
      }

      let pathParams = {
        'journalId': journalId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/journal/{journalId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete
     * @param {String} journalId ID of journal
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    journalDelete(journalId) {
      return this.journalDeleteWithHttpInfo(journalId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights/:identity
     * @param {String} journalId ID of journal
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Journal} and HTTP response
     */
    journalDeleteAccessrightsIdentityWithHttpInfo(journalId, identity) {
      let postBody = null;
      // verify the required parameter 'journalId' is set
      if (journalId === undefined || journalId === null) {
        throw new Error("Missing the required parameter 'journalId' when calling journalDeleteAccessrightsIdentity");
      }
      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling journalDeleteAccessrightsIdentity");
      }

      let pathParams = {
        'journalId': journalId,
        'identity': identity
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Journal;
      return this.apiClient.callApi(
        '/journal/{journalId}/accessrights/{identity}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights/:identity
     * @param {String} journalId ID of journal
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Journal}
     */
    journalDeleteAccessrightsIdentity(journalId, identity) {
      return this.journalDeleteAccessrightsIdentityWithHttpInfo(journalId, identity)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/:id
     * @param {String} journalId ID of journal
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Journal} and HTTP response
     */
    journalDeleteCredentialIdWithHttpInfo(journalId, id) {
      let postBody = null;
      // verify the required parameter 'journalId' is set
      if (journalId === undefined || journalId === null) {
        throw new Error("Missing the required parameter 'journalId' when calling journalDeleteCredentialId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling journalDeleteCredentialId");
      }

      let pathParams = {
        'journalId': journalId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Journal;
      return this.apiClient.callApi(
        '/journal/{journalId}/credential/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/:id
     * @param {String} journalId ID of journal
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Journal}
     */
    journalDeleteCredentialId(journalId, id) {
      return this.journalDeleteCredentialIdWithHttpInfo(journalId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password/:id
     * @param {String} journalId ID of journal
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Journal} and HTTP response
     */
    journalDeleteCredentialpasswordIdWithHttpInfo(journalId, id) {
      let postBody = null;
      // verify the required parameter 'journalId' is set
      if (journalId === undefined || journalId === null) {
        throw new Error("Missing the required parameter 'journalId' when calling journalDeleteCredentialpasswordId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling journalDeleteCredentialpasswordId");
      }

      let pathParams = {
        'journalId': journalId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Journal;
      return this.apiClient.callApi(
        '/journal/{journalId}/credential/password/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/password/:id
     * @param {String} journalId ID of journal
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Journal}
     */
    journalDeleteCredentialpasswordId(journalId, id) {
      return this.journalDeleteCredentialpasswordIdWithHttpInfo(journalId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag/:key
     * @param {String} journalId ID of journal
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    journalDeleteTagKeyWithHttpInfo(journalId, key) {
      let postBody = null;
      // verify the required parameter 'journalId' is set
      if (journalId === undefined || journalId === null) {
        throw new Error("Missing the required parameter 'journalId' when calling journalDeleteTagKey");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling journalDeleteTagKey");
      }

      let pathParams = {
        'journalId': journalId,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/journal/{journalId}/tag/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag/:key
     * @param {String} journalId ID of journal
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    journalDeleteTagKey(journalId, key) {
      return this.journalDeleteTagKeyWithHttpInfo(journalId, key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/:id
     * @param {String} journalId ID of journal
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    journalGetCredentialIdWithHttpInfo(journalId, id) {
      let postBody = null;
      // verify the required parameter 'journalId' is set
      if (journalId === undefined || journalId === null) {
        throw new Error("Missing the required parameter 'journalId' when calling journalGetCredentialId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling journalGetCredentialId");
      }

      let pathParams = {
        'journalId': journalId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Credential;
      return this.apiClient.callApi(
        '/journal/{journalId}/credential/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/:id
     * @param {String} journalId ID of journal
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    journalGetCredentialId(journalId, id) {
      return this.journalGetCredentialIdWithHttpInfo(journalId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password/:id
     * @param {String} journalId ID of journal
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    journalGetCredentialpasswordIdWithHttpInfo(journalId, id) {
      let postBody = null;
      // verify the required parameter 'journalId' is set
      if (journalId === undefined || journalId === null) {
        throw new Error("Missing the required parameter 'journalId' when calling journalGetCredentialpasswordId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling journalGetCredentialpasswordId");
      }

      let pathParams = {
        'journalId': journalId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Credential;
      return this.apiClient.callApi(
        '/journal/{journalId}/credential/password/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/password/:id
     * @param {String} journalId ID of journal
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    journalGetCredentialpasswordId(journalId, id) {
      return this.journalGetCredentialpasswordIdWithHttpInfo(journalId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /log
     * websocket is also supported
     * @param {String} journalId ID of journal
     * @param {Object} opts Optional parameters
     * @param {Date} opts.since since
     * @param {Date} opts.until until
     * @param {Boolean} opts.follow follow
     * @param {Number} opts.tail tail
     * @param {Object.<String, {String: String}>} opts.tag tag
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    journalGetLogWithHttpInfo(journalId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'journalId' is set
      if (journalId === undefined || journalId === null) {
        throw new Error("Missing the required parameter 'journalId' when calling journalGetLog");
      }

      let pathParams = {
        'journalId': journalId
      };
      let queryParams = {
        'since': opts['since'],
        'until': opts['until'],
        'follow': opts['follow'],
        'tail': opts['tail'],
        'tag': opts['tag']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/journal/{journalId}/log', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /log
     * websocket is also supported
     * @param {String} journalId ID of journal
     * @param {Object} opts Optional parameters
     * @param {Date} opts.since since
     * @param {Date} opts.until until
     * @param {Boolean} opts.follow follow
     * @param {Number} opts.tail tail
     * @param {Object.<String, {String: String}>} opts.tag tag
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    journalGetLog(journalId, opts) {
      return this.journalGetLogWithHttpInfo(journalId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services/:serviceId
     * @param {String} journalId ID of journal
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/JournalServices} and HTTP response
     */
    journalGetServicesServiceIdWithHttpInfo(journalId, serviceId) {
      let postBody = null;
      // verify the required parameter 'journalId' is set
      if (journalId === undefined || journalId === null) {
        throw new Error("Missing the required parameter 'journalId' when calling journalGetServicesServiceId");
      }
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling journalGetServicesServiceId");
      }

      let pathParams = {
        'journalId': journalId,
        'serviceId': serviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JournalServices;
      return this.apiClient.callApi(
        '/journal/{journalId}/services/{serviceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /services/:serviceId
     * @param {String} journalId ID of journal
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/JournalServices}
     */
    journalGetServicesServiceId(journalId, serviceId) {
      return this.journalGetServicesServiceIdWithHttpInfo(journalId, serviceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} journalId ID of journal
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    journalGetTagWithHttpInfo(journalId) {
      let postBody = null;
      // verify the required parameter 'journalId' is set
      if (journalId === undefined || journalId === null) {
        throw new Error("Missing the required parameter 'journalId' when calling journalGetTag");
      }

      let pathParams = {
        'journalId': journalId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/journal/{journalId}/tag', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} journalId ID of journal
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    journalGetTag(journalId) {
      return this.journalGetTagWithHttpInfo(journalId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List
     * List journal
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @param {Object.<String, {String: String}>} opts.tag Filter by tag
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Journal>} and HTTP response
     */
    journalListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'tag': opts['tag']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Journal];
      return this.apiClient.callApi(
        '/journal', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List
     * List journal
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @param {Object.<String, {String: String}>} opts.tag Filter by tag
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Journal>}
     */
    journalList(opts) {
      return this.journalListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} journalId ID of journal
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    journalListAccessrightsWithHttpInfo(journalId) {
      let postBody = null;
      // verify the required parameter 'journalId' is set
      if (journalId === undefined || journalId === null) {
        throw new Error("Missing the required parameter 'journalId' when calling journalListAccessrights");
      }

      let pathParams = {
        'journalId': journalId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/journal/{journalId}/accessrights', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights
     * @param {String} journalId ID of journal
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    journalListAccessrights(journalId) {
      return this.journalListAccessrightsWithHttpInfo(journalId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential
     * @param {String} journalId ID of journal
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Credential>} and HTTP response
     */
    journalListCredentialWithHttpInfo(journalId) {
      let postBody = null;
      // verify the required parameter 'journalId' is set
      if (journalId === undefined || journalId === null) {
        throw new Error("Missing the required parameter 'journalId' when calling journalListCredential");
      }

      let pathParams = {
        'journalId': journalId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Credential];
      return this.apiClient.callApi(
        '/journal/{journalId}/credential', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential
     * @param {String} journalId ID of journal
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Credential>}
     */
    journalListCredential(journalId) {
      return this.journalListCredentialWithHttpInfo(journalId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password
     * @param {String} journalId ID of journal
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Credential>} and HTTP response
     */
    journalListCredentialpasswordWithHttpInfo(journalId) {
      let postBody = null;
      // verify the required parameter 'journalId' is set
      if (journalId === undefined || journalId === null) {
        throw new Error("Missing the required parameter 'journalId' when calling journalListCredentialpassword");
      }

      let pathParams = {
        'journalId': journalId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Credential];
      return this.apiClient.callApi(
        '/journal/{journalId}/credential/password', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/password
     * @param {String} journalId ID of journal
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Credential>}
     */
    journalListCredentialpassword(journalId) {
      return this.journalListCredentialpasswordWithHttpInfo(journalId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /queue
     * @param {String} journalId ID of journal
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit $limit
     * @param {Number} opts.skip $skip
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Event>} and HTTP response
     */
    journalListQueueWithHttpInfo(journalId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'journalId' is set
      if (journalId === undefined || journalId === null) {
        throw new Error("Missing the required parameter 'journalId' when calling journalListQueue");
      }

      let pathParams = {
        'journalId': journalId
      };
      let queryParams = {
        '$limit': opts['limit'],
        '$skip': opts['skip']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Event];
      return this.apiClient.callApi(
        '/journal/{journalId}/queue', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /queue
     * @param {String} journalId ID of journal
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit $limit
     * @param {Number} opts.skip $skip
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Event>}
     */
    journalListQueue(journalId, opts) {
      return this.journalListQueueWithHttpInfo(journalId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services
     * @param {String} journalId ID of journal
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/JournalServices>} and HTTP response
     */
    journalListServicesWithHttpInfo(journalId) {
      let postBody = null;
      // verify the required parameter 'journalId' is set
      if (journalId === undefined || journalId === null) {
        throw new Error("Missing the required parameter 'journalId' when calling journalListServices");
      }

      let pathParams = {
        'journalId': journalId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [JournalServices];
      return this.apiClient.callApi(
        '/journal/{journalId}/services', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /services
     * @param {String} journalId ID of journal
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/JournalServices>}
     */
    journalListServices(journalId) {
      return this.journalListServicesWithHttpInfo(journalId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/:id
     * @param {String} journalId ID of journal
     * @param {String} id id
     * @param {module:model/JournalPatchCredentialId} journalPatchCredentialId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    journalPatchCredentialIdWithHttpInfo(journalId, id, journalPatchCredentialId) {
      let postBody = journalPatchCredentialId;
      // verify the required parameter 'journalId' is set
      if (journalId === undefined || journalId === null) {
        throw new Error("Missing the required parameter 'journalId' when calling journalPatchCredentialId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling journalPatchCredentialId");
      }
      // verify the required parameter 'journalPatchCredentialId' is set
      if (journalPatchCredentialId === undefined || journalPatchCredentialId === null) {
        throw new Error("Missing the required parameter 'journalPatchCredentialId' when calling journalPatchCredentialId");
      }

      let pathParams = {
        'journalId': journalId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Credential;
      return this.apiClient.callApi(
        '/journal/{journalId}/credential/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/:id
     * @param {String} journalId ID of journal
     * @param {String} id id
     * @param {module:model/JournalPatchCredentialId} journalPatchCredentialId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    journalPatchCredentialId(journalId, id, journalPatchCredentialId) {
      return this.journalPatchCredentialIdWithHttpInfo(journalId, id, journalPatchCredentialId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password/:id
     * @param {String} journalId ID of journal
     * @param {String} id id
     * @param {module:model/JournalPatchCredentialpasswordId} journalPatchCredentialpasswordId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    journalPatchCredentialpasswordIdWithHttpInfo(journalId, id, journalPatchCredentialpasswordId) {
      let postBody = journalPatchCredentialpasswordId;
      // verify the required parameter 'journalId' is set
      if (journalId === undefined || journalId === null) {
        throw new Error("Missing the required parameter 'journalId' when calling journalPatchCredentialpasswordId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling journalPatchCredentialpasswordId");
      }
      // verify the required parameter 'journalPatchCredentialpasswordId' is set
      if (journalPatchCredentialpasswordId === undefined || journalPatchCredentialpasswordId === null) {
        throw new Error("Missing the required parameter 'journalPatchCredentialpasswordId' when calling journalPatchCredentialpasswordId");
      }

      let pathParams = {
        'journalId': journalId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Credential;
      return this.apiClient.callApi(
        '/journal/{journalId}/credential/password/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/password/:id
     * @param {String} journalId ID of journal
     * @param {String} id id
     * @param {module:model/JournalPatchCredentialpasswordId} journalPatchCredentialpasswordId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    journalPatchCredentialpasswordId(journalId, id, journalPatchCredentialpasswordId) {
      return this.journalPatchCredentialpasswordIdWithHttpInfo(journalId, id, journalPatchCredentialpasswordId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} journalId ID of journal
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    journalPatchTagWithHttpInfo(journalId, requestBody) {
      let postBody = requestBody;
      // verify the required parameter 'journalId' is set
      if (journalId === undefined || journalId === null) {
        throw new Error("Missing the required parameter 'journalId' when calling journalPatchTag");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling journalPatchTag");
      }

      let pathParams = {
        'journalId': journalId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/journal/{journalId}/tag', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} journalId ID of journal
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    journalPatchTag(journalId, requestBody) {
      return this.journalPatchTagWithHttpInfo(journalId, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} journalId ID of journal
     * @param {module:model/JournalPostAccessrights} journalPostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Journal} and HTTP response
     */
    journalPostAccessrightsWithHttpInfo(journalId, journalPostAccessrights) {
      let postBody = journalPostAccessrights;
      // verify the required parameter 'journalId' is set
      if (journalId === undefined || journalId === null) {
        throw new Error("Missing the required parameter 'journalId' when calling journalPostAccessrights");
      }
      // verify the required parameter 'journalPostAccessrights' is set
      if (journalPostAccessrights === undefined || journalPostAccessrights === null) {
        throw new Error("Missing the required parameter 'journalPostAccessrights' when calling journalPostAccessrights");
      }

      let pathParams = {
        'journalId': journalId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Journal;
      return this.apiClient.callApi(
        '/journal/{journalId}/accessrights', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights
     * @param {String} journalId ID of journal
     * @param {module:model/JournalPostAccessrights} journalPostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Journal}
     */
    journalPostAccessrights(journalId, journalPostAccessrights) {
      return this.journalPostAccessrightsWithHttpInfo(journalId, journalPostAccessrights)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential
     * @param {String} journalId ID of journal
     * @param {module:model/JournalPostCredential} journalPostCredential 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    journalPostCredentialWithHttpInfo(journalId, journalPostCredential) {
      let postBody = journalPostCredential;
      // verify the required parameter 'journalId' is set
      if (journalId === undefined || journalId === null) {
        throw new Error("Missing the required parameter 'journalId' when calling journalPostCredential");
      }
      // verify the required parameter 'journalPostCredential' is set
      if (journalPostCredential === undefined || journalPostCredential === null) {
        throw new Error("Missing the required parameter 'journalPostCredential' when calling journalPostCredential");
      }

      let pathParams = {
        'journalId': journalId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Credential;
      return this.apiClient.callApi(
        '/journal/{journalId}/credential', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential
     * @param {String} journalId ID of journal
     * @param {module:model/JournalPostCredential} journalPostCredential 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    journalPostCredential(journalId, journalPostCredential) {
      return this.journalPostCredentialWithHttpInfo(journalId, journalPostCredential)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password
     * @param {String} journalId ID of journal
     * @param {module:model/JournalPostCredentialpassword} journalPostCredentialpassword 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    journalPostCredentialpasswordWithHttpInfo(journalId, journalPostCredentialpassword) {
      let postBody = journalPostCredentialpassword;
      // verify the required parameter 'journalId' is set
      if (journalId === undefined || journalId === null) {
        throw new Error("Missing the required parameter 'journalId' when calling journalPostCredentialpassword");
      }
      // verify the required parameter 'journalPostCredentialpassword' is set
      if (journalPostCredentialpassword === undefined || journalPostCredentialpassword === null) {
        throw new Error("Missing the required parameter 'journalPostCredentialpassword' when calling journalPostCredentialpassword");
      }

      let pathParams = {
        'journalId': journalId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Credential;
      return this.apiClient.callApi(
        '/journal/{journalId}/credential/password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/password
     * @param {String} journalId ID of journal
     * @param {module:model/JournalPostCredentialpassword} journalPostCredentialpassword 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    journalPostCredentialpassword(journalId, journalPostCredentialpassword) {
      return this.journalPostCredentialpasswordWithHttpInfo(journalId, journalPostCredentialpassword)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} journalId ID of journal
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    journalPutTagWithHttpInfo(journalId, requestBody) {
      let postBody = requestBody;
      // verify the required parameter 'journalId' is set
      if (journalId === undefined || journalId === null) {
        throw new Error("Missing the required parameter 'journalId' when calling journalPutTag");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling journalPutTag");
      }

      let pathParams = {
        'journalId': journalId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/journal/{journalId}/tag', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} journalId ID of journal
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    journalPutTag(journalId, requestBody) {
      return this.journalPutTagWithHttpInfo(journalId, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get
     * Returns a single journal
     * @param {String} journalId ID of journal
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Journal} and HTTP response
     */
    journalShowWithHttpInfo(journalId) {
      let postBody = null;
      // verify the required parameter 'journalId' is set
      if (journalId === undefined || journalId === null) {
        throw new Error("Missing the required parameter 'journalId' when calling journalShow");
      }

      let pathParams = {
        'journalId': journalId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Journal;
      return this.apiClient.callApi(
        '/journal/{journalId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get
     * Returns a single journal
     * @param {String} journalId ID of journal
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Journal}
     */
    journalShow(journalId) {
      return this.journalShowWithHttpInfo(journalId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update
     * Returns modified journal
     * @param {String} journalId ID of journal
     * @param {module:model/JournalUpdate} journalUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Journal} and HTTP response
     */
    journalUpdateWithHttpInfo(journalId, journalUpdate) {
      let postBody = journalUpdate;
      // verify the required parameter 'journalId' is set
      if (journalId === undefined || journalId === null) {
        throw new Error("Missing the required parameter 'journalId' when calling journalUpdate");
      }
      // verify the required parameter 'journalUpdate' is set
      if (journalUpdate === undefined || journalUpdate === null) {
        throw new Error("Missing the required parameter 'journalUpdate' when calling journalUpdate");
      }

      let pathParams = {
        'journalId': journalId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Journal;
      return this.apiClient.callApi(
        '/journal/{journalId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update
     * Returns modified journal
     * @param {String} journalId ID of journal
     * @param {module:model/JournalUpdate} journalUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Journal}
     */
    journalUpdate(journalId, journalUpdate) {
      return this.journalUpdateWithHttpInfo(journalId, journalUpdate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
