/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Credential', 'model/Event', 'model/InlineResponse400', 'model/Journal', 'model/JournalActionTransfer', 'model/JournalActionUpdateRetention', 'model/JournalCreate', 'model/JournalPatchCredentialId', 'model/JournalPatchCredentialpasswordId', 'model/JournalPostAccessrights', 'model/JournalPostCredential', 'model/JournalPostCredentialpassword', 'model/JournalServices', 'model/JournalUpdate'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Credential'), require('../model/Event'), require('../model/InlineResponse400'), require('../model/Journal'), require('../model/JournalActionTransfer'), require('../model/JournalActionUpdateRetention'), require('../model/JournalCreate'), require('../model/JournalPatchCredentialId'), require('../model/JournalPatchCredentialpasswordId'), require('../model/JournalPostAccessrights'), require('../model/JournalPostCredential'), require('../model/JournalPostCredentialpassword'), require('../model/JournalServices'), require('../model/JournalUpdate'));
  } else {
    // Browser globals (root is window)
    if (!root.HyperoneClient) {
      root.HyperoneClient = {};
    }
    root.HyperoneClient.JournalApi = factory(root.HyperoneClient.ApiClient, root.HyperoneClient.Credential, root.HyperoneClient.Event, root.HyperoneClient.InlineResponse400, root.HyperoneClient.Journal, root.HyperoneClient.JournalActionTransfer, root.HyperoneClient.JournalActionUpdateRetention, root.HyperoneClient.JournalCreate, root.HyperoneClient.JournalPatchCredentialId, root.HyperoneClient.JournalPatchCredentialpasswordId, root.HyperoneClient.JournalPostAccessrights, root.HyperoneClient.JournalPostCredential, root.HyperoneClient.JournalPostCredentialpassword, root.HyperoneClient.JournalServices, root.HyperoneClient.JournalUpdate);
  }
}(this, function(ApiClient, Credential, Event, InlineResponse400, Journal, JournalActionTransfer, JournalActionUpdateRetention, JournalCreate, JournalPatchCredentialId, JournalPatchCredentialpasswordId, JournalPostAccessrights, JournalPostCredential, JournalPostCredentialpassword, JournalServices, JournalUpdate) {
  'use strict';

  /**
   * Journal service.
   * @module h1-client/JournalApi
   * @version 0.0.3
   */

  /**
   * Constructs a new JournalApi. 
   * @alias module:h1-client/JournalApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * /actions/transfer
     * Action transfer
     * @param {String} journalId ID of journal
     * @param {module:model/JournalActionTransfer} journalActionTransfer 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Journal} and HTTP response
     */
    this.journalActionTransferWithHttpInfo = function(journalId, journalActionTransfer, opts) {
      opts = opts || {};
      var postBody = journalActionTransfer;
      // verify the required parameter 'journalId' is set
      if (journalId === undefined || journalId === null) {
        throw new Error("Missing the required parameter 'journalId' when calling journalActionTransfer");
      }
      // verify the required parameter 'journalActionTransfer' is set
      if (journalActionTransfer === undefined || journalActionTransfer === null) {
        throw new Error("Missing the required parameter 'journalActionTransfer' when calling journalActionTransfer");
      }

      var pathParams = {
        'journalId': journalId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'x-idempotency-key': opts['xIdempotencyKey']
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Journal;
      return this.apiClient.callApi(
        '/journal/{journalId}/actions/transfer', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /actions/transfer
     * Action transfer
     * @param {String} journalId ID of journal
     * @param {module:model/JournalActionTransfer} journalActionTransfer 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Journal}
     */
    this.journalActionTransfer = function(journalId, journalActionTransfer, opts) {
      return this.journalActionTransferWithHttpInfo(journalId, journalActionTransfer, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/update_retention
     * Action update_retention
     * @param {String} journalId ID of journal
     * @param {module:model/JournalActionUpdateRetention} journalActionUpdateRetention 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Journal} and HTTP response
     */
    this.journalActionUpdateRetentionWithHttpInfo = function(journalId, journalActionUpdateRetention, opts) {
      opts = opts || {};
      var postBody = journalActionUpdateRetention;
      // verify the required parameter 'journalId' is set
      if (journalId === undefined || journalId === null) {
        throw new Error("Missing the required parameter 'journalId' when calling journalActionUpdateRetention");
      }
      // verify the required parameter 'journalActionUpdateRetention' is set
      if (journalActionUpdateRetention === undefined || journalActionUpdateRetention === null) {
        throw new Error("Missing the required parameter 'journalActionUpdateRetention' when calling journalActionUpdateRetention");
      }

      var pathParams = {
        'journalId': journalId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'x-idempotency-key': opts['xIdempotencyKey']
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Journal;
      return this.apiClient.callApi(
        '/journal/{journalId}/actions/update_retention', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /actions/update_retention
     * Action update_retention
     * @param {String} journalId ID of journal
     * @param {module:model/JournalActionUpdateRetention} journalActionUpdateRetention 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Journal}
     */
    this.journalActionUpdateRetention = function(journalId, journalActionUpdateRetention, opts) {
      return this.journalActionUpdateRetentionWithHttpInfo(journalId, journalActionUpdateRetention, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create
     * Create journal
     * @param {module:model/JournalCreate} journalCreate 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Journal} and HTTP response
     */
    this.journalCreateWithHttpInfo = function(journalCreate, opts) {
      opts = opts || {};
      var postBody = journalCreate;
      // verify the required parameter 'journalCreate' is set
      if (journalCreate === undefined || journalCreate === null) {
        throw new Error("Missing the required parameter 'journalCreate' when calling journalCreate");
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'x-idempotency-key': opts['xIdempotencyKey']
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Journal;
      return this.apiClient.callApi(
        '/journal', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create
     * Create journal
     * @param {module:model/JournalCreate} journalCreate 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Journal}
     */
    this.journalCreate = function(journalCreate, opts) {
      return this.journalCreateWithHttpInfo(journalCreate, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete
     * @param {String} journalId ID of journal
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.journalDeleteWithHttpInfo = function(journalId) {
      var postBody = null;
      // verify the required parameter 'journalId' is set
      if (journalId === undefined || journalId === null) {
        throw new Error("Missing the required parameter 'journalId' when calling journalDelete");
      }

      var pathParams = {
        'journalId': journalId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;
      return this.apiClient.callApi(
        '/journal/{journalId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete
     * @param {String} journalId ID of journal
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.journalDelete = function(journalId) {
      return this.journalDeleteWithHttpInfo(journalId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights/:identity
     * @param {String} journalId ID of journal
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Journal} and HTTP response
     */
    this.journalDeleteAccessrightsIdentityWithHttpInfo = function(journalId, identity) {
      var postBody = null;
      // verify the required parameter 'journalId' is set
      if (journalId === undefined || journalId === null) {
        throw new Error("Missing the required parameter 'journalId' when calling journalDeleteAccessrightsIdentity");
      }
      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling journalDeleteAccessrightsIdentity");
      }

      var pathParams = {
        'journalId': journalId,
        'identity': identity
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Journal;
      return this.apiClient.callApi(
        '/journal/{journalId}/accessrights/{identity}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights/:identity
     * @param {String} journalId ID of journal
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Journal}
     */
    this.journalDeleteAccessrightsIdentity = function(journalId, identity) {
      return this.journalDeleteAccessrightsIdentityWithHttpInfo(journalId, identity)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/:id
     * @param {String} journalId ID of journal
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Journal} and HTTP response
     */
    this.journalDeleteCredentialIdWithHttpInfo = function(journalId, id) {
      var postBody = null;
      // verify the required parameter 'journalId' is set
      if (journalId === undefined || journalId === null) {
        throw new Error("Missing the required parameter 'journalId' when calling journalDeleteCredentialId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling journalDeleteCredentialId");
      }

      var pathParams = {
        'journalId': journalId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Journal;
      return this.apiClient.callApi(
        '/journal/{journalId}/credential/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/:id
     * @param {String} journalId ID of journal
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Journal}
     */
    this.journalDeleteCredentialId = function(journalId, id) {
      return this.journalDeleteCredentialIdWithHttpInfo(journalId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password/:id
     * @param {String} journalId ID of journal
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Journal} and HTTP response
     */
    this.journalDeleteCredentialpasswordIdWithHttpInfo = function(journalId, id) {
      var postBody = null;
      // verify the required parameter 'journalId' is set
      if (journalId === undefined || journalId === null) {
        throw new Error("Missing the required parameter 'journalId' when calling journalDeleteCredentialpasswordId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling journalDeleteCredentialpasswordId");
      }

      var pathParams = {
        'journalId': journalId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Journal;
      return this.apiClient.callApi(
        '/journal/{journalId}/credential/password/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/password/:id
     * @param {String} journalId ID of journal
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Journal}
     */
    this.journalDeleteCredentialpasswordId = function(journalId, id) {
      return this.journalDeleteCredentialpasswordIdWithHttpInfo(journalId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag/:key
     * @param {String} journalId ID of journal
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    this.journalDeleteTagKeyWithHttpInfo = function(journalId, key) {
      var postBody = null;
      // verify the required parameter 'journalId' is set
      if (journalId === undefined || journalId === null) {
        throw new Error("Missing the required parameter 'journalId' when calling journalDeleteTagKey");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling journalDeleteTagKey");
      }

      var pathParams = {
        'journalId': journalId,
        'key': key
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/journal/{journalId}/tag/{key}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag/:key
     * @param {String} journalId ID of journal
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    this.journalDeleteTagKey = function(journalId, key) {
      return this.journalDeleteTagKeyWithHttpInfo(journalId, key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/:id
     * @param {String} journalId ID of journal
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    this.journalGetCredentialIdWithHttpInfo = function(journalId, id) {
      var postBody = null;
      // verify the required parameter 'journalId' is set
      if (journalId === undefined || journalId === null) {
        throw new Error("Missing the required parameter 'journalId' when calling journalGetCredentialId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling journalGetCredentialId");
      }

      var pathParams = {
        'journalId': journalId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Credential;
      return this.apiClient.callApi(
        '/journal/{journalId}/credential/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/:id
     * @param {String} journalId ID of journal
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    this.journalGetCredentialId = function(journalId, id) {
      return this.journalGetCredentialIdWithHttpInfo(journalId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password/:id
     * @param {String} journalId ID of journal
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    this.journalGetCredentialpasswordIdWithHttpInfo = function(journalId, id) {
      var postBody = null;
      // verify the required parameter 'journalId' is set
      if (journalId === undefined || journalId === null) {
        throw new Error("Missing the required parameter 'journalId' when calling journalGetCredentialpasswordId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling journalGetCredentialpasswordId");
      }

      var pathParams = {
        'journalId': journalId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Credential;
      return this.apiClient.callApi(
        '/journal/{journalId}/credential/password/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/password/:id
     * @param {String} journalId ID of journal
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    this.journalGetCredentialpasswordId = function(journalId, id) {
      return this.journalGetCredentialpasswordIdWithHttpInfo(journalId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /log
     * websocket is also supported
     * @param {String} journalId ID of journal
     * @param {Object} opts Optional parameters
     * @param {Date} opts.since since
     * @param {Date} opts.until until
     * @param {Boolean} opts.follow follow
     * @param {Number} opts.tail tail
     * @param {Object.<String, {String: String}>} opts.tag tag
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.journalGetLogWithHttpInfo = function(journalId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'journalId' is set
      if (journalId === undefined || journalId === null) {
        throw new Error("Missing the required parameter 'journalId' when calling journalGetLog");
      }

      var pathParams = {
        'journalId': journalId
      };
      var queryParams = {
        'since': opts['since'],
        'until': opts['until'],
        'follow': opts['follow'],
        'tail': opts['tail'],
        'tag': opts['tag'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;
      return this.apiClient.callApi(
        '/journal/{journalId}/log', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /log
     * websocket is also supported
     * @param {String} journalId ID of journal
     * @param {Object} opts Optional parameters
     * @param {Date} opts.since since
     * @param {Date} opts.until until
     * @param {Boolean} opts.follow follow
     * @param {Number} opts.tail tail
     * @param {Object.<String, {String: String}>} opts.tag tag
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.journalGetLog = function(journalId, opts) {
      return this.journalGetLogWithHttpInfo(journalId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services/:serviceId
     * @param {String} journalId ID of journal
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/JournalServices} and HTTP response
     */
    this.journalGetServicesServiceIdWithHttpInfo = function(journalId, serviceId) {
      var postBody = null;
      // verify the required parameter 'journalId' is set
      if (journalId === undefined || journalId === null) {
        throw new Error("Missing the required parameter 'journalId' when calling journalGetServicesServiceId");
      }
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling journalGetServicesServiceId");
      }

      var pathParams = {
        'journalId': journalId,
        'serviceId': serviceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = JournalServices;
      return this.apiClient.callApi(
        '/journal/{journalId}/services/{serviceId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /services/:serviceId
     * @param {String} journalId ID of journal
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/JournalServices}
     */
    this.journalGetServicesServiceId = function(journalId, serviceId) {
      return this.journalGetServicesServiceIdWithHttpInfo(journalId, serviceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} journalId ID of journal
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    this.journalGetTagWithHttpInfo = function(journalId) {
      var postBody = null;
      // verify the required parameter 'journalId' is set
      if (journalId === undefined || journalId === null) {
        throw new Error("Missing the required parameter 'journalId' when calling journalGetTag");
      }

      var pathParams = {
        'journalId': journalId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/journal/{journalId}/tag', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} journalId ID of journal
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    this.journalGetTag = function(journalId) {
      return this.journalGetTagWithHttpInfo(journalId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List
     * List journal
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @param {Object.<String, {String: String}>} opts.tag Filter by tag
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Journal>} and HTTP response
     */
    this.journalListWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
        'name': opts['name'],
        'tag': opts['tag'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Journal];
      return this.apiClient.callApi(
        '/journal', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List
     * List journal
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @param {Object.<String, {String: String}>} opts.tag Filter by tag
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Journal>}
     */
    this.journalList = function(opts) {
      return this.journalListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} journalId ID of journal
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    this.journalListAccessrightsWithHttpInfo = function(journalId) {
      var postBody = null;
      // verify the required parameter 'journalId' is set
      if (journalId === undefined || journalId === null) {
        throw new Error("Missing the required parameter 'journalId' when calling journalListAccessrights");
      }

      var pathParams = {
        'journalId': journalId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['String'];
      return this.apiClient.callApi(
        '/journal/{journalId}/accessrights', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights
     * @param {String} journalId ID of journal
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    this.journalListAccessrights = function(journalId) {
      return this.journalListAccessrightsWithHttpInfo(journalId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential
     * @param {String} journalId ID of journal
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Credential>} and HTTP response
     */
    this.journalListCredentialWithHttpInfo = function(journalId) {
      var postBody = null;
      // verify the required parameter 'journalId' is set
      if (journalId === undefined || journalId === null) {
        throw new Error("Missing the required parameter 'journalId' when calling journalListCredential");
      }

      var pathParams = {
        'journalId': journalId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Credential];
      return this.apiClient.callApi(
        '/journal/{journalId}/credential', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential
     * @param {String} journalId ID of journal
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Credential>}
     */
    this.journalListCredential = function(journalId) {
      return this.journalListCredentialWithHttpInfo(journalId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password
     * @param {String} journalId ID of journal
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Credential>} and HTTP response
     */
    this.journalListCredentialpasswordWithHttpInfo = function(journalId) {
      var postBody = null;
      // verify the required parameter 'journalId' is set
      if (journalId === undefined || journalId === null) {
        throw new Error("Missing the required parameter 'journalId' when calling journalListCredentialpassword");
      }

      var pathParams = {
        'journalId': journalId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Credential];
      return this.apiClient.callApi(
        '/journal/{journalId}/credential/password', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/password
     * @param {String} journalId ID of journal
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Credential>}
     */
    this.journalListCredentialpassword = function(journalId) {
      return this.journalListCredentialpasswordWithHttpInfo(journalId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /queue
     * @param {String} journalId ID of journal
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit $limit (default to 100)
     * @param {Number} opts.skip $skip
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Event>} and HTTP response
     */
    this.journalListQueueWithHttpInfo = function(journalId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'journalId' is set
      if (journalId === undefined || journalId === null) {
        throw new Error("Missing the required parameter 'journalId' when calling journalListQueue");
      }

      var pathParams = {
        'journalId': journalId
      };
      var queryParams = {
        '$limit': opts['limit'],
        '$skip': opts['skip'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Event];
      return this.apiClient.callApi(
        '/journal/{journalId}/queue', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /queue
     * @param {String} journalId ID of journal
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit $limit (default to 100)
     * @param {Number} opts.skip $skip
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Event>}
     */
    this.journalListQueue = function(journalId, opts) {
      return this.journalListQueueWithHttpInfo(journalId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services
     * @param {String} journalId ID of journal
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/JournalServices>} and HTTP response
     */
    this.journalListServicesWithHttpInfo = function(journalId) {
      var postBody = null;
      // verify the required parameter 'journalId' is set
      if (journalId === undefined || journalId === null) {
        throw new Error("Missing the required parameter 'journalId' when calling journalListServices");
      }

      var pathParams = {
        'journalId': journalId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [JournalServices];
      return this.apiClient.callApi(
        '/journal/{journalId}/services', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /services
     * @param {String} journalId ID of journal
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/JournalServices>}
     */
    this.journalListServices = function(journalId) {
      return this.journalListServicesWithHttpInfo(journalId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/:id
     * @param {String} journalId ID of journal
     * @param {String} id id
     * @param {module:model/JournalPatchCredentialId} journalPatchCredentialId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    this.journalPatchCredentialIdWithHttpInfo = function(journalId, id, journalPatchCredentialId) {
      var postBody = journalPatchCredentialId;
      // verify the required parameter 'journalId' is set
      if (journalId === undefined || journalId === null) {
        throw new Error("Missing the required parameter 'journalId' when calling journalPatchCredentialId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling journalPatchCredentialId");
      }
      // verify the required parameter 'journalPatchCredentialId' is set
      if (journalPatchCredentialId === undefined || journalPatchCredentialId === null) {
        throw new Error("Missing the required parameter 'journalPatchCredentialId' when calling journalPatchCredentialId");
      }

      var pathParams = {
        'journalId': journalId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Credential;
      return this.apiClient.callApi(
        '/journal/{journalId}/credential/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/:id
     * @param {String} journalId ID of journal
     * @param {String} id id
     * @param {module:model/JournalPatchCredentialId} journalPatchCredentialId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    this.journalPatchCredentialId = function(journalId, id, journalPatchCredentialId) {
      return this.journalPatchCredentialIdWithHttpInfo(journalId, id, journalPatchCredentialId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password/:id
     * @param {String} journalId ID of journal
     * @param {String} id id
     * @param {module:model/JournalPatchCredentialpasswordId} journalPatchCredentialpasswordId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    this.journalPatchCredentialpasswordIdWithHttpInfo = function(journalId, id, journalPatchCredentialpasswordId) {
      var postBody = journalPatchCredentialpasswordId;
      // verify the required parameter 'journalId' is set
      if (journalId === undefined || journalId === null) {
        throw new Error("Missing the required parameter 'journalId' when calling journalPatchCredentialpasswordId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling journalPatchCredentialpasswordId");
      }
      // verify the required parameter 'journalPatchCredentialpasswordId' is set
      if (journalPatchCredentialpasswordId === undefined || journalPatchCredentialpasswordId === null) {
        throw new Error("Missing the required parameter 'journalPatchCredentialpasswordId' when calling journalPatchCredentialpasswordId");
      }

      var pathParams = {
        'journalId': journalId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Credential;
      return this.apiClient.callApi(
        '/journal/{journalId}/credential/password/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/password/:id
     * @param {String} journalId ID of journal
     * @param {String} id id
     * @param {module:model/JournalPatchCredentialpasswordId} journalPatchCredentialpasswordId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    this.journalPatchCredentialpasswordId = function(journalId, id, journalPatchCredentialpasswordId) {
      return this.journalPatchCredentialpasswordIdWithHttpInfo(journalId, id, journalPatchCredentialpasswordId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} journalId ID of journal
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    this.journalPatchTagWithHttpInfo = function(journalId, requestBody) {
      var postBody = requestBody;
      // verify the required parameter 'journalId' is set
      if (journalId === undefined || journalId === null) {
        throw new Error("Missing the required parameter 'journalId' when calling journalPatchTag");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling journalPatchTag");
      }

      var pathParams = {
        'journalId': journalId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/journal/{journalId}/tag', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} journalId ID of journal
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    this.journalPatchTag = function(journalId, requestBody) {
      return this.journalPatchTagWithHttpInfo(journalId, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} journalId ID of journal
     * @param {module:model/JournalPostAccessrights} journalPostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Journal} and HTTP response
     */
    this.journalPostAccessrightsWithHttpInfo = function(journalId, journalPostAccessrights) {
      var postBody = journalPostAccessrights;
      // verify the required parameter 'journalId' is set
      if (journalId === undefined || journalId === null) {
        throw new Error("Missing the required parameter 'journalId' when calling journalPostAccessrights");
      }
      // verify the required parameter 'journalPostAccessrights' is set
      if (journalPostAccessrights === undefined || journalPostAccessrights === null) {
        throw new Error("Missing the required parameter 'journalPostAccessrights' when calling journalPostAccessrights");
      }

      var pathParams = {
        'journalId': journalId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Journal;
      return this.apiClient.callApi(
        '/journal/{journalId}/accessrights', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights
     * @param {String} journalId ID of journal
     * @param {module:model/JournalPostAccessrights} journalPostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Journal}
     */
    this.journalPostAccessrights = function(journalId, journalPostAccessrights) {
      return this.journalPostAccessrightsWithHttpInfo(journalId, journalPostAccessrights)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential
     * @param {String} journalId ID of journal
     * @param {module:model/JournalPostCredential} journalPostCredential 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    this.journalPostCredentialWithHttpInfo = function(journalId, journalPostCredential) {
      var postBody = journalPostCredential;
      // verify the required parameter 'journalId' is set
      if (journalId === undefined || journalId === null) {
        throw new Error("Missing the required parameter 'journalId' when calling journalPostCredential");
      }
      // verify the required parameter 'journalPostCredential' is set
      if (journalPostCredential === undefined || journalPostCredential === null) {
        throw new Error("Missing the required parameter 'journalPostCredential' when calling journalPostCredential");
      }

      var pathParams = {
        'journalId': journalId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Credential;
      return this.apiClient.callApi(
        '/journal/{journalId}/credential', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential
     * @param {String} journalId ID of journal
     * @param {module:model/JournalPostCredential} journalPostCredential 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    this.journalPostCredential = function(journalId, journalPostCredential) {
      return this.journalPostCredentialWithHttpInfo(journalId, journalPostCredential)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password
     * @param {String} journalId ID of journal
     * @param {module:model/JournalPostCredentialpassword} journalPostCredentialpassword 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Credential} and HTTP response
     */
    this.journalPostCredentialpasswordWithHttpInfo = function(journalId, journalPostCredentialpassword) {
      var postBody = journalPostCredentialpassword;
      // verify the required parameter 'journalId' is set
      if (journalId === undefined || journalId === null) {
        throw new Error("Missing the required parameter 'journalId' when calling journalPostCredentialpassword");
      }
      // verify the required parameter 'journalPostCredentialpassword' is set
      if (journalPostCredentialpassword === undefined || journalPostCredentialpassword === null) {
        throw new Error("Missing the required parameter 'journalPostCredentialpassword' when calling journalPostCredentialpassword");
      }

      var pathParams = {
        'journalId': journalId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Credential;
      return this.apiClient.callApi(
        '/journal/{journalId}/credential/password', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/password
     * @param {String} journalId ID of journal
     * @param {module:model/JournalPostCredentialpassword} journalPostCredentialpassword 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Credential}
     */
    this.journalPostCredentialpassword = function(journalId, journalPostCredentialpassword) {
      return this.journalPostCredentialpasswordWithHttpInfo(journalId, journalPostCredentialpassword)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} journalId ID of journal
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    this.journalPutTagWithHttpInfo = function(journalId, requestBody) {
      var postBody = requestBody;
      // verify the required parameter 'journalId' is set
      if (journalId === undefined || journalId === null) {
        throw new Error("Missing the required parameter 'journalId' when calling journalPutTag");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling journalPutTag");
      }

      var pathParams = {
        'journalId': journalId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/journal/{journalId}/tag', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} journalId ID of journal
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    this.journalPutTag = function(journalId, requestBody) {
      return this.journalPutTagWithHttpInfo(journalId, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get
     * Returns a single journal
     * @param {String} journalId ID of journal
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Journal} and HTTP response
     */
    this.journalShowWithHttpInfo = function(journalId) {
      var postBody = null;
      // verify the required parameter 'journalId' is set
      if (journalId === undefined || journalId === null) {
        throw new Error("Missing the required parameter 'journalId' when calling journalShow");
      }

      var pathParams = {
        'journalId': journalId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Journal;
      return this.apiClient.callApi(
        '/journal/{journalId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get
     * Returns a single journal
     * @param {String} journalId ID of journal
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Journal}
     */
    this.journalShow = function(journalId) {
      return this.journalShowWithHttpInfo(journalId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update
     * Returns modified journal
     * @param {String} journalId ID of journal
     * @param {module:model/JournalUpdate} journalUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Journal} and HTTP response
     */
    this.journalUpdateWithHttpInfo = function(journalId, journalUpdate) {
      var postBody = journalUpdate;
      // verify the required parameter 'journalId' is set
      if (journalId === undefined || journalId === null) {
        throw new Error("Missing the required parameter 'journalId' when calling journalUpdate");
      }
      // verify the required parameter 'journalUpdate' is set
      if (journalUpdate === undefined || journalUpdate === null) {
        throw new Error("Missing the required parameter 'journalUpdate' when calling journalUpdate");
      }

      var pathParams = {
        'journalId': journalId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Journal;
      return this.apiClient.callApi(
        '/journal/{journalId}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update
     * Returns modified journal
     * @param {String} journalId ID of journal
     * @param {module:model/JournalUpdate} journalUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Journal}
     */
    this.journalUpdate = function(journalId, journalUpdate) {
      return this.journalUpdateWithHttpInfo(journalId, journalUpdate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
