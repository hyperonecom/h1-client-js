/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Event from '../model/Event';
import Firewall from '../model/Firewall';
import FirewallActionAttach from '../model/FirewallActionAttach';
import FirewallActionTransfer from '../model/FirewallActionTransfer';
import FirewallCreate from '../model/FirewallCreate';
import FirewallPostAccessrights from '../model/FirewallPostAccessrights';
import FirewallPostEgress from '../model/FirewallPostEgress';
import FirewallPostIngress from '../model/FirewallPostIngress';
import FirewallServices from '../model/FirewallServices';
import FirewallUpdate from '../model/FirewallUpdate';
import InlineResponse2005 from '../model/InlineResponse2005';
import InlineResponse400 from '../model/InlineResponse400';

/**
* Firewall service.
* @module h1-client/FirewallApi
* @version 0.0.3
*/
export default class FirewallApi {

    /**
    * Constructs a new FirewallApi. 
    * @alias module:h1-client/FirewallApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * /actions/attach
     * Action attach
     * @param {String} firewallId ID of firewall
     * @param {module:model/FirewallActionAttach} firewallActionAttach 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Firewall} and HTTP response
     */
    firewallActionAttachWithHttpInfo(firewallId, firewallActionAttach, opts) {
      opts = opts || {};
      let postBody = firewallActionAttach;
      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling firewallActionAttach");
      }
      // verify the required parameter 'firewallActionAttach' is set
      if (firewallActionAttach === undefined || firewallActionAttach === null) {
        throw new Error("Missing the required parameter 'firewallActionAttach' when calling firewallActionAttach");
      }

      let pathParams = {
        'firewallId': firewallId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-idempotency-key': opts['xIdempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Firewall;
      return this.apiClient.callApi(
        '/firewall/{firewallId}/actions/attach', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /actions/attach
     * Action attach
     * @param {String} firewallId ID of firewall
     * @param {module:model/FirewallActionAttach} firewallActionAttach 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Firewall}
     */
    firewallActionAttach(firewallId, firewallActionAttach, opts) {
      return this.firewallActionAttachWithHttpInfo(firewallId, firewallActionAttach, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/detach
     * Action detach
     * @param {String} firewallId ID of firewall
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Firewall} and HTTP response
     */
    firewallActionDetachWithHttpInfo(firewallId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling firewallActionDetach");
      }

      let pathParams = {
        'firewallId': firewallId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-idempotency-key': opts['xIdempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Firewall;
      return this.apiClient.callApi(
        '/firewall/{firewallId}/actions/detach', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /actions/detach
     * Action detach
     * @param {String} firewallId ID of firewall
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Firewall}
     */
    firewallActionDetach(firewallId, opts) {
      return this.firewallActionDetachWithHttpInfo(firewallId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/transfer
     * Action transfer
     * @param {String} firewallId ID of firewall
     * @param {module:model/FirewallActionTransfer} firewallActionTransfer 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Firewall} and HTTP response
     */
    firewallActionTransferWithHttpInfo(firewallId, firewallActionTransfer, opts) {
      opts = opts || {};
      let postBody = firewallActionTransfer;
      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling firewallActionTransfer");
      }
      // verify the required parameter 'firewallActionTransfer' is set
      if (firewallActionTransfer === undefined || firewallActionTransfer === null) {
        throw new Error("Missing the required parameter 'firewallActionTransfer' when calling firewallActionTransfer");
      }

      let pathParams = {
        'firewallId': firewallId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-idempotency-key': opts['xIdempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Firewall;
      return this.apiClient.callApi(
        '/firewall/{firewallId}/actions/transfer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /actions/transfer
     * Action transfer
     * @param {String} firewallId ID of firewall
     * @param {module:model/FirewallActionTransfer} firewallActionTransfer 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Firewall}
     */
    firewallActionTransfer(firewallId, firewallActionTransfer, opts) {
      return this.firewallActionTransferWithHttpInfo(firewallId, firewallActionTransfer, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create
     * Create firewall
     * @param {module:model/FirewallCreate} firewallCreate 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Firewall} and HTTP response
     */
    firewallCreateWithHttpInfo(firewallCreate, opts) {
      opts = opts || {};
      let postBody = firewallCreate;
      // verify the required parameter 'firewallCreate' is set
      if (firewallCreate === undefined || firewallCreate === null) {
        throw new Error("Missing the required parameter 'firewallCreate' when calling firewallCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-idempotency-key': opts['xIdempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Firewall;
      return this.apiClient.callApi(
        '/firewall', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create
     * Create firewall
     * @param {module:model/FirewallCreate} firewallCreate 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Firewall}
     */
    firewallCreate(firewallCreate, opts) {
      return this.firewallCreateWithHttpInfo(firewallCreate, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete
     * @param {String} firewallId ID of firewall
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    firewallDeleteWithHttpInfo(firewallId) {
      let postBody = null;
      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling firewallDelete");
      }

      let pathParams = {
        'firewallId': firewallId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/firewall/{firewallId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete
     * @param {String} firewallId ID of firewall
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    firewallDelete(firewallId) {
      return this.firewallDeleteWithHttpInfo(firewallId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights/:identity
     * @param {String} firewallId ID of firewall
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Firewall} and HTTP response
     */
    firewallDeleteAccessrightsIdentityWithHttpInfo(firewallId, identity) {
      let postBody = null;
      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling firewallDeleteAccessrightsIdentity");
      }
      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling firewallDeleteAccessrightsIdentity");
      }

      let pathParams = {
        'firewallId': firewallId,
        'identity': identity
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Firewall;
      return this.apiClient.callApi(
        '/firewall/{firewallId}/accessrights/{identity}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights/:identity
     * @param {String} firewallId ID of firewall
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Firewall}
     */
    firewallDeleteAccessrightsIdentity(firewallId, identity) {
      return this.firewallDeleteAccessrightsIdentityWithHttpInfo(firewallId, identity)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /egress/:ruleId
     * @param {String} firewallId ID of firewall
     * @param {String} ruleId ruleId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2005} and HTTP response
     */
    firewallDeleteEgressRuleIdWithHttpInfo(firewallId, ruleId) {
      let postBody = null;
      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling firewallDeleteEgressRuleId");
      }
      // verify the required parameter 'ruleId' is set
      if (ruleId === undefined || ruleId === null) {
        throw new Error("Missing the required parameter 'ruleId' when calling firewallDeleteEgressRuleId");
      }

      let pathParams = {
        'firewallId': firewallId,
        'ruleId': ruleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2005;
      return this.apiClient.callApi(
        '/firewall/{firewallId}/egress/{ruleId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /egress/:ruleId
     * @param {String} firewallId ID of firewall
     * @param {String} ruleId ruleId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2005}
     */
    firewallDeleteEgressRuleId(firewallId, ruleId) {
      return this.firewallDeleteEgressRuleIdWithHttpInfo(firewallId, ruleId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /ingress/:ruleId
     * @param {String} firewallId ID of firewall
     * @param {String} ruleId ruleId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2005} and HTTP response
     */
    firewallDeleteIngressRuleIdWithHttpInfo(firewallId, ruleId) {
      let postBody = null;
      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling firewallDeleteIngressRuleId");
      }
      // verify the required parameter 'ruleId' is set
      if (ruleId === undefined || ruleId === null) {
        throw new Error("Missing the required parameter 'ruleId' when calling firewallDeleteIngressRuleId");
      }

      let pathParams = {
        'firewallId': firewallId,
        'ruleId': ruleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2005;
      return this.apiClient.callApi(
        '/firewall/{firewallId}/ingress/{ruleId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /ingress/:ruleId
     * @param {String} firewallId ID of firewall
     * @param {String} ruleId ruleId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2005}
     */
    firewallDeleteIngressRuleId(firewallId, ruleId) {
      return this.firewallDeleteIngressRuleIdWithHttpInfo(firewallId, ruleId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag/:key
     * @param {String} firewallId ID of firewall
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    firewallDeleteTagKeyWithHttpInfo(firewallId, key) {
      let postBody = null;
      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling firewallDeleteTagKey");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling firewallDeleteTagKey");
      }

      let pathParams = {
        'firewallId': firewallId,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/firewall/{firewallId}/tag/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag/:key
     * @param {String} firewallId ID of firewall
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    firewallDeleteTagKey(firewallId, key) {
      return this.firewallDeleteTagKeyWithHttpInfo(firewallId, key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /egress/:ruleId
     * @param {String} firewallId ID of firewall
     * @param {String} ruleId ruleId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2005} and HTTP response
     */
    firewallGetEgressRuleIdWithHttpInfo(firewallId, ruleId) {
      let postBody = null;
      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling firewallGetEgressRuleId");
      }
      // verify the required parameter 'ruleId' is set
      if (ruleId === undefined || ruleId === null) {
        throw new Error("Missing the required parameter 'ruleId' when calling firewallGetEgressRuleId");
      }

      let pathParams = {
        'firewallId': firewallId,
        'ruleId': ruleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2005;
      return this.apiClient.callApi(
        '/firewall/{firewallId}/egress/{ruleId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /egress/:ruleId
     * @param {String} firewallId ID of firewall
     * @param {String} ruleId ruleId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2005}
     */
    firewallGetEgressRuleId(firewallId, ruleId) {
      return this.firewallGetEgressRuleIdWithHttpInfo(firewallId, ruleId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /ingress/:ruleId
     * @param {String} firewallId ID of firewall
     * @param {String} ruleId ruleId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2005} and HTTP response
     */
    firewallGetIngressRuleIdWithHttpInfo(firewallId, ruleId) {
      let postBody = null;
      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling firewallGetIngressRuleId");
      }
      // verify the required parameter 'ruleId' is set
      if (ruleId === undefined || ruleId === null) {
        throw new Error("Missing the required parameter 'ruleId' when calling firewallGetIngressRuleId");
      }

      let pathParams = {
        'firewallId': firewallId,
        'ruleId': ruleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2005;
      return this.apiClient.callApi(
        '/firewall/{firewallId}/ingress/{ruleId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /ingress/:ruleId
     * @param {String} firewallId ID of firewall
     * @param {String} ruleId ruleId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2005}
     */
    firewallGetIngressRuleId(firewallId, ruleId) {
      return this.firewallGetIngressRuleIdWithHttpInfo(firewallId, ruleId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services/:serviceId
     * @param {String} firewallId ID of firewall
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FirewallServices} and HTTP response
     */
    firewallGetServicesServiceIdWithHttpInfo(firewallId, serviceId) {
      let postBody = null;
      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling firewallGetServicesServiceId");
      }
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling firewallGetServicesServiceId");
      }

      let pathParams = {
        'firewallId': firewallId,
        'serviceId': serviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FirewallServices;
      return this.apiClient.callApi(
        '/firewall/{firewallId}/services/{serviceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /services/:serviceId
     * @param {String} firewallId ID of firewall
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FirewallServices}
     */
    firewallGetServicesServiceId(firewallId, serviceId) {
      return this.firewallGetServicesServiceIdWithHttpInfo(firewallId, serviceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} firewallId ID of firewall
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    firewallGetTagWithHttpInfo(firewallId) {
      let postBody = null;
      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling firewallGetTag");
      }

      let pathParams = {
        'firewallId': firewallId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/firewall/{firewallId}/tag', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} firewallId ID of firewall
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    firewallGetTag(firewallId) {
      return this.firewallGetTagWithHttpInfo(firewallId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List
     * List firewall
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @param {Object.<String, {String: String}>} opts.tag Filter by tag
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Firewall>} and HTTP response
     */
    firewallListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'tag': opts['tag']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Firewall];
      return this.apiClient.callApi(
        '/firewall', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List
     * List firewall
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @param {Object.<String, {String: String}>} opts.tag Filter by tag
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Firewall>}
     */
    firewallList(opts) {
      return this.firewallListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} firewallId ID of firewall
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    firewallListAccessrightsWithHttpInfo(firewallId) {
      let postBody = null;
      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling firewallListAccessrights");
      }

      let pathParams = {
        'firewallId': firewallId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/firewall/{firewallId}/accessrights', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights
     * @param {String} firewallId ID of firewall
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    firewallListAccessrights(firewallId) {
      return this.firewallListAccessrightsWithHttpInfo(firewallId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /egress
     * @param {String} firewallId ID of firewall
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/InlineResponse2005>} and HTTP response
     */
    firewallListEgressWithHttpInfo(firewallId) {
      let postBody = null;
      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling firewallListEgress");
      }

      let pathParams = {
        'firewallId': firewallId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [InlineResponse2005];
      return this.apiClient.callApi(
        '/firewall/{firewallId}/egress', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /egress
     * @param {String} firewallId ID of firewall
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/InlineResponse2005>}
     */
    firewallListEgress(firewallId) {
      return this.firewallListEgressWithHttpInfo(firewallId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /ingress
     * @param {String} firewallId ID of firewall
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/InlineResponse2005>} and HTTP response
     */
    firewallListIngressWithHttpInfo(firewallId) {
      let postBody = null;
      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling firewallListIngress");
      }

      let pathParams = {
        'firewallId': firewallId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [InlineResponse2005];
      return this.apiClient.callApi(
        '/firewall/{firewallId}/ingress', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /ingress
     * @param {String} firewallId ID of firewall
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/InlineResponse2005>}
     */
    firewallListIngress(firewallId) {
      return this.firewallListIngressWithHttpInfo(firewallId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /queue
     * @param {String} firewallId ID of firewall
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit $limit
     * @param {Number} opts.skip $skip
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Event>} and HTTP response
     */
    firewallListQueueWithHttpInfo(firewallId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling firewallListQueue");
      }

      let pathParams = {
        'firewallId': firewallId
      };
      let queryParams = {
        '$limit': opts['limit'],
        '$skip': opts['skip']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Event];
      return this.apiClient.callApi(
        '/firewall/{firewallId}/queue', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /queue
     * @param {String} firewallId ID of firewall
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit $limit
     * @param {Number} opts.skip $skip
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Event>}
     */
    firewallListQueue(firewallId, opts) {
      return this.firewallListQueueWithHttpInfo(firewallId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services
     * @param {String} firewallId ID of firewall
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/FirewallServices>} and HTTP response
     */
    firewallListServicesWithHttpInfo(firewallId) {
      let postBody = null;
      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling firewallListServices");
      }

      let pathParams = {
        'firewallId': firewallId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FirewallServices];
      return this.apiClient.callApi(
        '/firewall/{firewallId}/services', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /services
     * @param {String} firewallId ID of firewall
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/FirewallServices>}
     */
    firewallListServices(firewallId) {
      return this.firewallListServicesWithHttpInfo(firewallId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} firewallId ID of firewall
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    firewallPatchTagWithHttpInfo(firewallId, requestBody) {
      let postBody = requestBody;
      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling firewallPatchTag");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling firewallPatchTag");
      }

      let pathParams = {
        'firewallId': firewallId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/firewall/{firewallId}/tag', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} firewallId ID of firewall
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    firewallPatchTag(firewallId, requestBody) {
      return this.firewallPatchTagWithHttpInfo(firewallId, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} firewallId ID of firewall
     * @param {module:model/FirewallPostAccessrights} firewallPostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Firewall} and HTTP response
     */
    firewallPostAccessrightsWithHttpInfo(firewallId, firewallPostAccessrights) {
      let postBody = firewallPostAccessrights;
      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling firewallPostAccessrights");
      }
      // verify the required parameter 'firewallPostAccessrights' is set
      if (firewallPostAccessrights === undefined || firewallPostAccessrights === null) {
        throw new Error("Missing the required parameter 'firewallPostAccessrights' when calling firewallPostAccessrights");
      }

      let pathParams = {
        'firewallId': firewallId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Firewall;
      return this.apiClient.callApi(
        '/firewall/{firewallId}/accessrights', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights
     * @param {String} firewallId ID of firewall
     * @param {module:model/FirewallPostAccessrights} firewallPostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Firewall}
     */
    firewallPostAccessrights(firewallId, firewallPostAccessrights) {
      return this.firewallPostAccessrightsWithHttpInfo(firewallId, firewallPostAccessrights)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /egress
     * @param {String} firewallId ID of firewall
     * @param {module:model/FirewallPostEgress} firewallPostEgress 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2005} and HTTP response
     */
    firewallPostEgressWithHttpInfo(firewallId, firewallPostEgress) {
      let postBody = firewallPostEgress;
      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling firewallPostEgress");
      }
      // verify the required parameter 'firewallPostEgress' is set
      if (firewallPostEgress === undefined || firewallPostEgress === null) {
        throw new Error("Missing the required parameter 'firewallPostEgress' when calling firewallPostEgress");
      }

      let pathParams = {
        'firewallId': firewallId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2005;
      return this.apiClient.callApi(
        '/firewall/{firewallId}/egress', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /egress
     * @param {String} firewallId ID of firewall
     * @param {module:model/FirewallPostEgress} firewallPostEgress 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2005}
     */
    firewallPostEgress(firewallId, firewallPostEgress) {
      return this.firewallPostEgressWithHttpInfo(firewallId, firewallPostEgress)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /ingress
     * @param {String} firewallId ID of firewall
     * @param {module:model/FirewallPostIngress} firewallPostIngress 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2005} and HTTP response
     */
    firewallPostIngressWithHttpInfo(firewallId, firewallPostIngress) {
      let postBody = firewallPostIngress;
      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling firewallPostIngress");
      }
      // verify the required parameter 'firewallPostIngress' is set
      if (firewallPostIngress === undefined || firewallPostIngress === null) {
        throw new Error("Missing the required parameter 'firewallPostIngress' when calling firewallPostIngress");
      }

      let pathParams = {
        'firewallId': firewallId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2005;
      return this.apiClient.callApi(
        '/firewall/{firewallId}/ingress', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /ingress
     * @param {String} firewallId ID of firewall
     * @param {module:model/FirewallPostIngress} firewallPostIngress 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2005}
     */
    firewallPostIngress(firewallId, firewallPostIngress) {
      return this.firewallPostIngressWithHttpInfo(firewallId, firewallPostIngress)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /egress
     * @param {String} firewallId ID of firewall
     * @param {Array.<Object>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/InlineResponse2005>} and HTTP response
     */
    firewallPutEgressWithHttpInfo(firewallId, requestBody) {
      let postBody = requestBody;
      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling firewallPutEgress");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling firewallPutEgress");
      }

      let pathParams = {
        'firewallId': firewallId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [InlineResponse2005];
      return this.apiClient.callApi(
        '/firewall/{firewallId}/egress', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /egress
     * @param {String} firewallId ID of firewall
     * @param {Array.<Object>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/InlineResponse2005>}
     */
    firewallPutEgress(firewallId, requestBody) {
      return this.firewallPutEgressWithHttpInfo(firewallId, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /ingress
     * @param {String} firewallId ID of firewall
     * @param {Array.<Object>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/InlineResponse2005>} and HTTP response
     */
    firewallPutIngressWithHttpInfo(firewallId, requestBody) {
      let postBody = requestBody;
      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling firewallPutIngress");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling firewallPutIngress");
      }

      let pathParams = {
        'firewallId': firewallId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [InlineResponse2005];
      return this.apiClient.callApi(
        '/firewall/{firewallId}/ingress', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /ingress
     * @param {String} firewallId ID of firewall
     * @param {Array.<Object>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/InlineResponse2005>}
     */
    firewallPutIngress(firewallId, requestBody) {
      return this.firewallPutIngressWithHttpInfo(firewallId, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} firewallId ID of firewall
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    firewallPutTagWithHttpInfo(firewallId, requestBody) {
      let postBody = requestBody;
      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling firewallPutTag");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling firewallPutTag");
      }

      let pathParams = {
        'firewallId': firewallId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/firewall/{firewallId}/tag', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} firewallId ID of firewall
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    firewallPutTag(firewallId, requestBody) {
      return this.firewallPutTagWithHttpInfo(firewallId, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get
     * Returns a single firewall
     * @param {String} firewallId ID of firewall
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Firewall} and HTTP response
     */
    firewallShowWithHttpInfo(firewallId) {
      let postBody = null;
      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling firewallShow");
      }

      let pathParams = {
        'firewallId': firewallId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Firewall;
      return this.apiClient.callApi(
        '/firewall/{firewallId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get
     * Returns a single firewall
     * @param {String} firewallId ID of firewall
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Firewall}
     */
    firewallShow(firewallId) {
      return this.firewallShowWithHttpInfo(firewallId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update
     * Returns modified firewall
     * @param {String} firewallId ID of firewall
     * @param {module:model/FirewallUpdate} firewallUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Firewall} and HTTP response
     */
    firewallUpdateWithHttpInfo(firewallId, firewallUpdate) {
      let postBody = firewallUpdate;
      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling firewallUpdate");
      }
      // verify the required parameter 'firewallUpdate' is set
      if (firewallUpdate === undefined || firewallUpdate === null) {
        throw new Error("Missing the required parameter 'firewallUpdate' when calling firewallUpdate");
      }

      let pathParams = {
        'firewallId': firewallId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Firewall;
      return this.apiClient.callApi(
        '/firewall/{firewallId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update
     * Returns modified firewall
     * @param {String} firewallId ID of firewall
     * @param {module:model/FirewallUpdate} firewallUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Firewall}
     */
    firewallUpdate(firewallId, firewallUpdate) {
      return this.firewallUpdateWithHttpInfo(firewallId, firewallUpdate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
