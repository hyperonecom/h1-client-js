/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Event from '../model/Event';
import InlineResponse400 from '../model/InlineResponse400';
import Replica from '../model/Replica';
import ReplicaActionImage from '../model/ReplicaActionImage';
import ReplicaCreate from '../model/ReplicaCreate';
import ReplicaPostAccessrights from '../model/ReplicaPostAccessrights';
import ReplicaServices from '../model/ReplicaServices';

/**
* Replica service.
* @module h1-client/ReplicaApi
* @version 0.0.3
*/
export default class ReplicaApi {

    /**
    * Constructs a new ReplicaApi. 
    * @alias module:h1-client/ReplicaApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * /actions/image
     * Action image
     * @param {String} replicaId ID of replica
     * @param {module:model/ReplicaActionImage} replicaActionImage 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Replica} and HTTP response
     */
    replicaActionImageWithHttpInfo(replicaId, replicaActionImage, opts) {
      opts = opts || {};
      let postBody = replicaActionImage;
      // verify the required parameter 'replicaId' is set
      if (replicaId === undefined || replicaId === null) {
        throw new Error("Missing the required parameter 'replicaId' when calling replicaActionImage");
      }
      // verify the required parameter 'replicaActionImage' is set
      if (replicaActionImage === undefined || replicaActionImage === null) {
        throw new Error("Missing the required parameter 'replicaActionImage' when calling replicaActionImage");
      }

      let pathParams = {
        'replicaId': replicaId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-idempotency-key': opts['xIdempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Replica;
      return this.apiClient.callApi(
        '/replica/{replicaId}/actions/image', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /actions/image
     * Action image
     * @param {String} replicaId ID of replica
     * @param {module:model/ReplicaActionImage} replicaActionImage 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Replica}
     */
    replicaActionImage(replicaId, replicaActionImage, opts) {
      return this.replicaActionImageWithHttpInfo(replicaId, replicaActionImage, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create
     * Create replica
     * @param {module:model/ReplicaCreate} replicaCreate 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Replica} and HTTP response
     */
    replicaCreateWithHttpInfo(replicaCreate, opts) {
      opts = opts || {};
      let postBody = replicaCreate;
      // verify the required parameter 'replicaCreate' is set
      if (replicaCreate === undefined || replicaCreate === null) {
        throw new Error("Missing the required parameter 'replicaCreate' when calling replicaCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-idempotency-key': opts['xIdempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Replica;
      return this.apiClient.callApi(
        '/replica', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create
     * Create replica
     * @param {module:model/ReplicaCreate} replicaCreate 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xIdempotencyKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Replica}
     */
    replicaCreate(replicaCreate, opts) {
      return this.replicaCreateWithHttpInfo(replicaCreate, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete
     * @param {String} replicaId ID of replica
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    replicaDeleteWithHttpInfo(replicaId) {
      let postBody = null;
      // verify the required parameter 'replicaId' is set
      if (replicaId === undefined || replicaId === null) {
        throw new Error("Missing the required parameter 'replicaId' when calling replicaDelete");
      }

      let pathParams = {
        'replicaId': replicaId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/replica/{replicaId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete
     * @param {String} replicaId ID of replica
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    replicaDelete(replicaId) {
      return this.replicaDeleteWithHttpInfo(replicaId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights/:identity
     * @param {String} replicaId ID of replica
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Replica} and HTTP response
     */
    replicaDeleteAccessrightsIdentityWithHttpInfo(replicaId, identity) {
      let postBody = null;
      // verify the required parameter 'replicaId' is set
      if (replicaId === undefined || replicaId === null) {
        throw new Error("Missing the required parameter 'replicaId' when calling replicaDeleteAccessrightsIdentity");
      }
      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling replicaDeleteAccessrightsIdentity");
      }

      let pathParams = {
        'replicaId': replicaId,
        'identity': identity
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Replica;
      return this.apiClient.callApi(
        '/replica/{replicaId}/accessrights/{identity}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights/:identity
     * @param {String} replicaId ID of replica
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Replica}
     */
    replicaDeleteAccessrightsIdentity(replicaId, identity) {
      return this.replicaDeleteAccessrightsIdentityWithHttpInfo(replicaId, identity)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag/:key
     * @param {String} replicaId ID of replica
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    replicaDeleteTagKeyWithHttpInfo(replicaId, key) {
      let postBody = null;
      // verify the required parameter 'replicaId' is set
      if (replicaId === undefined || replicaId === null) {
        throw new Error("Missing the required parameter 'replicaId' when calling replicaDeleteTagKey");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling replicaDeleteTagKey");
      }

      let pathParams = {
        'replicaId': replicaId,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/replica/{replicaId}/tag/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag/:key
     * @param {String} replicaId ID of replica
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    replicaDeleteTagKey(replicaId, key) {
      return this.replicaDeleteTagKeyWithHttpInfo(replicaId, key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services/:serviceId
     * @param {String} replicaId ID of replica
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ReplicaServices} and HTTP response
     */
    replicaGetServicesServiceIdWithHttpInfo(replicaId, serviceId) {
      let postBody = null;
      // verify the required parameter 'replicaId' is set
      if (replicaId === undefined || replicaId === null) {
        throw new Error("Missing the required parameter 'replicaId' when calling replicaGetServicesServiceId");
      }
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling replicaGetServicesServiceId");
      }

      let pathParams = {
        'replicaId': replicaId,
        'serviceId': serviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReplicaServices;
      return this.apiClient.callApi(
        '/replica/{replicaId}/services/{serviceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /services/:serviceId
     * @param {String} replicaId ID of replica
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ReplicaServices}
     */
    replicaGetServicesServiceId(replicaId, serviceId) {
      return this.replicaGetServicesServiceIdWithHttpInfo(replicaId, serviceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} replicaId ID of replica
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    replicaGetTagWithHttpInfo(replicaId) {
      let postBody = null;
      // verify the required parameter 'replicaId' is set
      if (replicaId === undefined || replicaId === null) {
        throw new Error("Missing the required parameter 'replicaId' when calling replicaGetTag");
      }

      let pathParams = {
        'replicaId': replicaId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/replica/{replicaId}/tag', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} replicaId ID of replica
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    replicaGetTag(replicaId) {
      return this.replicaGetTagWithHttpInfo(replicaId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List
     * List replica
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Replica>} and HTTP response
     */
    replicaListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Replica];
      return this.apiClient.callApi(
        '/replica', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List
     * List replica
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Replica>}
     */
    replicaList(opts) {
      return this.replicaListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} replicaId ID of replica
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    replicaListAccessrightsWithHttpInfo(replicaId) {
      let postBody = null;
      // verify the required parameter 'replicaId' is set
      if (replicaId === undefined || replicaId === null) {
        throw new Error("Missing the required parameter 'replicaId' when calling replicaListAccessrights");
      }

      let pathParams = {
        'replicaId': replicaId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/replica/{replicaId}/accessrights', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights
     * @param {String} replicaId ID of replica
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    replicaListAccessrights(replicaId) {
      return this.replicaListAccessrightsWithHttpInfo(replicaId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /queue
     * @param {String} replicaId ID of replica
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit $limit
     * @param {Number} opts.skip $skip
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Event>} and HTTP response
     */
    replicaListQueueWithHttpInfo(replicaId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'replicaId' is set
      if (replicaId === undefined || replicaId === null) {
        throw new Error("Missing the required parameter 'replicaId' when calling replicaListQueue");
      }

      let pathParams = {
        'replicaId': replicaId
      };
      let queryParams = {
        '$limit': opts['limit'],
        '$skip': opts['skip']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Event];
      return this.apiClient.callApi(
        '/replica/{replicaId}/queue', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /queue
     * @param {String} replicaId ID of replica
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit $limit
     * @param {Number} opts.skip $skip
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Event>}
     */
    replicaListQueue(replicaId, opts) {
      return this.replicaListQueueWithHttpInfo(replicaId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services
     * @param {String} replicaId ID of replica
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ReplicaServices>} and HTTP response
     */
    replicaListServicesWithHttpInfo(replicaId) {
      let postBody = null;
      // verify the required parameter 'replicaId' is set
      if (replicaId === undefined || replicaId === null) {
        throw new Error("Missing the required parameter 'replicaId' when calling replicaListServices");
      }

      let pathParams = {
        'replicaId': replicaId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ReplicaServices];
      return this.apiClient.callApi(
        '/replica/{replicaId}/services', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /services
     * @param {String} replicaId ID of replica
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ReplicaServices>}
     */
    replicaListServices(replicaId) {
      return this.replicaListServicesWithHttpInfo(replicaId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} replicaId ID of replica
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    replicaPatchTagWithHttpInfo(replicaId, requestBody) {
      let postBody = requestBody;
      // verify the required parameter 'replicaId' is set
      if (replicaId === undefined || replicaId === null) {
        throw new Error("Missing the required parameter 'replicaId' when calling replicaPatchTag");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling replicaPatchTag");
      }

      let pathParams = {
        'replicaId': replicaId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/replica/{replicaId}/tag', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} replicaId ID of replica
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    replicaPatchTag(replicaId, requestBody) {
      return this.replicaPatchTagWithHttpInfo(replicaId, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} replicaId ID of replica
     * @param {module:model/ReplicaPostAccessrights} replicaPostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Replica} and HTTP response
     */
    replicaPostAccessrightsWithHttpInfo(replicaId, replicaPostAccessrights) {
      let postBody = replicaPostAccessrights;
      // verify the required parameter 'replicaId' is set
      if (replicaId === undefined || replicaId === null) {
        throw new Error("Missing the required parameter 'replicaId' when calling replicaPostAccessrights");
      }
      // verify the required parameter 'replicaPostAccessrights' is set
      if (replicaPostAccessrights === undefined || replicaPostAccessrights === null) {
        throw new Error("Missing the required parameter 'replicaPostAccessrights' when calling replicaPostAccessrights");
      }

      let pathParams = {
        'replicaId': replicaId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Replica;
      return this.apiClient.callApi(
        '/replica/{replicaId}/accessrights', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights
     * @param {String} replicaId ID of replica
     * @param {module:model/ReplicaPostAccessrights} replicaPostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Replica}
     */
    replicaPostAccessrights(replicaId, replicaPostAccessrights) {
      return this.replicaPostAccessrightsWithHttpInfo(replicaId, replicaPostAccessrights)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} replicaId ID of replica
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    replicaPutTagWithHttpInfo(replicaId, requestBody) {
      let postBody = requestBody;
      // verify the required parameter 'replicaId' is set
      if (replicaId === undefined || replicaId === null) {
        throw new Error("Missing the required parameter 'replicaId' when calling replicaPutTag");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling replicaPutTag");
      }

      let pathParams = {
        'replicaId': replicaId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/replica/{replicaId}/tag', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} replicaId ID of replica
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    replicaPutTag(replicaId, requestBody) {
      return this.replicaPutTagWithHttpInfo(replicaId, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get
     * Returns a single replica
     * @param {String} replicaId ID of replica
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Replica} and HTTP response
     */
    replicaShowWithHttpInfo(replicaId) {
      let postBody = null;
      // verify the required parameter 'replicaId' is set
      if (replicaId === undefined || replicaId === null) {
        throw new Error("Missing the required parameter 'replicaId' when calling replicaShow");
      }

      let pathParams = {
        'replicaId': replicaId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Replica;
      return this.apiClient.callApi(
        '/replica/{replicaId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get
     * Returns a single replica
     * @param {String} replicaId ID of replica
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Replica}
     */
    replicaShow(replicaId) {
      return this.replicaShowWithHttpInfo(replicaId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
