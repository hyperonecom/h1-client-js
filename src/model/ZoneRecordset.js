/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ZoneRecordset0Record from './ZoneRecordset0Record';

/**
 * The ZoneRecordset model module.
 * @module model/ZoneRecordset
 * @version 0.0.3
 */
class ZoneRecordset {
    /**
     * Constructs a new <code>ZoneRecordset</code>.
     * @alias module:model/ZoneRecordset
     */
    constructor() { 
        
        ZoneRecordset.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ZoneRecordset</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ZoneRecordset} obj Optional instance to populate.
     * @return {module:model/ZoneRecordset} The populated <code>ZoneRecordset</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ZoneRecordset();

            if (data.hasOwnProperty('record')) {
                obj['record'] = ApiClient.convertToType(data['record'], [ZoneRecordset0Record]);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('ttl')) {
                obj['ttl'] = ApiClient.convertToType(data['ttl'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {Array.<module:model/ZoneRecordset0Record>} record
 */
ZoneRecordset.prototype['record'] = undefined;

/**
 * @member {module:model/ZoneRecordset.TypeEnum} type
 */
ZoneRecordset.prototype['type'] = undefined;

/**
 * @member {String} name
 */
ZoneRecordset.prototype['name'] = undefined;

/**
 * @member {Number} ttl
 */
ZoneRecordset.prototype['ttl'] = undefined;

/**
 * @member {String} id
 */
ZoneRecordset.prototype['id'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ZoneRecordset['TypeEnum'] = {

    /**
     * value: "A"
     * @const
     */
    "A": "A",

    /**
     * value: "AAAA"
     * @const
     */
    "AAAA": "AAAA",

    /**
     * value: "CAA"
     * @const
     */
    "CAA": "CAA",

    /**
     * value: "CNAME"
     * @const
     */
    "CNAME": "CNAME",

    /**
     * value: "MX"
     * @const
     */
    "MX": "MX",

    /**
     * value: "NS"
     * @const
     */
    "NS": "NS",

    /**
     * value: "PTR"
     * @const
     */
    "PTR": "PTR",

    /**
     * value: "SOA"
     * @const
     */
    "SOA": "SOA",

    /**
     * value: "SRV"
     * @const
     */
    "SRV": "SRV",

    /**
     * value: "TXT"
     * @const
     */
    "TXT": "TXT"
};



export default ZoneRecordset;

