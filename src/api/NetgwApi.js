/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Event', 'model/InlineObject20', 'model/InlineObject21', 'model/InlineObject22', 'model/Netgw', 'model/NetgwServices'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Event'), require('../model/InlineObject20'), require('../model/InlineObject21'), require('../model/InlineObject22'), require('../model/Netgw'), require('../model/NetgwServices'));
  } else {
    // Browser globals (root is window)
    if (!root.HyperOneApi) {
      root.HyperOneApi = {};
    }
    root.HyperOneApi.NetgwApi = factory(root.HyperOneApi.ApiClient, root.HyperOneApi.Event, root.HyperOneApi.InlineObject20, root.HyperOneApi.InlineObject21, root.HyperOneApi.InlineObject22, root.HyperOneApi.Netgw, root.HyperOneApi.NetgwServices);
  }
}(this, function(ApiClient, Event, InlineObject20, InlineObject21, InlineObject22, Netgw, NetgwServices) {
  'use strict';

  /**
   * Netgw service.
   * @module api/NetgwApi
   * @version 1
   */

  /**
   * Constructs a new NetgwApi. 
   * @alias module:api/NetgwApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * /actions/attach
     * Action attach
     * @param {String} netgwId ID of netgw
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Netgw} and HTTP response
     */
    this.actionNetgwAttachWithHttpInfo = function(netgwId) {
      var postBody = null;

      // verify the required parameter 'netgwId' is set
      if (netgwId === undefined || netgwId === null) {
        throw new Error("Missing the required parameter 'netgwId' when calling actionNetgwAttach");
      }


      var pathParams = {
        'netgwId': netgwId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Netgw;

      return this.apiClient.callApi(
        '/netgw/{netgwId}/actions/attach', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /actions/attach
     * Action attach
     * @param {String} netgwId ID of netgw
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Netgw}
     */
    this.actionNetgwAttach = function(netgwId) {
      return this.actionNetgwAttachWithHttpInfo(netgwId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/detach
     * Action detach
     * @param {String} netgwId ID of netgw
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Netgw} and HTTP response
     */
    this.actionNetgwDetachWithHttpInfo = function(netgwId) {
      var postBody = null;

      // verify the required parameter 'netgwId' is set
      if (netgwId === undefined || netgwId === null) {
        throw new Error("Missing the required parameter 'netgwId' when calling actionNetgwDetach");
      }


      var pathParams = {
        'netgwId': netgwId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Netgw;

      return this.apiClient.callApi(
        '/netgw/{netgwId}/actions/detach', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /actions/detach
     * Action detach
     * @param {String} netgwId ID of netgw
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Netgw}
     */
    this.actionNetgwDetach = function(netgwId) {
      return this.actionNetgwDetachWithHttpInfo(netgwId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create
     * Create netgw
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject20} opts.inlineObject20 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Netgw} and HTTP response
     */
    this.createNetgwWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['inlineObject20'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Netgw;

      return this.apiClient.callApi(
        '/netgw', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create
     * Create netgw
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject20} opts.inlineObject20 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Netgw}
     */
    this.createNetgw = function(opts) {
      return this.createNetgwWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete
     * @param {String} netgwId ID of netgw
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteNetgwWithHttpInfo = function(netgwId) {
      var postBody = null;

      // verify the required parameter 'netgwId' is set
      if (netgwId === undefined || netgwId === null) {
        throw new Error("Missing the required parameter 'netgwId' when calling deleteNetgw");
      }


      var pathParams = {
        'netgwId': netgwId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/netgw/{netgwId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete
     * @param {String} netgwId ID of netgw
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteNetgw = function(netgwId) {
      return this.deleteNetgwWithHttpInfo(netgwId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List
     * List netgw
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Netgw>} and HTTP response
     */
    this.listNetgwWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'name': opts['name'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Netgw];

      return this.apiClient.callApi(
        '/netgw', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List
     * List netgw
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Netgw>}
     */
    this.listNetgw = function(opts) {
      return this.listNetgwWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights/:identity
     * @param {String} netgwId ID of netgw
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Netgw} and HTTP response
     */
    this.operationNetgwDeleteaccessrightsIdentityWithHttpInfo = function(netgwId, identity) {
      var postBody = null;

      // verify the required parameter 'netgwId' is set
      if (netgwId === undefined || netgwId === null) {
        throw new Error("Missing the required parameter 'netgwId' when calling operationNetgwDeleteaccessrightsIdentity");
      }

      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling operationNetgwDeleteaccessrightsIdentity");
      }


      var pathParams = {
        'netgwId': netgwId,
        'identity': identity
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Netgw;

      return this.apiClient.callApi(
        '/netgw/{netgwId}/accessrights/{identity}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /accessrights/:identity
     * @param {String} netgwId ID of netgw
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Netgw}
     */
    this.operationNetgwDeleteaccessrightsIdentity = function(netgwId, identity) {
      return this.operationNetgwDeleteaccessrightsIdentityWithHttpInfo(netgwId, identity)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag/:key
     * @param {String} netgwId ID of netgw
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    this.operationNetgwDeletetagKeyWithHttpInfo = function(netgwId, key) {
      var postBody = null;

      // verify the required parameter 'netgwId' is set
      if (netgwId === undefined || netgwId === null) {
        throw new Error("Missing the required parameter 'netgwId' when calling operationNetgwDeletetagKey");
      }

      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling operationNetgwDeletetagKey");
      }


      var pathParams = {
        'netgwId': netgwId,
        'key': key
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = {'String': 'String'};

      return this.apiClient.callApi(
        '/netgw/{netgwId}/tag/{key}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /tag/:key
     * @param {String} netgwId ID of netgw
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    this.operationNetgwDeletetagKey = function(netgwId, key) {
      return this.operationNetgwDeletetagKeyWithHttpInfo(netgwId, key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services/:serviceId
     * @param {String} netgwId ID of netgw
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NetgwServices} and HTTP response
     */
    this.operationNetgwGetservicesServiceIdWithHttpInfo = function(netgwId, serviceId) {
      var postBody = null;

      // verify the required parameter 'netgwId' is set
      if (netgwId === undefined || netgwId === null) {
        throw new Error("Missing the required parameter 'netgwId' when calling operationNetgwGetservicesServiceId");
      }

      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling operationNetgwGetservicesServiceId");
      }


      var pathParams = {
        'netgwId': netgwId,
        'serviceId': serviceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = NetgwServices;

      return this.apiClient.callApi(
        '/netgw/{netgwId}/services/{serviceId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /services/:serviceId
     * @param {String} netgwId ID of netgw
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NetgwServices}
     */
    this.operationNetgwGetservicesServiceId = function(netgwId, serviceId) {
      return this.operationNetgwGetservicesServiceIdWithHttpInfo(netgwId, serviceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag/
     * @param {String} netgwId ID of netgw
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    this.operationNetgwGettagWithHttpInfo = function(netgwId) {
      var postBody = null;

      // verify the required parameter 'netgwId' is set
      if (netgwId === undefined || netgwId === null) {
        throw new Error("Missing the required parameter 'netgwId' when calling operationNetgwGettag");
      }


      var pathParams = {
        'netgwId': netgwId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = {'String': 'String'};

      return this.apiClient.callApi(
        '/netgw/{netgwId}/tag/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /tag/
     * @param {String} netgwId ID of netgw
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    this.operationNetgwGettag = function(netgwId) {
      return this.operationNetgwGettagWithHttpInfo(netgwId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights/
     * @param {String} netgwId ID of netgw
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    this.operationNetgwListaccessrightsWithHttpInfo = function(netgwId) {
      var postBody = null;

      // verify the required parameter 'netgwId' is set
      if (netgwId === undefined || netgwId === null) {
        throw new Error("Missing the required parameter 'netgwId' when calling operationNetgwListaccessrights");
      }


      var pathParams = {
        'netgwId': netgwId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/netgw/{netgwId}/accessrights/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /accessrights/
     * @param {String} netgwId ID of netgw
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    this.operationNetgwListaccessrights = function(netgwId) {
      return this.operationNetgwListaccessrightsWithHttpInfo(netgwId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /queue/
     * @param {String} netgwId ID of netgw
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Event>} and HTTP response
     */
    this.operationNetgwListqueueWithHttpInfo = function(netgwId) {
      var postBody = null;

      // verify the required parameter 'netgwId' is set
      if (netgwId === undefined || netgwId === null) {
        throw new Error("Missing the required parameter 'netgwId' when calling operationNetgwListqueue");
      }


      var pathParams = {
        'netgwId': netgwId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Event];

      return this.apiClient.callApi(
        '/netgw/{netgwId}/queue/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /queue/
     * @param {String} netgwId ID of netgw
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Event>}
     */
    this.operationNetgwListqueue = function(netgwId) {
      return this.operationNetgwListqueueWithHttpInfo(netgwId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services/
     * @param {String} netgwId ID of netgw
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/NetgwServices>} and HTTP response
     */
    this.operationNetgwListservicesWithHttpInfo = function(netgwId) {
      var postBody = null;

      // verify the required parameter 'netgwId' is set
      if (netgwId === undefined || netgwId === null) {
        throw new Error("Missing the required parameter 'netgwId' when calling operationNetgwListservices");
      }


      var pathParams = {
        'netgwId': netgwId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [NetgwServices];

      return this.apiClient.callApi(
        '/netgw/{netgwId}/services/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /services/
     * @param {String} netgwId ID of netgw
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/NetgwServices>}
     */
    this.operationNetgwListservices = function(netgwId) {
      return this.operationNetgwListservicesWithHttpInfo(netgwId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag/
     * @param {String} netgwId ID of netgw
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    this.operationNetgwPatchtagWithHttpInfo = function(netgwId, requestBody) {
      var postBody = requestBody;

      // verify the required parameter 'netgwId' is set
      if (netgwId === undefined || netgwId === null) {
        throw new Error("Missing the required parameter 'netgwId' when calling operationNetgwPatchtag");
      }

      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling operationNetgwPatchtag");
      }


      var pathParams = {
        'netgwId': netgwId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = {'String': 'String'};

      return this.apiClient.callApi(
        '/netgw/{netgwId}/tag/', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /tag/
     * @param {String} netgwId ID of netgw
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    this.operationNetgwPatchtag = function(netgwId, requestBody) {
      return this.operationNetgwPatchtagWithHttpInfo(netgwId, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights/
     * @param {String} netgwId ID of netgw
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject22} opts.inlineObject22 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    this.operationNetgwPostaccessrightsWithHttpInfo = function(netgwId, opts) {
      opts = opts || {};
      var postBody = opts['inlineObject22'];

      // verify the required parameter 'netgwId' is set
      if (netgwId === undefined || netgwId === null) {
        throw new Error("Missing the required parameter 'netgwId' when calling operationNetgwPostaccessrights");
      }


      var pathParams = {
        'netgwId': netgwId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/netgw/{netgwId}/accessrights/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /accessrights/
     * @param {String} netgwId ID of netgw
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject22} opts.inlineObject22 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    this.operationNetgwPostaccessrights = function(netgwId, opts) {
      return this.operationNetgwPostaccessrightsWithHttpInfo(netgwId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get
     * Returns a single netgw
     * @param {String} netgwId ID of netgw
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Netgw} and HTTP response
     */
    this.showNetgwWithHttpInfo = function(netgwId) {
      var postBody = null;

      // verify the required parameter 'netgwId' is set
      if (netgwId === undefined || netgwId === null) {
        throw new Error("Missing the required parameter 'netgwId' when calling showNetgw");
      }


      var pathParams = {
        'netgwId': netgwId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Netgw;

      return this.apiClient.callApi(
        '/netgw/{netgwId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get
     * Returns a single netgw
     * @param {String} netgwId ID of netgw
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Netgw}
     */
    this.showNetgw = function(netgwId) {
      return this.showNetgwWithHttpInfo(netgwId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update
     * Returns modified netgw
     * @param {String} netgwId ID of netgw
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject21} opts.inlineObject21 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Netgw} and HTTP response
     */
    this.updateNetgwWithHttpInfo = function(netgwId, opts) {
      opts = opts || {};
      var postBody = opts['inlineObject21'];

      // verify the required parameter 'netgwId' is set
      if (netgwId === undefined || netgwId === null) {
        throw new Error("Missing the required parameter 'netgwId' when calling updateNetgw");
      }


      var pathParams = {
        'netgwId': netgwId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Netgw;

      return this.apiClient.callApi(
        '/netgw/{netgwId}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update
     * Returns modified netgw
     * @param {String} netgwId ID of netgw
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject21} opts.inlineObject21 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Netgw}
     */
    this.updateNetgw = function(netgwId, opts) {
      return this.updateNetgwWithHttpInfo(netgwId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
