/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Event', 'model/Firewall', 'model/FirewallActionAttach', 'model/FirewallActionTransfer', 'model/FirewallCreate', 'model/FirewallPostAccessrights', 'model/FirewallPostEgress', 'model/FirewallPostIngress', 'model/FirewallServices', 'model/FirewallUpdate', 'model/InlineResponse200'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Event'), require('../model/Firewall'), require('../model/FirewallActionAttach'), require('../model/FirewallActionTransfer'), require('../model/FirewallCreate'), require('../model/FirewallPostAccessrights'), require('../model/FirewallPostEgress'), require('../model/FirewallPostIngress'), require('../model/FirewallServices'), require('../model/FirewallUpdate'), require('../model/InlineResponse200'));
  } else {
    // Browser globals (root is window)
    if (!root.HyperOneApi) {
      root.HyperOneApi = {};
    }
    root.HyperOneApi.FirewallApi = factory(root.HyperOneApi.ApiClient, root.HyperOneApi.Event, root.HyperOneApi.Firewall, root.HyperOneApi.FirewallActionAttach, root.HyperOneApi.FirewallActionTransfer, root.HyperOneApi.FirewallCreate, root.HyperOneApi.FirewallPostAccessrights, root.HyperOneApi.FirewallPostEgress, root.HyperOneApi.FirewallPostIngress, root.HyperOneApi.FirewallServices, root.HyperOneApi.FirewallUpdate, root.HyperOneApi.InlineResponse200);
  }
}(this, function(ApiClient, Event, Firewall, FirewallActionAttach, FirewallActionTransfer, FirewallCreate, FirewallPostAccessrights, FirewallPostEgress, FirewallPostIngress, FirewallServices, FirewallUpdate, InlineResponse200) {
  'use strict';

  /**
   * Firewall service.
   * @module api/FirewallApi
   * @version 0.0.2
   */

  /**
   * Constructs a new FirewallApi. 
   * @alias module:api/FirewallApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * /actions/attach
     * Action attach
     * @param {String} firewallId ID of firewall
     * @param {module:model/FirewallActionAttach} firewallActionAttach 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Firewall} and HTTP response
     */
    this.firewallActionAttachWithHttpInfo = function(firewallId, firewallActionAttach) {
      var postBody = firewallActionAttach;

      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling firewallActionAttach");
      }

      // verify the required parameter 'firewallActionAttach' is set
      if (firewallActionAttach === undefined || firewallActionAttach === null) {
        throw new Error("Missing the required parameter 'firewallActionAttach' when calling firewallActionAttach");
      }


      var pathParams = {
        'firewallId': firewallId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Firewall;

      return this.apiClient.callApi(
        '/firewall/{firewallId}/actions/attach', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /actions/attach
     * Action attach
     * @param {String} firewallId ID of firewall
     * @param {module:model/FirewallActionAttach} firewallActionAttach 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Firewall}
     */
    this.firewallActionAttach = function(firewallId, firewallActionAttach) {
      return this.firewallActionAttachWithHttpInfo(firewallId, firewallActionAttach)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/detach
     * Action detach
     * @param {String} firewallId ID of firewall
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Firewall} and HTTP response
     */
    this.firewallActionDetachWithHttpInfo = function(firewallId) {
      var postBody = null;

      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling firewallActionDetach");
      }


      var pathParams = {
        'firewallId': firewallId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Firewall;

      return this.apiClient.callApi(
        '/firewall/{firewallId}/actions/detach', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /actions/detach
     * Action detach
     * @param {String} firewallId ID of firewall
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Firewall}
     */
    this.firewallActionDetach = function(firewallId) {
      return this.firewallActionDetachWithHttpInfo(firewallId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/transfer
     * Action transfer
     * @param {String} firewallId ID of firewall
     * @param {module:model/FirewallActionTransfer} firewallActionTransfer 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Firewall} and HTTP response
     */
    this.firewallActionTransferWithHttpInfo = function(firewallId, firewallActionTransfer) {
      var postBody = firewallActionTransfer;

      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling firewallActionTransfer");
      }

      // verify the required parameter 'firewallActionTransfer' is set
      if (firewallActionTransfer === undefined || firewallActionTransfer === null) {
        throw new Error("Missing the required parameter 'firewallActionTransfer' when calling firewallActionTransfer");
      }


      var pathParams = {
        'firewallId': firewallId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Firewall;

      return this.apiClient.callApi(
        '/firewall/{firewallId}/actions/transfer', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /actions/transfer
     * Action transfer
     * @param {String} firewallId ID of firewall
     * @param {module:model/FirewallActionTransfer} firewallActionTransfer 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Firewall}
     */
    this.firewallActionTransfer = function(firewallId, firewallActionTransfer) {
      return this.firewallActionTransferWithHttpInfo(firewallId, firewallActionTransfer)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create
     * Create firewall
     * @param {module:model/FirewallCreate} firewallCreate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Firewall} and HTTP response
     */
    this.firewallCreateWithHttpInfo = function(firewallCreate) {
      var postBody = firewallCreate;

      // verify the required parameter 'firewallCreate' is set
      if (firewallCreate === undefined || firewallCreate === null) {
        throw new Error("Missing the required parameter 'firewallCreate' when calling firewallCreate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Firewall;

      return this.apiClient.callApi(
        '/firewall', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create
     * Create firewall
     * @param {module:model/FirewallCreate} firewallCreate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Firewall}
     */
    this.firewallCreate = function(firewallCreate) {
      return this.firewallCreateWithHttpInfo(firewallCreate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete
     * @param {String} firewallId ID of firewall
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.firewallDeleteWithHttpInfo = function(firewallId) {
      var postBody = null;

      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling firewallDelete");
      }


      var pathParams = {
        'firewallId': firewallId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/firewall/{firewallId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete
     * @param {String} firewallId ID of firewall
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.firewallDelete = function(firewallId) {
      return this.firewallDeleteWithHttpInfo(firewallId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights/:identity
     * @param {String} firewallId ID of firewall
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Firewall} and HTTP response
     */
    this.firewallDeleteAccessrightsIdentityWithHttpInfo = function(firewallId, identity) {
      var postBody = null;

      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling firewallDeleteAccessrightsIdentity");
      }

      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling firewallDeleteAccessrightsIdentity");
      }


      var pathParams = {
        'firewallId': firewallId,
        'identity': identity
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Firewall;

      return this.apiClient.callApi(
        '/firewall/{firewallId}/accessrights/{identity}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /accessrights/:identity
     * @param {String} firewallId ID of firewall
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Firewall}
     */
    this.firewallDeleteAccessrightsIdentity = function(firewallId, identity) {
      return this.firewallDeleteAccessrightsIdentityWithHttpInfo(firewallId, identity)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /egress/:ruleId
     * @param {String} firewallId ID of firewall
     * @param {String} ruleId ruleId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200} and HTTP response
     */
    this.firewallDeleteEgressRuleIdWithHttpInfo = function(firewallId, ruleId) {
      var postBody = null;

      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling firewallDeleteEgressRuleId");
      }

      // verify the required parameter 'ruleId' is set
      if (ruleId === undefined || ruleId === null) {
        throw new Error("Missing the required parameter 'ruleId' when calling firewallDeleteEgressRuleId");
      }


      var pathParams = {
        'firewallId': firewallId,
        'ruleId': ruleId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/firewall/{firewallId}/egress/{ruleId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /egress/:ruleId
     * @param {String} firewallId ID of firewall
     * @param {String} ruleId ruleId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse200}
     */
    this.firewallDeleteEgressRuleId = function(firewallId, ruleId) {
      return this.firewallDeleteEgressRuleIdWithHttpInfo(firewallId, ruleId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /ingress/:ruleId
     * @param {String} firewallId ID of firewall
     * @param {String} ruleId ruleId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200} and HTTP response
     */
    this.firewallDeleteIngressRuleIdWithHttpInfo = function(firewallId, ruleId) {
      var postBody = null;

      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling firewallDeleteIngressRuleId");
      }

      // verify the required parameter 'ruleId' is set
      if (ruleId === undefined || ruleId === null) {
        throw new Error("Missing the required parameter 'ruleId' when calling firewallDeleteIngressRuleId");
      }


      var pathParams = {
        'firewallId': firewallId,
        'ruleId': ruleId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/firewall/{firewallId}/ingress/{ruleId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /ingress/:ruleId
     * @param {String} firewallId ID of firewall
     * @param {String} ruleId ruleId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse200}
     */
    this.firewallDeleteIngressRuleId = function(firewallId, ruleId) {
      return this.firewallDeleteIngressRuleIdWithHttpInfo(firewallId, ruleId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag/:key
     * @param {String} firewallId ID of firewall
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    this.firewallDeleteTagKeyWithHttpInfo = function(firewallId, key) {
      var postBody = null;

      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling firewallDeleteTagKey");
      }

      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling firewallDeleteTagKey");
      }


      var pathParams = {
        'firewallId': firewallId,
        'key': key
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/firewall/{firewallId}/tag/{key}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /tag/:key
     * @param {String} firewallId ID of firewall
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    this.firewallDeleteTagKey = function(firewallId, key) {
      return this.firewallDeleteTagKeyWithHttpInfo(firewallId, key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /egress/:ruleId
     * @param {String} firewallId ID of firewall
     * @param {String} ruleId ruleId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200} and HTTP response
     */
    this.firewallGetEgressRuleIdWithHttpInfo = function(firewallId, ruleId) {
      var postBody = null;

      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling firewallGetEgressRuleId");
      }

      // verify the required parameter 'ruleId' is set
      if (ruleId === undefined || ruleId === null) {
        throw new Error("Missing the required parameter 'ruleId' when calling firewallGetEgressRuleId");
      }


      var pathParams = {
        'firewallId': firewallId,
        'ruleId': ruleId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/firewall/{firewallId}/egress/{ruleId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /egress/:ruleId
     * @param {String} firewallId ID of firewall
     * @param {String} ruleId ruleId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse200}
     */
    this.firewallGetEgressRuleId = function(firewallId, ruleId) {
      return this.firewallGetEgressRuleIdWithHttpInfo(firewallId, ruleId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /ingress/:ruleId
     * @param {String} firewallId ID of firewall
     * @param {String} ruleId ruleId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200} and HTTP response
     */
    this.firewallGetIngressRuleIdWithHttpInfo = function(firewallId, ruleId) {
      var postBody = null;

      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling firewallGetIngressRuleId");
      }

      // verify the required parameter 'ruleId' is set
      if (ruleId === undefined || ruleId === null) {
        throw new Error("Missing the required parameter 'ruleId' when calling firewallGetIngressRuleId");
      }


      var pathParams = {
        'firewallId': firewallId,
        'ruleId': ruleId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/firewall/{firewallId}/ingress/{ruleId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /ingress/:ruleId
     * @param {String} firewallId ID of firewall
     * @param {String} ruleId ruleId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse200}
     */
    this.firewallGetIngressRuleId = function(firewallId, ruleId) {
      return this.firewallGetIngressRuleIdWithHttpInfo(firewallId, ruleId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services/:serviceId
     * @param {String} firewallId ID of firewall
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FirewallServices} and HTTP response
     */
    this.firewallGetServicesServiceIdWithHttpInfo = function(firewallId, serviceId) {
      var postBody = null;

      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling firewallGetServicesServiceId");
      }

      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling firewallGetServicesServiceId");
      }


      var pathParams = {
        'firewallId': firewallId,
        'serviceId': serviceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = FirewallServices;

      return this.apiClient.callApi(
        '/firewall/{firewallId}/services/{serviceId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /services/:serviceId
     * @param {String} firewallId ID of firewall
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FirewallServices}
     */
    this.firewallGetServicesServiceId = function(firewallId, serviceId) {
      return this.firewallGetServicesServiceIdWithHttpInfo(firewallId, serviceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} firewallId ID of firewall
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    this.firewallGetTagWithHttpInfo = function(firewallId) {
      var postBody = null;

      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling firewallGetTag");
      }


      var pathParams = {
        'firewallId': firewallId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/firewall/{firewallId}/tag', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /tag
     * @param {String} firewallId ID of firewall
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    this.firewallGetTag = function(firewallId) {
      return this.firewallGetTagWithHttpInfo(firewallId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List
     * List firewall
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Firewall>} and HTTP response
     */
    this.firewallListWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'name': opts['name'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Firewall];

      return this.apiClient.callApi(
        '/firewall', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List
     * List firewall
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Firewall>}
     */
    this.firewallList = function(opts) {
      return this.firewallListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} firewallId ID of firewall
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    this.firewallListAccessrightsWithHttpInfo = function(firewallId) {
      var postBody = null;

      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling firewallListAccessrights");
      }


      var pathParams = {
        'firewallId': firewallId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/firewall/{firewallId}/accessrights', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /accessrights
     * @param {String} firewallId ID of firewall
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    this.firewallListAccessrights = function(firewallId) {
      return this.firewallListAccessrightsWithHttpInfo(firewallId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /egress
     * @param {String} firewallId ID of firewall
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/InlineResponse200>} and HTTP response
     */
    this.firewallListEgressWithHttpInfo = function(firewallId) {
      var postBody = null;

      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling firewallListEgress");
      }


      var pathParams = {
        'firewallId': firewallId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [InlineResponse200];

      return this.apiClient.callApi(
        '/firewall/{firewallId}/egress', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /egress
     * @param {String} firewallId ID of firewall
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/InlineResponse200>}
     */
    this.firewallListEgress = function(firewallId) {
      return this.firewallListEgressWithHttpInfo(firewallId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /ingress
     * @param {String} firewallId ID of firewall
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/InlineResponse200>} and HTTP response
     */
    this.firewallListIngressWithHttpInfo = function(firewallId) {
      var postBody = null;

      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling firewallListIngress");
      }


      var pathParams = {
        'firewallId': firewallId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [InlineResponse200];

      return this.apiClient.callApi(
        '/firewall/{firewallId}/ingress', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /ingress
     * @param {String} firewallId ID of firewall
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/InlineResponse200>}
     */
    this.firewallListIngress = function(firewallId) {
      return this.firewallListIngressWithHttpInfo(firewallId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /queue
     * @param {String} firewallId ID of firewall
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Event>} and HTTP response
     */
    this.firewallListQueueWithHttpInfo = function(firewallId) {
      var postBody = null;

      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling firewallListQueue");
      }


      var pathParams = {
        'firewallId': firewallId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Event];

      return this.apiClient.callApi(
        '/firewall/{firewallId}/queue', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /queue
     * @param {String} firewallId ID of firewall
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Event>}
     */
    this.firewallListQueue = function(firewallId) {
      return this.firewallListQueueWithHttpInfo(firewallId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services
     * @param {String} firewallId ID of firewall
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/FirewallServices>} and HTTP response
     */
    this.firewallListServicesWithHttpInfo = function(firewallId) {
      var postBody = null;

      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling firewallListServices");
      }


      var pathParams = {
        'firewallId': firewallId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [FirewallServices];

      return this.apiClient.callApi(
        '/firewall/{firewallId}/services', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /services
     * @param {String} firewallId ID of firewall
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/FirewallServices>}
     */
    this.firewallListServices = function(firewallId) {
      return this.firewallListServicesWithHttpInfo(firewallId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} firewallId ID of firewall
     * @param {Object} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    this.firewallPatchTagWithHttpInfo = function(firewallId, body) {
      var postBody = body;

      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling firewallPatchTag");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling firewallPatchTag");
      }


      var pathParams = {
        'firewallId': firewallId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/firewall/{firewallId}/tag', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /tag
     * @param {String} firewallId ID of firewall
     * @param {Object} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    this.firewallPatchTag = function(firewallId, body) {
      return this.firewallPatchTagWithHttpInfo(firewallId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} firewallId ID of firewall
     * @param {module:model/FirewallPostAccessrights} firewallPostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    this.firewallPostAccessrightsWithHttpInfo = function(firewallId, firewallPostAccessrights) {
      var postBody = firewallPostAccessrights;

      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling firewallPostAccessrights");
      }

      // verify the required parameter 'firewallPostAccessrights' is set
      if (firewallPostAccessrights === undefined || firewallPostAccessrights === null) {
        throw new Error("Missing the required parameter 'firewallPostAccessrights' when calling firewallPostAccessrights");
      }


      var pathParams = {
        'firewallId': firewallId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/firewall/{firewallId}/accessrights', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /accessrights
     * @param {String} firewallId ID of firewall
     * @param {module:model/FirewallPostAccessrights} firewallPostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    this.firewallPostAccessrights = function(firewallId, firewallPostAccessrights) {
      return this.firewallPostAccessrightsWithHttpInfo(firewallId, firewallPostAccessrights)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /egress
     * @param {String} firewallId ID of firewall
     * @param {module:model/FirewallPostEgress} firewallPostEgress 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200} and HTTP response
     */
    this.firewallPostEgressWithHttpInfo = function(firewallId, firewallPostEgress) {
      var postBody = firewallPostEgress;

      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling firewallPostEgress");
      }

      // verify the required parameter 'firewallPostEgress' is set
      if (firewallPostEgress === undefined || firewallPostEgress === null) {
        throw new Error("Missing the required parameter 'firewallPostEgress' when calling firewallPostEgress");
      }


      var pathParams = {
        'firewallId': firewallId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/firewall/{firewallId}/egress', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /egress
     * @param {String} firewallId ID of firewall
     * @param {module:model/FirewallPostEgress} firewallPostEgress 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse200}
     */
    this.firewallPostEgress = function(firewallId, firewallPostEgress) {
      return this.firewallPostEgressWithHttpInfo(firewallId, firewallPostEgress)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /ingress
     * @param {String} firewallId ID of firewall
     * @param {module:model/FirewallPostIngress} firewallPostIngress 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200} and HTTP response
     */
    this.firewallPostIngressWithHttpInfo = function(firewallId, firewallPostIngress) {
      var postBody = firewallPostIngress;

      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling firewallPostIngress");
      }

      // verify the required parameter 'firewallPostIngress' is set
      if (firewallPostIngress === undefined || firewallPostIngress === null) {
        throw new Error("Missing the required parameter 'firewallPostIngress' when calling firewallPostIngress");
      }


      var pathParams = {
        'firewallId': firewallId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/firewall/{firewallId}/ingress', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /ingress
     * @param {String} firewallId ID of firewall
     * @param {module:model/FirewallPostIngress} firewallPostIngress 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse200}
     */
    this.firewallPostIngress = function(firewallId, firewallPostIngress) {
      return this.firewallPostIngressWithHttpInfo(firewallId, firewallPostIngress)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get
     * Returns a single firewall
     * @param {String} firewallId ID of firewall
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Firewall} and HTTP response
     */
    this.firewallShowWithHttpInfo = function(firewallId) {
      var postBody = null;

      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling firewallShow");
      }


      var pathParams = {
        'firewallId': firewallId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Firewall;

      return this.apiClient.callApi(
        '/firewall/{firewallId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get
     * Returns a single firewall
     * @param {String} firewallId ID of firewall
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Firewall}
     */
    this.firewallShow = function(firewallId) {
      return this.firewallShowWithHttpInfo(firewallId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update
     * Returns modified firewall
     * @param {String} firewallId ID of firewall
     * @param {module:model/FirewallUpdate} firewallUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Firewall} and HTTP response
     */
    this.firewallUpdateWithHttpInfo = function(firewallId, firewallUpdate) {
      var postBody = firewallUpdate;

      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling firewallUpdate");
      }

      // verify the required parameter 'firewallUpdate' is set
      if (firewallUpdate === undefined || firewallUpdate === null) {
        throw new Error("Missing the required parameter 'firewallUpdate' when calling firewallUpdate");
      }


      var pathParams = {
        'firewallId': firewallId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Firewall;

      return this.apiClient.callApi(
        '/firewall/{firewallId}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update
     * Returns modified firewall
     * @param {String} firewallId ID of firewall
     * @param {module:model/FirewallUpdate} firewallUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Firewall}
     */
    this.firewallUpdate = function(firewallId, firewallUpdate) {
      return this.firewallUpdateWithHttpInfo(firewallId, firewallUpdate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
