/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Event', 'model/Firewall', 'model/FirewallServices', 'model/InlineObject10', 'model/InlineObject11', 'model/InlineObject12', 'model/InlineObject13', 'model/InlineObject14', 'model/InlineObject15', 'model/InlineResponse200'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Event'), require('../model/Firewall'), require('../model/FirewallServices'), require('../model/InlineObject10'), require('../model/InlineObject11'), require('../model/InlineObject12'), require('../model/InlineObject13'), require('../model/InlineObject14'), require('../model/InlineObject15'), require('../model/InlineResponse200'));
  } else {
    // Browser globals (root is window)
    if (!root.HyperOneApi) {
      root.HyperOneApi = {};
    }
    root.HyperOneApi.FirewallApi = factory(root.HyperOneApi.ApiClient, root.HyperOneApi.Event, root.HyperOneApi.Firewall, root.HyperOneApi.FirewallServices, root.HyperOneApi.InlineObject10, root.HyperOneApi.InlineObject11, root.HyperOneApi.InlineObject12, root.HyperOneApi.InlineObject13, root.HyperOneApi.InlineObject14, root.HyperOneApi.InlineObject15, root.HyperOneApi.InlineResponse200);
  }
}(this, function(ApiClient, Event, Firewall, FirewallServices, InlineObject10, InlineObject11, InlineObject12, InlineObject13, InlineObject14, InlineObject15, InlineResponse200) {
  'use strict';

  /**
   * Firewall service.
   * @module api/FirewallApi
   * @version 1.0.0
   */

  /**
   * Constructs a new FirewallApi. 
   * @alias module:api/FirewallApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * /actions/attach
     * Action attach
     * @param {String} firewallId ID of firewall
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Firewall} and HTTP response
     */
    this.actionFirewallAttachWithHttpInfo = function(firewallId) {
      var postBody = null;

      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling actionFirewallAttach");
      }


      var pathParams = {
        'firewallId': firewallId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Firewall;

      return this.apiClient.callApi(
        '/firewall/{firewallId}/actions/attach', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /actions/attach
     * Action attach
     * @param {String} firewallId ID of firewall
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Firewall}
     */
    this.actionFirewallAttach = function(firewallId) {
      return this.actionFirewallAttachWithHttpInfo(firewallId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/detach
     * Action detach
     * @param {String} firewallId ID of firewall
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Firewall} and HTTP response
     */
    this.actionFirewallDetachWithHttpInfo = function(firewallId) {
      var postBody = null;

      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling actionFirewallDetach");
      }


      var pathParams = {
        'firewallId': firewallId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Firewall;

      return this.apiClient.callApi(
        '/firewall/{firewallId}/actions/detach', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /actions/detach
     * Action detach
     * @param {String} firewallId ID of firewall
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Firewall}
     */
    this.actionFirewallDetach = function(firewallId) {
      return this.actionFirewallDetachWithHttpInfo(firewallId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/transfer
     * Action transfer
     * @param {String} firewallId ID of firewall
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject12} opts.inlineObject12 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Firewall} and HTTP response
     */
    this.actionFirewallTransferWithHttpInfo = function(firewallId, opts) {
      opts = opts || {};
      var postBody = opts['inlineObject12'];

      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling actionFirewallTransfer");
      }


      var pathParams = {
        'firewallId': firewallId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Firewall;

      return this.apiClient.callApi(
        '/firewall/{firewallId}/actions/transfer', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /actions/transfer
     * Action transfer
     * @param {String} firewallId ID of firewall
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject12} opts.inlineObject12 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Firewall}
     */
    this.actionFirewallTransfer = function(firewallId, opts) {
      return this.actionFirewallTransferWithHttpInfo(firewallId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create
     * Create firewall
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject10} opts.inlineObject10 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Firewall} and HTTP response
     */
    this.createFirewallWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['inlineObject10'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Firewall;

      return this.apiClient.callApi(
        '/firewall', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create
     * Create firewall
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject10} opts.inlineObject10 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Firewall}
     */
    this.createFirewall = function(opts) {
      return this.createFirewallWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete
     * @param {String} firewallId ID of firewall
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteFirewallWithHttpInfo = function(firewallId) {
      var postBody = null;

      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling deleteFirewall");
      }


      var pathParams = {
        'firewallId': firewallId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/firewall/{firewallId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete
     * @param {String} firewallId ID of firewall
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteFirewall = function(firewallId) {
      return this.deleteFirewallWithHttpInfo(firewallId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List
     * List firewall
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Firewall>} and HTTP response
     */
    this.listFirewallWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'name': opts['name'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Firewall];

      return this.apiClient.callApi(
        '/firewall', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List
     * List firewall
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Firewall>}
     */
    this.listFirewall = function(opts) {
      return this.listFirewallWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights/:identity
     * @param {String} firewallId ID of firewall
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Firewall} and HTTP response
     */
    this.operationFirewallDeleteaccessrightsIdentityWithHttpInfo = function(firewallId, identity) {
      var postBody = null;

      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling operationFirewallDeleteaccessrightsIdentity");
      }

      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling operationFirewallDeleteaccessrightsIdentity");
      }


      var pathParams = {
        'firewallId': firewallId,
        'identity': identity
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Firewall;

      return this.apiClient.callApi(
        '/firewall/{firewallId}/accessrights/{identity}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /accessrights/:identity
     * @param {String} firewallId ID of firewall
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Firewall}
     */
    this.operationFirewallDeleteaccessrightsIdentity = function(firewallId, identity) {
      return this.operationFirewallDeleteaccessrightsIdentityWithHttpInfo(firewallId, identity)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /egress/:ruleId
     * @param {String} firewallId ID of firewall
     * @param {String} ruleId ruleId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200} and HTTP response
     */
    this.operationFirewallDeleteegressRuleIdWithHttpInfo = function(firewallId, ruleId) {
      var postBody = null;

      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling operationFirewallDeleteegressRuleId");
      }

      // verify the required parameter 'ruleId' is set
      if (ruleId === undefined || ruleId === null) {
        throw new Error("Missing the required parameter 'ruleId' when calling operationFirewallDeleteegressRuleId");
      }


      var pathParams = {
        'firewallId': firewallId,
        'ruleId': ruleId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/firewall/{firewallId}/egress/{ruleId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /egress/:ruleId
     * @param {String} firewallId ID of firewall
     * @param {String} ruleId ruleId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse200}
     */
    this.operationFirewallDeleteegressRuleId = function(firewallId, ruleId) {
      return this.operationFirewallDeleteegressRuleIdWithHttpInfo(firewallId, ruleId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /ingress/:ruleId
     * @param {String} firewallId ID of firewall
     * @param {String} ruleId ruleId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200} and HTTP response
     */
    this.operationFirewallDeleteingressRuleIdWithHttpInfo = function(firewallId, ruleId) {
      var postBody = null;

      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling operationFirewallDeleteingressRuleId");
      }

      // verify the required parameter 'ruleId' is set
      if (ruleId === undefined || ruleId === null) {
        throw new Error("Missing the required parameter 'ruleId' when calling operationFirewallDeleteingressRuleId");
      }


      var pathParams = {
        'firewallId': firewallId,
        'ruleId': ruleId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/firewall/{firewallId}/ingress/{ruleId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /ingress/:ruleId
     * @param {String} firewallId ID of firewall
     * @param {String} ruleId ruleId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse200}
     */
    this.operationFirewallDeleteingressRuleId = function(firewallId, ruleId) {
      return this.operationFirewallDeleteingressRuleIdWithHttpInfo(firewallId, ruleId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag/:key
     * @param {String} firewallId ID of firewall
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    this.operationFirewallDeletetagKeyWithHttpInfo = function(firewallId, key) {
      var postBody = null;

      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling operationFirewallDeletetagKey");
      }

      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling operationFirewallDeletetagKey");
      }


      var pathParams = {
        'firewallId': firewallId,
        'key': key
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = {'String': 'String'};

      return this.apiClient.callApi(
        '/firewall/{firewallId}/tag/{key}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /tag/:key
     * @param {String} firewallId ID of firewall
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    this.operationFirewallDeletetagKey = function(firewallId, key) {
      return this.operationFirewallDeletetagKeyWithHttpInfo(firewallId, key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /egress/:ruleId
     * @param {String} firewallId ID of firewall
     * @param {String} ruleId ruleId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200} and HTTP response
     */
    this.operationFirewallGetegressRuleIdWithHttpInfo = function(firewallId, ruleId) {
      var postBody = null;

      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling operationFirewallGetegressRuleId");
      }

      // verify the required parameter 'ruleId' is set
      if (ruleId === undefined || ruleId === null) {
        throw new Error("Missing the required parameter 'ruleId' when calling operationFirewallGetegressRuleId");
      }


      var pathParams = {
        'firewallId': firewallId,
        'ruleId': ruleId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/firewall/{firewallId}/egress/{ruleId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /egress/:ruleId
     * @param {String} firewallId ID of firewall
     * @param {String} ruleId ruleId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse200}
     */
    this.operationFirewallGetegressRuleId = function(firewallId, ruleId) {
      return this.operationFirewallGetegressRuleIdWithHttpInfo(firewallId, ruleId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /ingress/:ruleId
     * @param {String} firewallId ID of firewall
     * @param {String} ruleId ruleId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200} and HTTP response
     */
    this.operationFirewallGetingressRuleIdWithHttpInfo = function(firewallId, ruleId) {
      var postBody = null;

      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling operationFirewallGetingressRuleId");
      }

      // verify the required parameter 'ruleId' is set
      if (ruleId === undefined || ruleId === null) {
        throw new Error("Missing the required parameter 'ruleId' when calling operationFirewallGetingressRuleId");
      }


      var pathParams = {
        'firewallId': firewallId,
        'ruleId': ruleId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/firewall/{firewallId}/ingress/{ruleId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /ingress/:ruleId
     * @param {String} firewallId ID of firewall
     * @param {String} ruleId ruleId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse200}
     */
    this.operationFirewallGetingressRuleId = function(firewallId, ruleId) {
      return this.operationFirewallGetingressRuleIdWithHttpInfo(firewallId, ruleId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services/:serviceId
     * @param {String} firewallId ID of firewall
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FirewallServices} and HTTP response
     */
    this.operationFirewallGetservicesServiceIdWithHttpInfo = function(firewallId, serviceId) {
      var postBody = null;

      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling operationFirewallGetservicesServiceId");
      }

      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling operationFirewallGetservicesServiceId");
      }


      var pathParams = {
        'firewallId': firewallId,
        'serviceId': serviceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = FirewallServices;

      return this.apiClient.callApi(
        '/firewall/{firewallId}/services/{serviceId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /services/:serviceId
     * @param {String} firewallId ID of firewall
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FirewallServices}
     */
    this.operationFirewallGetservicesServiceId = function(firewallId, serviceId) {
      return this.operationFirewallGetservicesServiceIdWithHttpInfo(firewallId, serviceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag/
     * @param {String} firewallId ID of firewall
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    this.operationFirewallGettagWithHttpInfo = function(firewallId) {
      var postBody = null;

      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling operationFirewallGettag");
      }


      var pathParams = {
        'firewallId': firewallId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = {'String': 'String'};

      return this.apiClient.callApi(
        '/firewall/{firewallId}/tag/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /tag/
     * @param {String} firewallId ID of firewall
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    this.operationFirewallGettag = function(firewallId) {
      return this.operationFirewallGettagWithHttpInfo(firewallId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights/
     * @param {String} firewallId ID of firewall
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    this.operationFirewallListaccessrightsWithHttpInfo = function(firewallId) {
      var postBody = null;

      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling operationFirewallListaccessrights");
      }


      var pathParams = {
        'firewallId': firewallId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/firewall/{firewallId}/accessrights/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /accessrights/
     * @param {String} firewallId ID of firewall
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    this.operationFirewallListaccessrights = function(firewallId) {
      return this.operationFirewallListaccessrightsWithHttpInfo(firewallId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /egress
     * @param {String} firewallId ID of firewall
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/InlineResponse200>} and HTTP response
     */
    this.operationFirewallListegressWithHttpInfo = function(firewallId) {
      var postBody = null;

      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling operationFirewallListegress");
      }


      var pathParams = {
        'firewallId': firewallId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [InlineResponse200];

      return this.apiClient.callApi(
        '/firewall/{firewallId}/egress', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /egress
     * @param {String} firewallId ID of firewall
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/InlineResponse200>}
     */
    this.operationFirewallListegress = function(firewallId) {
      return this.operationFirewallListegressWithHttpInfo(firewallId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /ingress
     * @param {String} firewallId ID of firewall
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/InlineResponse200>} and HTTP response
     */
    this.operationFirewallListingressWithHttpInfo = function(firewallId) {
      var postBody = null;

      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling operationFirewallListingress");
      }


      var pathParams = {
        'firewallId': firewallId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [InlineResponse200];

      return this.apiClient.callApi(
        '/firewall/{firewallId}/ingress', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /ingress
     * @param {String} firewallId ID of firewall
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/InlineResponse200>}
     */
    this.operationFirewallListingress = function(firewallId) {
      return this.operationFirewallListingressWithHttpInfo(firewallId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /queue/
     * @param {String} firewallId ID of firewall
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Event>} and HTTP response
     */
    this.operationFirewallListqueueWithHttpInfo = function(firewallId) {
      var postBody = null;

      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling operationFirewallListqueue");
      }


      var pathParams = {
        'firewallId': firewallId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Event];

      return this.apiClient.callApi(
        '/firewall/{firewallId}/queue/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /queue/
     * @param {String} firewallId ID of firewall
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Event>}
     */
    this.operationFirewallListqueue = function(firewallId) {
      return this.operationFirewallListqueueWithHttpInfo(firewallId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services/
     * @param {String} firewallId ID of firewall
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/FirewallServices>} and HTTP response
     */
    this.operationFirewallListservicesWithHttpInfo = function(firewallId) {
      var postBody = null;

      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling operationFirewallListservices");
      }


      var pathParams = {
        'firewallId': firewallId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [FirewallServices];

      return this.apiClient.callApi(
        '/firewall/{firewallId}/services/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /services/
     * @param {String} firewallId ID of firewall
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/FirewallServices>}
     */
    this.operationFirewallListservices = function(firewallId) {
      return this.operationFirewallListservicesWithHttpInfo(firewallId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag/
     * @param {String} firewallId ID of firewall
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    this.operationFirewallPatchtagWithHttpInfo = function(firewallId, requestBody) {
      var postBody = requestBody;

      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling operationFirewallPatchtag");
      }

      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling operationFirewallPatchtag");
      }


      var pathParams = {
        'firewallId': firewallId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = {'String': 'String'};

      return this.apiClient.callApi(
        '/firewall/{firewallId}/tag/', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /tag/
     * @param {String} firewallId ID of firewall
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    this.operationFirewallPatchtag = function(firewallId, requestBody) {
      return this.operationFirewallPatchtagWithHttpInfo(firewallId, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights/
     * @param {String} firewallId ID of firewall
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject15} opts.inlineObject15 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    this.operationFirewallPostaccessrightsWithHttpInfo = function(firewallId, opts) {
      opts = opts || {};
      var postBody = opts['inlineObject15'];

      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling operationFirewallPostaccessrights");
      }


      var pathParams = {
        'firewallId': firewallId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/firewall/{firewallId}/accessrights/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /accessrights/
     * @param {String} firewallId ID of firewall
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject15} opts.inlineObject15 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    this.operationFirewallPostaccessrights = function(firewallId, opts) {
      return this.operationFirewallPostaccessrightsWithHttpInfo(firewallId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /egress
     * @param {String} firewallId ID of firewall
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject14} opts.inlineObject14 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200} and HTTP response
     */
    this.operationFirewallPostegressWithHttpInfo = function(firewallId, opts) {
      opts = opts || {};
      var postBody = opts['inlineObject14'];

      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling operationFirewallPostegress");
      }


      var pathParams = {
        'firewallId': firewallId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/firewall/{firewallId}/egress', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /egress
     * @param {String} firewallId ID of firewall
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject14} opts.inlineObject14 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse200}
     */
    this.operationFirewallPostegress = function(firewallId, opts) {
      return this.operationFirewallPostegressWithHttpInfo(firewallId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /ingress
     * @param {String} firewallId ID of firewall
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject13} opts.inlineObject13 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200} and HTTP response
     */
    this.operationFirewallPostingressWithHttpInfo = function(firewallId, opts) {
      opts = opts || {};
      var postBody = opts['inlineObject13'];

      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling operationFirewallPostingress");
      }


      var pathParams = {
        'firewallId': firewallId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/firewall/{firewallId}/ingress', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /ingress
     * @param {String} firewallId ID of firewall
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject13} opts.inlineObject13 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse200}
     */
    this.operationFirewallPostingress = function(firewallId, opts) {
      return this.operationFirewallPostingressWithHttpInfo(firewallId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get
     * Returns a single firewall
     * @param {String} firewallId ID of firewall
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Firewall} and HTTP response
     */
    this.showFirewallWithHttpInfo = function(firewallId) {
      var postBody = null;

      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling showFirewall");
      }


      var pathParams = {
        'firewallId': firewallId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Firewall;

      return this.apiClient.callApi(
        '/firewall/{firewallId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get
     * Returns a single firewall
     * @param {String} firewallId ID of firewall
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Firewall}
     */
    this.showFirewall = function(firewallId) {
      return this.showFirewallWithHttpInfo(firewallId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update
     * Returns modified firewall
     * @param {String} firewallId ID of firewall
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject11} opts.inlineObject11 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Firewall} and HTTP response
     */
    this.updateFirewallWithHttpInfo = function(firewallId, opts) {
      opts = opts || {};
      var postBody = opts['inlineObject11'];

      // verify the required parameter 'firewallId' is set
      if (firewallId === undefined || firewallId === null) {
        throw new Error("Missing the required parameter 'firewallId' when calling updateFirewall");
      }


      var pathParams = {
        'firewallId': firewallId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Firewall;

      return this.apiClient.callApi(
        '/firewall/{firewallId}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update
     * Returns modified firewall
     * @param {String} firewallId ID of firewall
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject11} opts.inlineObject11 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Firewall}
     */
    this.updateFirewall = function(firewallId, opts) {
      return this.updateFirewallWithHttpInfo(firewallId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
