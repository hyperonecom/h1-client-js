/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Event', 'model/Hdd', 'model/InlineObject35', 'model/InlineObject36', 'model/InlineObject37', 'model/InlineObject38', 'model/InlineObject39', 'model/InlineObject40', 'model/InlineObject41', 'model/Netadp', 'model/Vm', 'model/VmServices'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Event'), require('../model/Hdd'), require('../model/InlineObject35'), require('../model/InlineObject36'), require('../model/InlineObject37'), require('../model/InlineObject38'), require('../model/InlineObject39'), require('../model/InlineObject40'), require('../model/InlineObject41'), require('../model/Netadp'), require('../model/Vm'), require('../model/VmServices'));
  } else {
    // Browser globals (root is window)
    if (!root.HyperOneApi) {
      root.HyperOneApi = {};
    }
    root.HyperOneApi.VmApi = factory(root.HyperOneApi.ApiClient, root.HyperOneApi.Event, root.HyperOneApi.Hdd, root.HyperOneApi.InlineObject35, root.HyperOneApi.InlineObject36, root.HyperOneApi.InlineObject37, root.HyperOneApi.InlineObject38, root.HyperOneApi.InlineObject39, root.HyperOneApi.InlineObject40, root.HyperOneApi.InlineObject41, root.HyperOneApi.Netadp, root.HyperOneApi.Vm, root.HyperOneApi.VmServices);
  }
}(this, function(ApiClient, Event, Hdd, InlineObject35, InlineObject36, InlineObject37, InlineObject38, InlineObject39, InlineObject40, InlineObject41, Netadp, Vm, VmServices) {
  'use strict';

  /**
   * Vm service.
   * @module api/VmApi
   * @version 1
   */

  /**
   * Constructs a new VmApi. 
   * @alias module:api/VmApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the actionVmFlavour operation.
     * @callback module:api/VmApi~actionVmFlavourCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Vm} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /actions/flavour
     * Action flavour
     * @param {String} vmId ID of vm
     * @param {module:api/VmApi~actionVmFlavourCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Vm}
     */
    this.actionVmFlavour = function(vmId, callback) {
      var postBody = null;

      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling actionVmFlavour");
      }


      var pathParams = {
        'vmId': vmId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Vm;

      return this.apiClient.callApi(
        '/vm/{vmId}/actions/flavour', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the actionVmImage operation.
     * @callback module:api/VmApi~actionVmImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Vm} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /actions/image
     * Action image
     * @param {String} vmId ID of vm
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject38} opts.inlineObject38 
     * @param {module:api/VmApi~actionVmImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Vm}
     */
    this.actionVmImage = function(vmId, opts, callback) {
      opts = opts || {};
      var postBody = opts['inlineObject38'];

      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling actionVmImage");
      }


      var pathParams = {
        'vmId': vmId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Vm;

      return this.apiClient.callApi(
        '/vm/{vmId}/actions/image', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the actionVmPasswordReset operation.
     * @callback module:api/VmApi~actionVmPasswordResetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Vm} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /actions/password_reset
     * Action password_reset
     * @param {String} vmId ID of vm
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject37} opts.inlineObject37 
     * @param {module:api/VmApi~actionVmPasswordResetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Vm}
     */
    this.actionVmPasswordReset = function(vmId, opts, callback) {
      opts = opts || {};
      var postBody = opts['inlineObject37'];

      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling actionVmPasswordReset");
      }


      var pathParams = {
        'vmId': vmId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Vm;

      return this.apiClient.callApi(
        '/vm/{vmId}/actions/password_reset', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the actionVmRename operation.
     * @callback module:api/VmApi~actionVmRenameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Vm} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /actions/rename
     * Action rename
     * @param {String} vmId ID of vm
     * @param {module:api/VmApi~actionVmRenameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Vm}
     */
    this.actionVmRename = function(vmId, callback) {
      var postBody = null;

      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling actionVmRename");
      }


      var pathParams = {
        'vmId': vmId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Vm;

      return this.apiClient.callApi(
        '/vm/{vmId}/actions/rename', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the actionVmRestart operation.
     * @callback module:api/VmApi~actionVmRestartCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Vm} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /actions/restart
     * Action restart
     * @param {String} vmId ID of vm
     * @param {module:api/VmApi~actionVmRestartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Vm}
     */
    this.actionVmRestart = function(vmId, callback) {
      var postBody = null;

      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling actionVmRestart");
      }


      var pathParams = {
        'vmId': vmId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Vm;

      return this.apiClient.callApi(
        '/vm/{vmId}/actions/restart', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the actionVmStart operation.
     * @callback module:api/VmApi~actionVmStartCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Vm} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /actions/start
     * Action start
     * @param {String} vmId ID of vm
     * @param {module:api/VmApi~actionVmStartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Vm}
     */
    this.actionVmStart = function(vmId, callback) {
      var postBody = null;

      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling actionVmStart");
      }


      var pathParams = {
        'vmId': vmId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Vm;

      return this.apiClient.callApi(
        '/vm/{vmId}/actions/start', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the actionVmStop operation.
     * @callback module:api/VmApi~actionVmStopCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Vm} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /actions/stop
     * Action stop
     * @param {String} vmId ID of vm
     * @param {module:api/VmApi~actionVmStopCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Vm}
     */
    this.actionVmStop = function(vmId, callback) {
      var postBody = null;

      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling actionVmStop");
      }


      var pathParams = {
        'vmId': vmId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Vm;

      return this.apiClient.callApi(
        '/vm/{vmId}/actions/stop', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the actionVmTurnoff operation.
     * @callback module:api/VmApi~actionVmTurnoffCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Vm} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /actions/turnoff
     * Action turnoff
     * @param {String} vmId ID of vm
     * @param {module:api/VmApi~actionVmTurnoffCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Vm}
     */
    this.actionVmTurnoff = function(vmId, callback) {
      var postBody = null;

      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling actionVmTurnoff");
      }


      var pathParams = {
        'vmId': vmId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Vm;

      return this.apiClient.callApi(
        '/vm/{vmId}/actions/turnoff', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createVm operation.
     * @callback module:api/VmApi~createVmCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Vm} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create
     * Create vm
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject35} opts.inlineObject35 
     * @param {module:api/VmApi~createVmCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Vm}
     */
    this.createVm = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['inlineObject35'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Vm;

      return this.apiClient.callApi(
        '/vm', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVm operation.
     * @callback module:api/VmApi~deleteVmCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete
     * @param {String} vmId ID of vm
     * @param {module:api/VmApi~deleteVmCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteVm = function(vmId, callback) {
      var postBody = null;

      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling deleteVm");
      }


      var pathParams = {
        'vmId': vmId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/vm/{vmId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listVm operation.
     * @callback module:api/VmApi~listVmCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Vm>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List
     * List vm
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @param {module:api/VmApi~listVmCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Vm>}
     */
    this.listVm = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'name': opts['name'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Vm];

      return this.apiClient.callApi(
        '/vm', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the operationVmDeleteaccessrightsIdentity operation.
     * @callback module:api/VmApi~operationVmDeleteaccessrightsIdentityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Vm} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /accessrights/:identity
     * @param {String} vmId ID of vm
     * @param {String} identity identity
     * @param {module:api/VmApi~operationVmDeleteaccessrightsIdentityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Vm}
     */
    this.operationVmDeleteaccessrightsIdentity = function(vmId, identity, callback) {
      var postBody = null;

      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling operationVmDeleteaccessrightsIdentity");
      }

      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling operationVmDeleteaccessrightsIdentity");
      }


      var pathParams = {
        'vmId': vmId,
        'identity': identity
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Vm;

      return this.apiClient.callApi(
        '/vm/{vmId}/accessrights/{identity}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the operationVmDeletehddDiskId operation.
     * @callback module:api/VmApi~operationVmDeletehddDiskIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Vm} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /hdd/:diskId
     * @param {String} vmId ID of vm
     * @param {String} diskId diskId
     * @param {module:api/VmApi~operationVmDeletehddDiskIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Vm}
     */
    this.operationVmDeletehddDiskId = function(vmId, diskId, callback) {
      var postBody = null;

      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling operationVmDeletehddDiskId");
      }

      // verify the required parameter 'diskId' is set
      if (diskId === undefined || diskId === null) {
        throw new Error("Missing the required parameter 'diskId' when calling operationVmDeletehddDiskId");
      }


      var pathParams = {
        'vmId': vmId,
        'diskId': diskId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Vm;

      return this.apiClient.callApi(
        '/vm/{vmId}/hdd/{diskId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the operationVmDeletenetadp operation.
     * @callback module:api/VmApi~operationVmDeletenetadpCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Vm} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /netadp
     * @param {String} vmId ID of vm
     * @param {module:api/VmApi~operationVmDeletenetadpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Vm}
     */
    this.operationVmDeletenetadp = function(vmId, callback) {
      var postBody = null;

      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling operationVmDeletenetadp");
      }


      var pathParams = {
        'vmId': vmId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Vm;

      return this.apiClient.callApi(
        '/vm/{vmId}/netadp', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the operationVmDeletetagKey operation.
     * @callback module:api/VmApi~operationVmDeletetagKeyCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: String}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /tag/:key
     * @param {String} vmId ID of vm
     * @param {String} key key
     * @param {module:api/VmApi~operationVmDeletetagKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: String}>}
     */
    this.operationVmDeletetagKey = function(vmId, key, callback) {
      var postBody = null;

      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling operationVmDeletetagKey");
      }

      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling operationVmDeletetagKey");
      }


      var pathParams = {
        'vmId': vmId,
        'key': key
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = {'String': 'String'};

      return this.apiClient.callApi(
        '/vm/{vmId}/tag/{key}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the operationVmGetservicesServiceId operation.
     * @callback module:api/VmApi~operationVmGetservicesServiceIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VmServices} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /services/:serviceId
     * @param {String} vmId ID of vm
     * @param {String} serviceId serviceId
     * @param {module:api/VmApi~operationVmGetservicesServiceIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VmServices}
     */
    this.operationVmGetservicesServiceId = function(vmId, serviceId, callback) {
      var postBody = null;

      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling operationVmGetservicesServiceId");
      }

      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling operationVmGetservicesServiceId");
      }


      var pathParams = {
        'vmId': vmId,
        'serviceId': serviceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = VmServices;

      return this.apiClient.callApi(
        '/vm/{vmId}/services/{serviceId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the operationVmGettag operation.
     * @callback module:api/VmApi~operationVmGettagCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: String}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /tag/
     * @param {String} vmId ID of vm
     * @param {module:api/VmApi~operationVmGettagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: String}>}
     */
    this.operationVmGettag = function(vmId, callback) {
      var postBody = null;

      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling operationVmGettag");
      }


      var pathParams = {
        'vmId': vmId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = {'String': 'String'};

      return this.apiClient.callApi(
        '/vm/{vmId}/tag/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the operationVmListaccessrights operation.
     * @callback module:api/VmApi~operationVmListaccessrightsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /accessrights/
     * @param {String} vmId ID of vm
     * @param {module:api/VmApi~operationVmListaccessrightsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    this.operationVmListaccessrights = function(vmId, callback) {
      var postBody = null;

      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling operationVmListaccessrights");
      }


      var pathParams = {
        'vmId': vmId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/vm/{vmId}/accessrights/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the operationVmListhdd operation.
     * @callback module:api/VmApi~operationVmListhddCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Hdd>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /hdd
     * @param {String} vmId ID of vm
     * @param {module:api/VmApi~operationVmListhddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Hdd>}
     */
    this.operationVmListhdd = function(vmId, callback) {
      var postBody = null;

      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling operationVmListhdd");
      }


      var pathParams = {
        'vmId': vmId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Hdd];

      return this.apiClient.callApi(
        '/vm/{vmId}/hdd', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the operationVmListnetadp operation.
     * @callback module:api/VmApi~operationVmListnetadpCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Netadp>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /netadp
     * @param {String} vmId ID of vm
     * @param {module:api/VmApi~operationVmListnetadpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Netadp>}
     */
    this.operationVmListnetadp = function(vmId, callback) {
      var postBody = null;

      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling operationVmListnetadp");
      }


      var pathParams = {
        'vmId': vmId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Netadp];

      return this.apiClient.callApi(
        '/vm/{vmId}/netadp', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the operationVmListqueue operation.
     * @callback module:api/VmApi~operationVmListqueueCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Event>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /queue/
     * @param {String} vmId ID of vm
     * @param {module:api/VmApi~operationVmListqueueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Event>}
     */
    this.operationVmListqueue = function(vmId, callback) {
      var postBody = null;

      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling operationVmListqueue");
      }


      var pathParams = {
        'vmId': vmId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Event];

      return this.apiClient.callApi(
        '/vm/{vmId}/queue/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the operationVmListservices operation.
     * @callback module:api/VmApi~operationVmListservicesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/VmServices>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /services/
     * @param {String} vmId ID of vm
     * @param {module:api/VmApi~operationVmListservicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/VmServices>}
     */
    this.operationVmListservices = function(vmId, callback) {
      var postBody = null;

      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling operationVmListservices");
      }


      var pathParams = {
        'vmId': vmId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [VmServices];

      return this.apiClient.callApi(
        '/vm/{vmId}/services/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the operationVmPatchtag operation.
     * @callback module:api/VmApi~operationVmPatchtagCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: String}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /tag/
     * @param {String} vmId ID of vm
     * @param {Object.<String, {String: String}>} requestBody 
     * @param {module:api/VmApi~operationVmPatchtagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: String}>}
     */
    this.operationVmPatchtag = function(vmId, requestBody, callback) {
      var postBody = requestBody;

      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling operationVmPatchtag");
      }

      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling operationVmPatchtag");
      }


      var pathParams = {
        'vmId': vmId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = {'String': 'String'};

      return this.apiClient.callApi(
        '/vm/{vmId}/tag/', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the operationVmPostaccessrights operation.
     * @callback module:api/VmApi~operationVmPostaccessrightsCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /accessrights/
     * @param {String} vmId ID of vm
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject41} opts.inlineObject41 
     * @param {module:api/VmApi~operationVmPostaccessrightsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    this.operationVmPostaccessrights = function(vmId, opts, callback) {
      opts = opts || {};
      var postBody = opts['inlineObject41'];

      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling operationVmPostaccessrights");
      }


      var pathParams = {
        'vmId': vmId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/vm/{vmId}/accessrights/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the operationVmPosthdd operation.
     * @callback module:api/VmApi~operationVmPosthddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Vm} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /hdd
     * @param {String} vmId ID of vm
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject39} opts.inlineObject39 
     * @param {module:api/VmApi~operationVmPosthddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Vm}
     */
    this.operationVmPosthdd = function(vmId, opts, callback) {
      opts = opts || {};
      var postBody = opts['inlineObject39'];

      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling operationVmPosthdd");
      }


      var pathParams = {
        'vmId': vmId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Vm;

      return this.apiClient.callApi(
        '/vm/{vmId}/hdd', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the operationVmPostnetadp operation.
     * @callback module:api/VmApi~operationVmPostnetadpCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Vm} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /netadp
     * @param {String} vmId ID of vm
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject40} opts.inlineObject40 
     * @param {module:api/VmApi~operationVmPostnetadpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Vm}
     */
    this.operationVmPostnetadp = function(vmId, opts, callback) {
      opts = opts || {};
      var postBody = opts['inlineObject40'];

      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling operationVmPostnetadp");
      }


      var pathParams = {
        'vmId': vmId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Vm;

      return this.apiClient.callApi(
        '/vm/{vmId}/netadp', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the showVm operation.
     * @callback module:api/VmApi~showVmCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Vm} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get
     * Returns a single vm
     * @param {String} vmId ID of vm
     * @param {module:api/VmApi~showVmCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Vm}
     */
    this.showVm = function(vmId, callback) {
      var postBody = null;

      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling showVm");
      }


      var pathParams = {
        'vmId': vmId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Vm;

      return this.apiClient.callApi(
        '/vm/{vmId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVm operation.
     * @callback module:api/VmApi~updateVmCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Vm} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update
     * Returns modified vm
     * @param {String} vmId ID of vm
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject36} opts.inlineObject36 
     * @param {module:api/VmApi~updateVmCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Vm}
     */
    this.updateVm = function(vmId, opts, callback) {
      opts = opts || {};
      var postBody = opts['inlineObject36'];

      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling updateVm");
      }


      var pathParams = {
        'vmId': vmId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Vm;

      return this.apiClient.callApi(
        '/vm/{vmId}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
