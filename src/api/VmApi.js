/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Event from '../model/Event';
import Hdd from '../model/Hdd';
import Netadp from '../model/Netadp';
import Vm from '../model/Vm';
import VmActionFlavour from '../model/VmActionFlavour';
import VmActionImage from '../model/VmActionImage';
import VmActionPasswordReset from '../model/VmActionPasswordReset';
import VmActionRename from '../model/VmActionRename';
import VmCreate from '../model/VmCreate';
import VmDelete from '../model/VmDelete';
import VmPostAccessrights from '../model/VmPostAccessrights';
import VmPostHdd from '../model/VmPostHdd';
import VmPostNetadp from '../model/VmPostNetadp';
import VmServices from '../model/VmServices';
import VmUpdate from '../model/VmUpdate';

/**
* Vm service.
* @module api/VmApi
* @version 0.0.2
*/
export default class VmApi {

    /**
    * Constructs a new VmApi. 
    * @alias module:api/VmApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * /actions/flavour
     * Action flavour
     * @param {String} vmId ID of vm
     * @param {module:model/VmActionFlavour} vmActionFlavour 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vm} and HTTP response
     */
    vmActionFlavourWithHttpInfo(vmId, vmActionFlavour) {
      let postBody = vmActionFlavour;

      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling vmActionFlavour");
      }

      // verify the required parameter 'vmActionFlavour' is set
      if (vmActionFlavour === undefined || vmActionFlavour === null) {
        throw new Error("Missing the required parameter 'vmActionFlavour' when calling vmActionFlavour");
      }


      let pathParams = {
        'vmId': vmId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Vm;

      return this.apiClient.callApi(
        '/vm/{vmId}/actions/flavour', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /actions/flavour
     * Action flavour
     * @param {String} vmId ID of vm
     * @param {module:model/VmActionFlavour} vmActionFlavour 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vm}
     */
    vmActionFlavour(vmId, vmActionFlavour) {
      return this.vmActionFlavourWithHttpInfo(vmId, vmActionFlavour)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/image
     * Action image
     * @param {String} vmId ID of vm
     * @param {module:model/VmActionImage} vmActionImage 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vm} and HTTP response
     */
    vmActionImageWithHttpInfo(vmId, vmActionImage) {
      let postBody = vmActionImage;

      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling vmActionImage");
      }

      // verify the required parameter 'vmActionImage' is set
      if (vmActionImage === undefined || vmActionImage === null) {
        throw new Error("Missing the required parameter 'vmActionImage' when calling vmActionImage");
      }


      let pathParams = {
        'vmId': vmId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Vm;

      return this.apiClient.callApi(
        '/vm/{vmId}/actions/image', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /actions/image
     * Action image
     * @param {String} vmId ID of vm
     * @param {module:model/VmActionImage} vmActionImage 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vm}
     */
    vmActionImage(vmId, vmActionImage) {
      return this.vmActionImageWithHttpInfo(vmId, vmActionImage)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/password_reset
     * Action password_reset
     * @param {String} vmId ID of vm
     * @param {module:model/VmActionPasswordReset} vmActionPasswordReset 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vm} and HTTP response
     */
    vmActionPasswordResetWithHttpInfo(vmId, vmActionPasswordReset) {
      let postBody = vmActionPasswordReset;

      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling vmActionPasswordReset");
      }

      // verify the required parameter 'vmActionPasswordReset' is set
      if (vmActionPasswordReset === undefined || vmActionPasswordReset === null) {
        throw new Error("Missing the required parameter 'vmActionPasswordReset' when calling vmActionPasswordReset");
      }


      let pathParams = {
        'vmId': vmId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Vm;

      return this.apiClient.callApi(
        '/vm/{vmId}/actions/password_reset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /actions/password_reset
     * Action password_reset
     * @param {String} vmId ID of vm
     * @param {module:model/VmActionPasswordReset} vmActionPasswordReset 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vm}
     */
    vmActionPasswordReset(vmId, vmActionPasswordReset) {
      return this.vmActionPasswordResetWithHttpInfo(vmId, vmActionPasswordReset)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/rename
     * Action rename
     * @param {String} vmId ID of vm
     * @param {module:model/VmActionRename} vmActionRename 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vm} and HTTP response
     */
    vmActionRenameWithHttpInfo(vmId, vmActionRename) {
      let postBody = vmActionRename;

      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling vmActionRename");
      }

      // verify the required parameter 'vmActionRename' is set
      if (vmActionRename === undefined || vmActionRename === null) {
        throw new Error("Missing the required parameter 'vmActionRename' when calling vmActionRename");
      }


      let pathParams = {
        'vmId': vmId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Vm;

      return this.apiClient.callApi(
        '/vm/{vmId}/actions/rename', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /actions/rename
     * Action rename
     * @param {String} vmId ID of vm
     * @param {module:model/VmActionRename} vmActionRename 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vm}
     */
    vmActionRename(vmId, vmActionRename) {
      return this.vmActionRenameWithHttpInfo(vmId, vmActionRename)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/restart
     * Action restart
     * @param {String} vmId ID of vm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vm} and HTTP response
     */
    vmActionRestartWithHttpInfo(vmId) {
      let postBody = null;

      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling vmActionRestart");
      }


      let pathParams = {
        'vmId': vmId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Vm;

      return this.apiClient.callApi(
        '/vm/{vmId}/actions/restart', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /actions/restart
     * Action restart
     * @param {String} vmId ID of vm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vm}
     */
    vmActionRestart(vmId) {
      return this.vmActionRestartWithHttpInfo(vmId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/start
     * Action start
     * @param {String} vmId ID of vm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vm} and HTTP response
     */
    vmActionStartWithHttpInfo(vmId) {
      let postBody = null;

      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling vmActionStart");
      }


      let pathParams = {
        'vmId': vmId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Vm;

      return this.apiClient.callApi(
        '/vm/{vmId}/actions/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /actions/start
     * Action start
     * @param {String} vmId ID of vm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vm}
     */
    vmActionStart(vmId) {
      return this.vmActionStartWithHttpInfo(vmId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/stop
     * Action stop
     * @param {String} vmId ID of vm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vm} and HTTP response
     */
    vmActionStopWithHttpInfo(vmId) {
      let postBody = null;

      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling vmActionStop");
      }


      let pathParams = {
        'vmId': vmId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Vm;

      return this.apiClient.callApi(
        '/vm/{vmId}/actions/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /actions/stop
     * Action stop
     * @param {String} vmId ID of vm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vm}
     */
    vmActionStop(vmId) {
      return this.vmActionStopWithHttpInfo(vmId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/turnoff
     * Action turnoff
     * @param {String} vmId ID of vm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vm} and HTTP response
     */
    vmActionTurnoffWithHttpInfo(vmId) {
      let postBody = null;

      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling vmActionTurnoff");
      }


      let pathParams = {
        'vmId': vmId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Vm;

      return this.apiClient.callApi(
        '/vm/{vmId}/actions/turnoff', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /actions/turnoff
     * Action turnoff
     * @param {String} vmId ID of vm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vm}
     */
    vmActionTurnoff(vmId) {
      return this.vmActionTurnoffWithHttpInfo(vmId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create
     * Create vm
     * @param {module:model/VmCreate} vmCreate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vm} and HTTP response
     */
    vmCreateWithHttpInfo(vmCreate) {
      let postBody = vmCreate;

      // verify the required parameter 'vmCreate' is set
      if (vmCreate === undefined || vmCreate === null) {
        throw new Error("Missing the required parameter 'vmCreate' when calling vmCreate");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Vm;

      return this.apiClient.callApi(
        '/vm', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create
     * Create vm
     * @param {module:model/VmCreate} vmCreate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vm}
     */
    vmCreate(vmCreate) {
      return this.vmCreateWithHttpInfo(vmCreate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete
     * @param {String} vmId ID of vm
     * @param {module:model/VmDelete} vmDelete 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    vmDeleteWithHttpInfo(vmId, vmDelete) {
      let postBody = vmDelete;

      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling vmDelete");
      }

      // verify the required parameter 'vmDelete' is set
      if (vmDelete === undefined || vmDelete === null) {
        throw new Error("Missing the required parameter 'vmDelete' when calling vmDelete");
      }


      let pathParams = {
        'vmId': vmId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/vm/{vmId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete
     * @param {String} vmId ID of vm
     * @param {module:model/VmDelete} vmDelete 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    vmDelete(vmId, vmDelete) {
      return this.vmDeleteWithHttpInfo(vmId, vmDelete)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights/:identity
     * @param {String} vmId ID of vm
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vm} and HTTP response
     */
    vmDeleteAccessrightsIdentityWithHttpInfo(vmId, identity) {
      let postBody = null;

      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling vmDeleteAccessrightsIdentity");
      }

      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling vmDeleteAccessrightsIdentity");
      }


      let pathParams = {
        'vmId': vmId,
        'identity': identity
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Vm;

      return this.apiClient.callApi(
        '/vm/{vmId}/accessrights/{identity}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /accessrights/:identity
     * @param {String} vmId ID of vm
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vm}
     */
    vmDeleteAccessrightsIdentity(vmId, identity) {
      return this.vmDeleteAccessrightsIdentityWithHttpInfo(vmId, identity)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /hdd/:diskId
     * @param {String} vmId ID of vm
     * @param {String} diskId diskId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vm} and HTTP response
     */
    vmDeleteHddDiskIdWithHttpInfo(vmId, diskId) {
      let postBody = null;

      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling vmDeleteHddDiskId");
      }

      // verify the required parameter 'diskId' is set
      if (diskId === undefined || diskId === null) {
        throw new Error("Missing the required parameter 'diskId' when calling vmDeleteHddDiskId");
      }


      let pathParams = {
        'vmId': vmId,
        'diskId': diskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Vm;

      return this.apiClient.callApi(
        '/vm/{vmId}/hdd/{diskId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /hdd/:diskId
     * @param {String} vmId ID of vm
     * @param {String} diskId diskId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vm}
     */
    vmDeleteHddDiskId(vmId, diskId) {
      return this.vmDeleteHddDiskIdWithHttpInfo(vmId, diskId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /netadp/:netadpId
     * @param {String} vmId ID of vm
     * @param {String} netadpId netadpId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vm} and HTTP response
     */
    vmDeleteNetadpNetadpIdWithHttpInfo(vmId, netadpId) {
      let postBody = null;

      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling vmDeleteNetadpNetadpId");
      }

      // verify the required parameter 'netadpId' is set
      if (netadpId === undefined || netadpId === null) {
        throw new Error("Missing the required parameter 'netadpId' when calling vmDeleteNetadpNetadpId");
      }


      let pathParams = {
        'vmId': vmId,
        'netadpId': netadpId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Vm;

      return this.apiClient.callApi(
        '/vm/{vmId}/netadp/{netadpId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /netadp/:netadpId
     * @param {String} vmId ID of vm
     * @param {String} netadpId netadpId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vm}
     */
    vmDeleteNetadpNetadpId(vmId, netadpId) {
      return this.vmDeleteNetadpNetadpIdWithHttpInfo(vmId, netadpId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag/:key
     * @param {String} vmId ID of vm
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    vmDeleteTagKeyWithHttpInfo(vmId, key) {
      let postBody = null;

      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling vmDeleteTagKey");
      }

      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling vmDeleteTagKey");
      }


      let pathParams = {
        'vmId': vmId,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/vm/{vmId}/tag/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /tag/:key
     * @param {String} vmId ID of vm
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    vmDeleteTagKey(vmId, key) {
      return this.vmDeleteTagKeyWithHttpInfo(vmId, key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services/:serviceId
     * @param {String} vmId ID of vm
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VmServices} and HTTP response
     */
    vmGetServicesServiceIdWithHttpInfo(vmId, serviceId) {
      let postBody = null;

      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling vmGetServicesServiceId");
      }

      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling vmGetServicesServiceId");
      }


      let pathParams = {
        'vmId': vmId,
        'serviceId': serviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VmServices;

      return this.apiClient.callApi(
        '/vm/{vmId}/services/{serviceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /services/:serviceId
     * @param {String} vmId ID of vm
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VmServices}
     */
    vmGetServicesServiceId(vmId, serviceId) {
      return this.vmGetServicesServiceIdWithHttpInfo(vmId, serviceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} vmId ID of vm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    vmGetTagWithHttpInfo(vmId) {
      let postBody = null;

      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling vmGetTag");
      }


      let pathParams = {
        'vmId': vmId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/vm/{vmId}/tag', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /tag
     * @param {String} vmId ID of vm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    vmGetTag(vmId) {
      return this.vmGetTagWithHttpInfo(vmId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List
     * List vm
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Vm>} and HTTP response
     */
    vmListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Vm];

      return this.apiClient.callApi(
        '/vm', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List
     * List vm
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Vm>}
     */
    vmList(opts) {
      return this.vmListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} vmId ID of vm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    vmListAccessrightsWithHttpInfo(vmId) {
      let postBody = null;

      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling vmListAccessrights");
      }


      let pathParams = {
        'vmId': vmId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];

      return this.apiClient.callApi(
        '/vm/{vmId}/accessrights', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /accessrights
     * @param {String} vmId ID of vm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    vmListAccessrights(vmId) {
      return this.vmListAccessrightsWithHttpInfo(vmId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /hdd
     * @param {String} vmId ID of vm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Hdd>} and HTTP response
     */
    vmListHddWithHttpInfo(vmId) {
      let postBody = null;

      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling vmListHdd");
      }


      let pathParams = {
        'vmId': vmId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Hdd];

      return this.apiClient.callApi(
        '/vm/{vmId}/hdd', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /hdd
     * @param {String} vmId ID of vm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Hdd>}
     */
    vmListHdd(vmId) {
      return this.vmListHddWithHttpInfo(vmId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /netadp
     * @param {String} vmId ID of vm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Netadp>} and HTTP response
     */
    vmListNetadpWithHttpInfo(vmId) {
      let postBody = null;

      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling vmListNetadp");
      }


      let pathParams = {
        'vmId': vmId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Netadp];

      return this.apiClient.callApi(
        '/vm/{vmId}/netadp', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /netadp
     * @param {String} vmId ID of vm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Netadp>}
     */
    vmListNetadp(vmId) {
      return this.vmListNetadpWithHttpInfo(vmId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /queue
     * @param {String} vmId ID of vm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Event>} and HTTP response
     */
    vmListQueueWithHttpInfo(vmId) {
      let postBody = null;

      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling vmListQueue");
      }


      let pathParams = {
        'vmId': vmId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Event];

      return this.apiClient.callApi(
        '/vm/{vmId}/queue', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /queue
     * @param {String} vmId ID of vm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Event>}
     */
    vmListQueue(vmId) {
      return this.vmListQueueWithHttpInfo(vmId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services
     * @param {String} vmId ID of vm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/VmServices>} and HTTP response
     */
    vmListServicesWithHttpInfo(vmId) {
      let postBody = null;

      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling vmListServices");
      }


      let pathParams = {
        'vmId': vmId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [VmServices];

      return this.apiClient.callApi(
        '/vm/{vmId}/services', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /services
     * @param {String} vmId ID of vm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/VmServices>}
     */
    vmListServices(vmId) {
      return this.vmListServicesWithHttpInfo(vmId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} vmId ID of vm
     * @param {Object} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    vmPatchTagWithHttpInfo(vmId, body) {
      let postBody = body;

      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling vmPatchTag");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling vmPatchTag");
      }


      let pathParams = {
        'vmId': vmId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/vm/{vmId}/tag', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /tag
     * @param {String} vmId ID of vm
     * @param {Object} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    vmPatchTag(vmId, body) {
      return this.vmPatchTagWithHttpInfo(vmId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} vmId ID of vm
     * @param {module:model/VmPostAccessrights} vmPostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    vmPostAccessrightsWithHttpInfo(vmId, vmPostAccessrights) {
      let postBody = vmPostAccessrights;

      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling vmPostAccessrights");
      }

      // verify the required parameter 'vmPostAccessrights' is set
      if (vmPostAccessrights === undefined || vmPostAccessrights === null) {
        throw new Error("Missing the required parameter 'vmPostAccessrights' when calling vmPostAccessrights");
      }


      let pathParams = {
        'vmId': vmId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/vm/{vmId}/accessrights', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /accessrights
     * @param {String} vmId ID of vm
     * @param {module:model/VmPostAccessrights} vmPostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    vmPostAccessrights(vmId, vmPostAccessrights) {
      return this.vmPostAccessrightsWithHttpInfo(vmId, vmPostAccessrights)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /hdd
     * @param {String} vmId ID of vm
     * @param {module:model/VmPostHdd} vmPostHdd 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vm} and HTTP response
     */
    vmPostHddWithHttpInfo(vmId, vmPostHdd) {
      let postBody = vmPostHdd;

      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling vmPostHdd");
      }

      // verify the required parameter 'vmPostHdd' is set
      if (vmPostHdd === undefined || vmPostHdd === null) {
        throw new Error("Missing the required parameter 'vmPostHdd' when calling vmPostHdd");
      }


      let pathParams = {
        'vmId': vmId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Vm;

      return this.apiClient.callApi(
        '/vm/{vmId}/hdd', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /hdd
     * @param {String} vmId ID of vm
     * @param {module:model/VmPostHdd} vmPostHdd 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vm}
     */
    vmPostHdd(vmId, vmPostHdd) {
      return this.vmPostHddWithHttpInfo(vmId, vmPostHdd)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /netadp
     * @param {String} vmId ID of vm
     * @param {module:model/VmPostNetadp} vmPostNetadp 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vm} and HTTP response
     */
    vmPostNetadpWithHttpInfo(vmId, vmPostNetadp) {
      let postBody = vmPostNetadp;

      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling vmPostNetadp");
      }

      // verify the required parameter 'vmPostNetadp' is set
      if (vmPostNetadp === undefined || vmPostNetadp === null) {
        throw new Error("Missing the required parameter 'vmPostNetadp' when calling vmPostNetadp");
      }


      let pathParams = {
        'vmId': vmId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Vm;

      return this.apiClient.callApi(
        '/vm/{vmId}/netadp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /netadp
     * @param {String} vmId ID of vm
     * @param {module:model/VmPostNetadp} vmPostNetadp 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vm}
     */
    vmPostNetadp(vmId, vmPostNetadp) {
      return this.vmPostNetadpWithHttpInfo(vmId, vmPostNetadp)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get
     * Returns a single vm
     * @param {String} vmId ID of vm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vm} and HTTP response
     */
    vmShowWithHttpInfo(vmId) {
      let postBody = null;

      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling vmShow");
      }


      let pathParams = {
        'vmId': vmId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Vm;

      return this.apiClient.callApi(
        '/vm/{vmId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get
     * Returns a single vm
     * @param {String} vmId ID of vm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vm}
     */
    vmShow(vmId) {
      return this.vmShowWithHttpInfo(vmId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update
     * Returns modified vm
     * @param {String} vmId ID of vm
     * @param {module:model/VmUpdate} vmUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vm} and HTTP response
     */
    vmUpdateWithHttpInfo(vmId, vmUpdate) {
      let postBody = vmUpdate;

      // verify the required parameter 'vmId' is set
      if (vmId === undefined || vmId === null) {
        throw new Error("Missing the required parameter 'vmId' when calling vmUpdate");
      }

      // verify the required parameter 'vmUpdate' is set
      if (vmUpdate === undefined || vmUpdate === null) {
        throw new Error("Missing the required parameter 'vmUpdate' when calling vmUpdate");
      }


      let pathParams = {
        'vmId': vmId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Vm;

      return this.apiClient.callApi(
        '/vm/{vmId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update
     * Returns modified vm
     * @param {String} vmId ID of vm
     * @param {module:model/VmUpdate} vmUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vm}
     */
    vmUpdate(vmId, vmUpdate) {
      return this.vmUpdateWithHttpInfo(vmId, vmUpdate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
