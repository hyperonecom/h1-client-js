/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Event', 'model/InlineObject42', 'model/InlineObject43', 'model/InlineObject44', 'model/InlineObject45', 'model/Ip', 'model/IpServices'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Event'), require('../model/InlineObject42'), require('../model/InlineObject43'), require('../model/InlineObject44'), require('../model/InlineObject45'), require('../model/Ip'), require('../model/IpServices'));
  } else {
    // Browser globals (root is window)
    if (!root.HyperOneApi) {
      root.HyperOneApi = {};
    }
    root.HyperOneApi.IpApi = factory(root.HyperOneApi.ApiClient, root.HyperOneApi.Event, root.HyperOneApi.InlineObject42, root.HyperOneApi.InlineObject43, root.HyperOneApi.InlineObject44, root.HyperOneApi.InlineObject45, root.HyperOneApi.Ip, root.HyperOneApi.IpServices);
  }
}(this, function(ApiClient, Event, InlineObject42, InlineObject43, InlineObject44, InlineObject45, Ip, IpServices) {
  'use strict';

  /**
   * Ip service.
   * @module api/IpApi
   * @version 1
   */

  /**
   * Constructs a new IpApi. 
   * @alias module:api/IpApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the actionIpAllocate operation.
     * @callback module:api/IpApi~actionIpAllocateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Ip} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /actions/allocate
     * Action allocate
     * @param {String} ipId ID of ip
     * @param {module:api/IpApi~actionIpAllocateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Ip}
     */
    this.actionIpAllocate = function(ipId, callback) {
      var postBody = null;

      // verify the required parameter 'ipId' is set
      if (ipId === undefined || ipId === null) {
        throw new Error("Missing the required parameter 'ipId' when calling actionIpAllocate");
      }


      var pathParams = {
        'ipId': ipId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Ip;

      return this.apiClient.callApi(
        '/ip/{ipId}/actions/allocate', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the actionIpAssociate operation.
     * @callback module:api/IpApi~actionIpAssociateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Ip} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /actions/associate
     * Action associate
     * @param {String} ipId ID of ip
     * @param {module:api/IpApi~actionIpAssociateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Ip}
     */
    this.actionIpAssociate = function(ipId, callback) {
      var postBody = null;

      // verify the required parameter 'ipId' is set
      if (ipId === undefined || ipId === null) {
        throw new Error("Missing the required parameter 'ipId' when calling actionIpAssociate");
      }


      var pathParams = {
        'ipId': ipId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Ip;

      return this.apiClient.callApi(
        '/ip/{ipId}/actions/associate', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the actionIpDisassociate operation.
     * @callback module:api/IpApi~actionIpDisassociateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Ip} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /actions/disassociate
     * Action disassociate
     * @param {String} ipId ID of ip
     * @param {module:api/IpApi~actionIpDisassociateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Ip}
     */
    this.actionIpDisassociate = function(ipId, callback) {
      var postBody = null;

      // verify the required parameter 'ipId' is set
      if (ipId === undefined || ipId === null) {
        throw new Error("Missing the required parameter 'ipId' when calling actionIpDisassociate");
      }


      var pathParams = {
        'ipId': ipId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Ip;

      return this.apiClient.callApi(
        '/ip/{ipId}/actions/disassociate', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the actionIpRelease operation.
     * @callback module:api/IpApi~actionIpReleaseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Ip} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /actions/release
     * Action release
     * @param {String} ipId ID of ip
     * @param {module:api/IpApi~actionIpReleaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Ip}
     */
    this.actionIpRelease = function(ipId, callback) {
      var postBody = null;

      // verify the required parameter 'ipId' is set
      if (ipId === undefined || ipId === null) {
        throw new Error("Missing the required parameter 'ipId' when calling actionIpRelease");
      }


      var pathParams = {
        'ipId': ipId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Ip;

      return this.apiClient.callApi(
        '/ip/{ipId}/actions/release', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the actionIpTransfer operation.
     * @callback module:api/IpApi~actionIpTransferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Ip} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /actions/transfer
     * Action transfer
     * @param {String} ipId ID of ip
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject44} opts.inlineObject44 
     * @param {module:api/IpApi~actionIpTransferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Ip}
     */
    this.actionIpTransfer = function(ipId, opts, callback) {
      opts = opts || {};
      var postBody = opts['inlineObject44'];

      // verify the required parameter 'ipId' is set
      if (ipId === undefined || ipId === null) {
        throw new Error("Missing the required parameter 'ipId' when calling actionIpTransfer");
      }


      var pathParams = {
        'ipId': ipId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Ip;

      return this.apiClient.callApi(
        '/ip/{ipId}/actions/transfer', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createIp operation.
     * @callback module:api/IpApi~createIpCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Ip} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create
     * Create ip
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject42} opts.inlineObject42 
     * @param {module:api/IpApi~createIpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Ip}
     */
    this.createIp = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['inlineObject42'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Ip;

      return this.apiClient.callApi(
        '/ip', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteIp operation.
     * @callback module:api/IpApi~deleteIpCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete
     * @param {String} ipId ID of ip
     * @param {module:api/IpApi~deleteIpCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteIp = function(ipId, callback) {
      var postBody = null;

      // verify the required parameter 'ipId' is set
      if (ipId === undefined || ipId === null) {
        throw new Error("Missing the required parameter 'ipId' when calling deleteIp");
      }


      var pathParams = {
        'ipId': ipId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/ip/{ipId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listIp operation.
     * @callback module:api/IpApi~listIpCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Ip>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List
     * List ip
     * @param {Object} opts Optional parameters
     * @param {String} opts.mac Filter by mac
     * @param {module:api/IpApi~listIpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Ip>}
     */
    this.listIp = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'mac': opts['mac'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Ip];

      return this.apiClient.callApi(
        '/ip', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the operationIpDeleteaccessrightsIdentity operation.
     * @callback module:api/IpApi~operationIpDeleteaccessrightsIdentityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Ip} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /accessrights/:identity
     * @param {String} ipId ID of ip
     * @param {String} identity identity
     * @param {module:api/IpApi~operationIpDeleteaccessrightsIdentityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Ip}
     */
    this.operationIpDeleteaccessrightsIdentity = function(ipId, identity, callback) {
      var postBody = null;

      // verify the required parameter 'ipId' is set
      if (ipId === undefined || ipId === null) {
        throw new Error("Missing the required parameter 'ipId' when calling operationIpDeleteaccessrightsIdentity");
      }

      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling operationIpDeleteaccessrightsIdentity");
      }


      var pathParams = {
        'ipId': ipId,
        'identity': identity
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Ip;

      return this.apiClient.callApi(
        '/ip/{ipId}/accessrights/{identity}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the operationIpDeletetagKey operation.
     * @callback module:api/IpApi~operationIpDeletetagKeyCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: String}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /tag/:key
     * @param {String} ipId ID of ip
     * @param {String} key key
     * @param {module:api/IpApi~operationIpDeletetagKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: String}>}
     */
    this.operationIpDeletetagKey = function(ipId, key, callback) {
      var postBody = null;

      // verify the required parameter 'ipId' is set
      if (ipId === undefined || ipId === null) {
        throw new Error("Missing the required parameter 'ipId' when calling operationIpDeletetagKey");
      }

      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling operationIpDeletetagKey");
      }


      var pathParams = {
        'ipId': ipId,
        'key': key
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = {'String': 'String'};

      return this.apiClient.callApi(
        '/ip/{ipId}/tag/{key}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the operationIpGetservicesServiceId operation.
     * @callback module:api/IpApi~operationIpGetservicesServiceIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IpServices} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /services/:serviceId
     * @param {String} ipId ID of ip
     * @param {String} serviceId serviceId
     * @param {module:api/IpApi~operationIpGetservicesServiceIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IpServices}
     */
    this.operationIpGetservicesServiceId = function(ipId, serviceId, callback) {
      var postBody = null;

      // verify the required parameter 'ipId' is set
      if (ipId === undefined || ipId === null) {
        throw new Error("Missing the required parameter 'ipId' when calling operationIpGetservicesServiceId");
      }

      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling operationIpGetservicesServiceId");
      }


      var pathParams = {
        'ipId': ipId,
        'serviceId': serviceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = IpServices;

      return this.apiClient.callApi(
        '/ip/{ipId}/services/{serviceId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the operationIpGettag operation.
     * @callback module:api/IpApi~operationIpGettagCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: String}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /tag/
     * @param {String} ipId ID of ip
     * @param {module:api/IpApi~operationIpGettagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: String}>}
     */
    this.operationIpGettag = function(ipId, callback) {
      var postBody = null;

      // verify the required parameter 'ipId' is set
      if (ipId === undefined || ipId === null) {
        throw new Error("Missing the required parameter 'ipId' when calling operationIpGettag");
      }


      var pathParams = {
        'ipId': ipId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = {'String': 'String'};

      return this.apiClient.callApi(
        '/ip/{ipId}/tag/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the operationIpListaccessrights operation.
     * @callback module:api/IpApi~operationIpListaccessrightsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /accessrights/
     * @param {String} ipId ID of ip
     * @param {module:api/IpApi~operationIpListaccessrightsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    this.operationIpListaccessrights = function(ipId, callback) {
      var postBody = null;

      // verify the required parameter 'ipId' is set
      if (ipId === undefined || ipId === null) {
        throw new Error("Missing the required parameter 'ipId' when calling operationIpListaccessrights");
      }


      var pathParams = {
        'ipId': ipId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/ip/{ipId}/accessrights/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the operationIpListqueue operation.
     * @callback module:api/IpApi~operationIpListqueueCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Event>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /queue/
     * @param {String} ipId ID of ip
     * @param {module:api/IpApi~operationIpListqueueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Event>}
     */
    this.operationIpListqueue = function(ipId, callback) {
      var postBody = null;

      // verify the required parameter 'ipId' is set
      if (ipId === undefined || ipId === null) {
        throw new Error("Missing the required parameter 'ipId' when calling operationIpListqueue");
      }


      var pathParams = {
        'ipId': ipId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Event];

      return this.apiClient.callApi(
        '/ip/{ipId}/queue/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the operationIpListservices operation.
     * @callback module:api/IpApi~operationIpListservicesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IpServices>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /services/
     * @param {String} ipId ID of ip
     * @param {module:api/IpApi~operationIpListservicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/IpServices>}
     */
    this.operationIpListservices = function(ipId, callback) {
      var postBody = null;

      // verify the required parameter 'ipId' is set
      if (ipId === undefined || ipId === null) {
        throw new Error("Missing the required parameter 'ipId' when calling operationIpListservices");
      }


      var pathParams = {
        'ipId': ipId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [IpServices];

      return this.apiClient.callApi(
        '/ip/{ipId}/services/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the operationIpPatchtag operation.
     * @callback module:api/IpApi~operationIpPatchtagCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: String}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /tag/
     * @param {String} ipId ID of ip
     * @param {Object.<String, {String: String}>} requestBody 
     * @param {module:api/IpApi~operationIpPatchtagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: String}>}
     */
    this.operationIpPatchtag = function(ipId, requestBody, callback) {
      var postBody = requestBody;

      // verify the required parameter 'ipId' is set
      if (ipId === undefined || ipId === null) {
        throw new Error("Missing the required parameter 'ipId' when calling operationIpPatchtag");
      }

      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling operationIpPatchtag");
      }


      var pathParams = {
        'ipId': ipId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = {'String': 'String'};

      return this.apiClient.callApi(
        '/ip/{ipId}/tag/', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the operationIpPostaccessrights operation.
     * @callback module:api/IpApi~operationIpPostaccessrightsCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /accessrights/
     * @param {String} ipId ID of ip
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject45} opts.inlineObject45 
     * @param {module:api/IpApi~operationIpPostaccessrightsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    this.operationIpPostaccessrights = function(ipId, opts, callback) {
      opts = opts || {};
      var postBody = opts['inlineObject45'];

      // verify the required parameter 'ipId' is set
      if (ipId === undefined || ipId === null) {
        throw new Error("Missing the required parameter 'ipId' when calling operationIpPostaccessrights");
      }


      var pathParams = {
        'ipId': ipId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/ip/{ipId}/accessrights/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the showIp operation.
     * @callback module:api/IpApi~showIpCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Ip} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get
     * Returns a single ip
     * @param {String} ipId ID of ip
     * @param {module:api/IpApi~showIpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Ip}
     */
    this.showIp = function(ipId, callback) {
      var postBody = null;

      // verify the required parameter 'ipId' is set
      if (ipId === undefined || ipId === null) {
        throw new Error("Missing the required parameter 'ipId' when calling showIp");
      }


      var pathParams = {
        'ipId': ipId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Ip;

      return this.apiClient.callApi(
        '/ip/{ipId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateIp operation.
     * @callback module:api/IpApi~updateIpCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Ip} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update
     * Returns modified ip
     * @param {String} ipId ID of ip
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject43} opts.inlineObject43 
     * @param {module:api/IpApi~updateIpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Ip}
     */
    this.updateIp = function(ipId, opts, callback) {
      opts = opts || {};
      var postBody = opts['inlineObject43'];

      // verify the required parameter 'ipId' is set
      if (ipId === undefined || ipId === null) {
        throw new Error("Missing the required parameter 'ipId' when calling updateIp");
      }


      var pathParams = {
        'ipId': ipId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Ip;

      return this.apiClient.callApi(
        '/ip/{ipId}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
