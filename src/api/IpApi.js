/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Event from '../model/Event';
import Ip from '../model/Ip';
import IpActionAllocate from '../model/IpActionAllocate';
import IpActionAssociate from '../model/IpActionAssociate';
import IpActionTransfer from '../model/IpActionTransfer';
import IpCreate from '../model/IpCreate';
import IpPostAccessrights from '../model/IpPostAccessrights';
import IpServices from '../model/IpServices';
import IpUpdate from '../model/IpUpdate';

/**
* Ip service.
* @module api/IpApi
* @version 0.0.2
*/
export default class IpApi {

    /**
    * Constructs a new IpApi. 
    * @alias module:api/IpApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * /actions/allocate
     * Action allocate
     * @param {String} ipId ID of ip
     * @param {module:model/IpActionAllocate} ipActionAllocate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Ip} and HTTP response
     */
    ipActionAllocateWithHttpInfo(ipId, ipActionAllocate) {
      let postBody = ipActionAllocate;

      // verify the required parameter 'ipId' is set
      if (ipId === undefined || ipId === null) {
        throw new Error("Missing the required parameter 'ipId' when calling ipActionAllocate");
      }

      // verify the required parameter 'ipActionAllocate' is set
      if (ipActionAllocate === undefined || ipActionAllocate === null) {
        throw new Error("Missing the required parameter 'ipActionAllocate' when calling ipActionAllocate");
      }


      let pathParams = {
        'ipId': ipId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Ip;

      return this.apiClient.callApi(
        '/ip/{ipId}/actions/allocate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /actions/allocate
     * Action allocate
     * @param {String} ipId ID of ip
     * @param {module:model/IpActionAllocate} ipActionAllocate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Ip}
     */
    ipActionAllocate(ipId, ipActionAllocate) {
      return this.ipActionAllocateWithHttpInfo(ipId, ipActionAllocate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/associate
     * Action associate
     * @param {String} ipId ID of ip
     * @param {module:model/IpActionAssociate} ipActionAssociate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Ip} and HTTP response
     */
    ipActionAssociateWithHttpInfo(ipId, ipActionAssociate) {
      let postBody = ipActionAssociate;

      // verify the required parameter 'ipId' is set
      if (ipId === undefined || ipId === null) {
        throw new Error("Missing the required parameter 'ipId' when calling ipActionAssociate");
      }

      // verify the required parameter 'ipActionAssociate' is set
      if (ipActionAssociate === undefined || ipActionAssociate === null) {
        throw new Error("Missing the required parameter 'ipActionAssociate' when calling ipActionAssociate");
      }


      let pathParams = {
        'ipId': ipId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Ip;

      return this.apiClient.callApi(
        '/ip/{ipId}/actions/associate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /actions/associate
     * Action associate
     * @param {String} ipId ID of ip
     * @param {module:model/IpActionAssociate} ipActionAssociate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Ip}
     */
    ipActionAssociate(ipId, ipActionAssociate) {
      return this.ipActionAssociateWithHttpInfo(ipId, ipActionAssociate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/disassociate
     * Action disassociate
     * @param {String} ipId ID of ip
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Ip} and HTTP response
     */
    ipActionDisassociateWithHttpInfo(ipId) {
      let postBody = null;

      // verify the required parameter 'ipId' is set
      if (ipId === undefined || ipId === null) {
        throw new Error("Missing the required parameter 'ipId' when calling ipActionDisassociate");
      }


      let pathParams = {
        'ipId': ipId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Ip;

      return this.apiClient.callApi(
        '/ip/{ipId}/actions/disassociate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /actions/disassociate
     * Action disassociate
     * @param {String} ipId ID of ip
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Ip}
     */
    ipActionDisassociate(ipId) {
      return this.ipActionDisassociateWithHttpInfo(ipId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/release
     * Action release
     * @param {String} ipId ID of ip
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Ip} and HTTP response
     */
    ipActionReleaseWithHttpInfo(ipId) {
      let postBody = null;

      // verify the required parameter 'ipId' is set
      if (ipId === undefined || ipId === null) {
        throw new Error("Missing the required parameter 'ipId' when calling ipActionRelease");
      }


      let pathParams = {
        'ipId': ipId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Ip;

      return this.apiClient.callApi(
        '/ip/{ipId}/actions/release', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /actions/release
     * Action release
     * @param {String} ipId ID of ip
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Ip}
     */
    ipActionRelease(ipId) {
      return this.ipActionReleaseWithHttpInfo(ipId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/transfer
     * Action transfer
     * @param {String} ipId ID of ip
     * @param {module:model/IpActionTransfer} ipActionTransfer 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Ip} and HTTP response
     */
    ipActionTransferWithHttpInfo(ipId, ipActionTransfer) {
      let postBody = ipActionTransfer;

      // verify the required parameter 'ipId' is set
      if (ipId === undefined || ipId === null) {
        throw new Error("Missing the required parameter 'ipId' when calling ipActionTransfer");
      }

      // verify the required parameter 'ipActionTransfer' is set
      if (ipActionTransfer === undefined || ipActionTransfer === null) {
        throw new Error("Missing the required parameter 'ipActionTransfer' when calling ipActionTransfer");
      }


      let pathParams = {
        'ipId': ipId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Ip;

      return this.apiClient.callApi(
        '/ip/{ipId}/actions/transfer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /actions/transfer
     * Action transfer
     * @param {String} ipId ID of ip
     * @param {module:model/IpActionTransfer} ipActionTransfer 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Ip}
     */
    ipActionTransfer(ipId, ipActionTransfer) {
      return this.ipActionTransferWithHttpInfo(ipId, ipActionTransfer)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create
     * Create ip
     * @param {module:model/IpCreate} ipCreate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Ip} and HTTP response
     */
    ipCreateWithHttpInfo(ipCreate) {
      let postBody = ipCreate;

      // verify the required parameter 'ipCreate' is set
      if (ipCreate === undefined || ipCreate === null) {
        throw new Error("Missing the required parameter 'ipCreate' when calling ipCreate");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Ip;

      return this.apiClient.callApi(
        '/ip', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create
     * Create ip
     * @param {module:model/IpCreate} ipCreate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Ip}
     */
    ipCreate(ipCreate) {
      return this.ipCreateWithHttpInfo(ipCreate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete
     * @param {String} ipId ID of ip
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    ipDeleteWithHttpInfo(ipId) {
      let postBody = null;

      // verify the required parameter 'ipId' is set
      if (ipId === undefined || ipId === null) {
        throw new Error("Missing the required parameter 'ipId' when calling ipDelete");
      }


      let pathParams = {
        'ipId': ipId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/ip/{ipId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete
     * @param {String} ipId ID of ip
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    ipDelete(ipId) {
      return this.ipDeleteWithHttpInfo(ipId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights/:identity
     * @param {String} ipId ID of ip
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Ip} and HTTP response
     */
    ipDeleteAccessrightsIdentityWithHttpInfo(ipId, identity) {
      let postBody = null;

      // verify the required parameter 'ipId' is set
      if (ipId === undefined || ipId === null) {
        throw new Error("Missing the required parameter 'ipId' when calling ipDeleteAccessrightsIdentity");
      }

      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling ipDeleteAccessrightsIdentity");
      }


      let pathParams = {
        'ipId': ipId,
        'identity': identity
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Ip;

      return this.apiClient.callApi(
        '/ip/{ipId}/accessrights/{identity}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /accessrights/:identity
     * @param {String} ipId ID of ip
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Ip}
     */
    ipDeleteAccessrightsIdentity(ipId, identity) {
      return this.ipDeleteAccessrightsIdentityWithHttpInfo(ipId, identity)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag/:key
     * @param {String} ipId ID of ip
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    ipDeleteTagKeyWithHttpInfo(ipId, key) {
      let postBody = null;

      // verify the required parameter 'ipId' is set
      if (ipId === undefined || ipId === null) {
        throw new Error("Missing the required parameter 'ipId' when calling ipDeleteTagKey");
      }

      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling ipDeleteTagKey");
      }


      let pathParams = {
        'ipId': ipId,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/ip/{ipId}/tag/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /tag/:key
     * @param {String} ipId ID of ip
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    ipDeleteTagKey(ipId, key) {
      return this.ipDeleteTagKeyWithHttpInfo(ipId, key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services/:serviceId
     * @param {String} ipId ID of ip
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IpServices} and HTTP response
     */
    ipGetServicesServiceIdWithHttpInfo(ipId, serviceId) {
      let postBody = null;

      // verify the required parameter 'ipId' is set
      if (ipId === undefined || ipId === null) {
        throw new Error("Missing the required parameter 'ipId' when calling ipGetServicesServiceId");
      }

      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling ipGetServicesServiceId");
      }


      let pathParams = {
        'ipId': ipId,
        'serviceId': serviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IpServices;

      return this.apiClient.callApi(
        '/ip/{ipId}/services/{serviceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /services/:serviceId
     * @param {String} ipId ID of ip
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IpServices}
     */
    ipGetServicesServiceId(ipId, serviceId) {
      return this.ipGetServicesServiceIdWithHttpInfo(ipId, serviceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} ipId ID of ip
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    ipGetTagWithHttpInfo(ipId) {
      let postBody = null;

      // verify the required parameter 'ipId' is set
      if (ipId === undefined || ipId === null) {
        throw new Error("Missing the required parameter 'ipId' when calling ipGetTag");
      }


      let pathParams = {
        'ipId': ipId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/ip/{ipId}/tag', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /tag
     * @param {String} ipId ID of ip
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    ipGetTag(ipId) {
      return this.ipGetTagWithHttpInfo(ipId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List
     * List ip
     * @param {Object} opts Optional parameters
     * @param {String} opts.mac Filter by mac
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Ip>} and HTTP response
     */
    ipListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'mac': opts['mac']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Ip];

      return this.apiClient.callApi(
        '/ip', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List
     * List ip
     * @param {Object} opts Optional parameters
     * @param {String} opts.mac Filter by mac
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Ip>}
     */
    ipList(opts) {
      return this.ipListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} ipId ID of ip
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    ipListAccessrightsWithHttpInfo(ipId) {
      let postBody = null;

      // verify the required parameter 'ipId' is set
      if (ipId === undefined || ipId === null) {
        throw new Error("Missing the required parameter 'ipId' when calling ipListAccessrights");
      }


      let pathParams = {
        'ipId': ipId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];

      return this.apiClient.callApi(
        '/ip/{ipId}/accessrights', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /accessrights
     * @param {String} ipId ID of ip
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    ipListAccessrights(ipId) {
      return this.ipListAccessrightsWithHttpInfo(ipId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /queue
     * @param {String} ipId ID of ip
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Event>} and HTTP response
     */
    ipListQueueWithHttpInfo(ipId) {
      let postBody = null;

      // verify the required parameter 'ipId' is set
      if (ipId === undefined || ipId === null) {
        throw new Error("Missing the required parameter 'ipId' when calling ipListQueue");
      }


      let pathParams = {
        'ipId': ipId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Event];

      return this.apiClient.callApi(
        '/ip/{ipId}/queue', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /queue
     * @param {String} ipId ID of ip
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Event>}
     */
    ipListQueue(ipId) {
      return this.ipListQueueWithHttpInfo(ipId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services
     * @param {String} ipId ID of ip
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/IpServices>} and HTTP response
     */
    ipListServicesWithHttpInfo(ipId) {
      let postBody = null;

      // verify the required parameter 'ipId' is set
      if (ipId === undefined || ipId === null) {
        throw new Error("Missing the required parameter 'ipId' when calling ipListServices");
      }


      let pathParams = {
        'ipId': ipId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [IpServices];

      return this.apiClient.callApi(
        '/ip/{ipId}/services', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /services
     * @param {String} ipId ID of ip
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/IpServices>}
     */
    ipListServices(ipId) {
      return this.ipListServicesWithHttpInfo(ipId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} ipId ID of ip
     * @param {Object} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    ipPatchTagWithHttpInfo(ipId, body) {
      let postBody = body;

      // verify the required parameter 'ipId' is set
      if (ipId === undefined || ipId === null) {
        throw new Error("Missing the required parameter 'ipId' when calling ipPatchTag");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling ipPatchTag");
      }


      let pathParams = {
        'ipId': ipId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/ip/{ipId}/tag', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /tag
     * @param {String} ipId ID of ip
     * @param {Object} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    ipPatchTag(ipId, body) {
      return this.ipPatchTagWithHttpInfo(ipId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} ipId ID of ip
     * @param {module:model/IpPostAccessrights} ipPostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    ipPostAccessrightsWithHttpInfo(ipId, ipPostAccessrights) {
      let postBody = ipPostAccessrights;

      // verify the required parameter 'ipId' is set
      if (ipId === undefined || ipId === null) {
        throw new Error("Missing the required parameter 'ipId' when calling ipPostAccessrights");
      }

      // verify the required parameter 'ipPostAccessrights' is set
      if (ipPostAccessrights === undefined || ipPostAccessrights === null) {
        throw new Error("Missing the required parameter 'ipPostAccessrights' when calling ipPostAccessrights");
      }


      let pathParams = {
        'ipId': ipId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/ip/{ipId}/accessrights', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /accessrights
     * @param {String} ipId ID of ip
     * @param {module:model/IpPostAccessrights} ipPostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    ipPostAccessrights(ipId, ipPostAccessrights) {
      return this.ipPostAccessrightsWithHttpInfo(ipId, ipPostAccessrights)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get
     * Returns a single ip
     * @param {String} ipId ID of ip
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Ip} and HTTP response
     */
    ipShowWithHttpInfo(ipId) {
      let postBody = null;

      // verify the required parameter 'ipId' is set
      if (ipId === undefined || ipId === null) {
        throw new Error("Missing the required parameter 'ipId' when calling ipShow");
      }


      let pathParams = {
        'ipId': ipId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Ip;

      return this.apiClient.callApi(
        '/ip/{ipId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get
     * Returns a single ip
     * @param {String} ipId ID of ip
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Ip}
     */
    ipShow(ipId) {
      return this.ipShowWithHttpInfo(ipId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update
     * Returns modified ip
     * @param {String} ipId ID of ip
     * @param {module:model/IpUpdate} ipUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Ip} and HTTP response
     */
    ipUpdateWithHttpInfo(ipId, ipUpdate) {
      let postBody = ipUpdate;

      // verify the required parameter 'ipId' is set
      if (ipId === undefined || ipId === null) {
        throw new Error("Missing the required parameter 'ipId' when calling ipUpdate");
      }

      // verify the required parameter 'ipUpdate' is set
      if (ipUpdate === undefined || ipUpdate === null) {
        throw new Error("Missing the required parameter 'ipUpdate' when calling ipUpdate");
      }


      let pathParams = {
        'ipId': ipId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Ip;

      return this.apiClient.callApi(
        '/ip/{ipId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update
     * Returns modified ip
     * @param {String} ipId ID of ip
     * @param {module:model/IpUpdate} ipUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Ip}
     */
    ipUpdate(ipId, ipUpdate) {
      return this.ipUpdateWithHttpInfo(ipId, ipUpdate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
