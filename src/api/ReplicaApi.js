/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Event', 'model/InlineObject74', 'model/InlineObject75', 'model/InlineObject76', 'model/Replica', 'model/ReplicaServices'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Event'), require('../model/InlineObject74'), require('../model/InlineObject75'), require('../model/InlineObject76'), require('../model/Replica'), require('../model/ReplicaServices'));
  } else {
    // Browser globals (root is window)
    if (!root.HyperOneApi) {
      root.HyperOneApi = {};
    }
    root.HyperOneApi.ReplicaApi = factory(root.HyperOneApi.ApiClient, root.HyperOneApi.Event, root.HyperOneApi.InlineObject74, root.HyperOneApi.InlineObject75, root.HyperOneApi.InlineObject76, root.HyperOneApi.Replica, root.HyperOneApi.ReplicaServices);
  }
}(this, function(ApiClient, Event, InlineObject74, InlineObject75, InlineObject76, Replica, ReplicaServices) {
  'use strict';

  /**
   * Replica service.
   * @module api/ReplicaApi
   * @version 1.0.0
   */

  /**
   * Constructs a new ReplicaApi. 
   * @alias module:api/ReplicaApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * /actions/image
     * Action image
     * @param {String} replicaId ID of replica
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject75} opts.inlineObject75 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Replica} and HTTP response
     */
    this.actionReplicaImageWithHttpInfo = function(replicaId, opts) {
      opts = opts || {};
      var postBody = opts['inlineObject75'];

      // verify the required parameter 'replicaId' is set
      if (replicaId === undefined || replicaId === null) {
        throw new Error("Missing the required parameter 'replicaId' when calling actionReplicaImage");
      }


      var pathParams = {
        'replicaId': replicaId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Replica;

      return this.apiClient.callApi(
        '/replica/{replicaId}/actions/image', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /actions/image
     * Action image
     * @param {String} replicaId ID of replica
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject75} opts.inlineObject75 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Replica}
     */
    this.actionReplicaImage = function(replicaId, opts) {
      return this.actionReplicaImageWithHttpInfo(replicaId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create
     * Create replica
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject74} opts.inlineObject74 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Replica} and HTTP response
     */
    this.createReplicaWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['inlineObject74'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Replica;

      return this.apiClient.callApi(
        '/replica', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create
     * Create replica
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject74} opts.inlineObject74 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Replica}
     */
    this.createReplica = function(opts) {
      return this.createReplicaWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete
     * @param {String} replicaId ID of replica
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteReplicaWithHttpInfo = function(replicaId) {
      var postBody = null;

      // verify the required parameter 'replicaId' is set
      if (replicaId === undefined || replicaId === null) {
        throw new Error("Missing the required parameter 'replicaId' when calling deleteReplica");
      }


      var pathParams = {
        'replicaId': replicaId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/replica/{replicaId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete
     * @param {String} replicaId ID of replica
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteReplica = function(replicaId) {
      return this.deleteReplicaWithHttpInfo(replicaId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List
     * List replica
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Replica>} and HTTP response
     */
    this.listReplicaWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'name': opts['name'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Replica];

      return this.apiClient.callApi(
        '/replica', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List
     * List replica
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Replica>}
     */
    this.listReplica = function(opts) {
      return this.listReplicaWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights/:identity
     * @param {String} replicaId ID of replica
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Replica} and HTTP response
     */
    this.operationReplicaDeleteaccessrightsIdentityWithHttpInfo = function(replicaId, identity) {
      var postBody = null;

      // verify the required parameter 'replicaId' is set
      if (replicaId === undefined || replicaId === null) {
        throw new Error("Missing the required parameter 'replicaId' when calling operationReplicaDeleteaccessrightsIdentity");
      }

      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling operationReplicaDeleteaccessrightsIdentity");
      }


      var pathParams = {
        'replicaId': replicaId,
        'identity': identity
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Replica;

      return this.apiClient.callApi(
        '/replica/{replicaId}/accessrights/{identity}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /accessrights/:identity
     * @param {String} replicaId ID of replica
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Replica}
     */
    this.operationReplicaDeleteaccessrightsIdentity = function(replicaId, identity) {
      return this.operationReplicaDeleteaccessrightsIdentityWithHttpInfo(replicaId, identity)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag/:key
     * @param {String} replicaId ID of replica
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    this.operationReplicaDeletetagKeyWithHttpInfo = function(replicaId, key) {
      var postBody = null;

      // verify the required parameter 'replicaId' is set
      if (replicaId === undefined || replicaId === null) {
        throw new Error("Missing the required parameter 'replicaId' when calling operationReplicaDeletetagKey");
      }

      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling operationReplicaDeletetagKey");
      }


      var pathParams = {
        'replicaId': replicaId,
        'key': key
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = {'String': 'String'};

      return this.apiClient.callApi(
        '/replica/{replicaId}/tag/{key}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /tag/:key
     * @param {String} replicaId ID of replica
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    this.operationReplicaDeletetagKey = function(replicaId, key) {
      return this.operationReplicaDeletetagKeyWithHttpInfo(replicaId, key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services/:serviceId
     * @param {String} replicaId ID of replica
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ReplicaServices} and HTTP response
     */
    this.operationReplicaGetservicesServiceIdWithHttpInfo = function(replicaId, serviceId) {
      var postBody = null;

      // verify the required parameter 'replicaId' is set
      if (replicaId === undefined || replicaId === null) {
        throw new Error("Missing the required parameter 'replicaId' when calling operationReplicaGetservicesServiceId");
      }

      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling operationReplicaGetservicesServiceId");
      }


      var pathParams = {
        'replicaId': replicaId,
        'serviceId': serviceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ReplicaServices;

      return this.apiClient.callApi(
        '/replica/{replicaId}/services/{serviceId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /services/:serviceId
     * @param {String} replicaId ID of replica
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ReplicaServices}
     */
    this.operationReplicaGetservicesServiceId = function(replicaId, serviceId) {
      return this.operationReplicaGetservicesServiceIdWithHttpInfo(replicaId, serviceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag/
     * @param {String} replicaId ID of replica
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    this.operationReplicaGettagWithHttpInfo = function(replicaId) {
      var postBody = null;

      // verify the required parameter 'replicaId' is set
      if (replicaId === undefined || replicaId === null) {
        throw new Error("Missing the required parameter 'replicaId' when calling operationReplicaGettag");
      }


      var pathParams = {
        'replicaId': replicaId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = {'String': 'String'};

      return this.apiClient.callApi(
        '/replica/{replicaId}/tag/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /tag/
     * @param {String} replicaId ID of replica
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    this.operationReplicaGettag = function(replicaId) {
      return this.operationReplicaGettagWithHttpInfo(replicaId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights/
     * @param {String} replicaId ID of replica
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    this.operationReplicaListaccessrightsWithHttpInfo = function(replicaId) {
      var postBody = null;

      // verify the required parameter 'replicaId' is set
      if (replicaId === undefined || replicaId === null) {
        throw new Error("Missing the required parameter 'replicaId' when calling operationReplicaListaccessrights");
      }


      var pathParams = {
        'replicaId': replicaId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/replica/{replicaId}/accessrights/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /accessrights/
     * @param {String} replicaId ID of replica
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    this.operationReplicaListaccessrights = function(replicaId) {
      return this.operationReplicaListaccessrightsWithHttpInfo(replicaId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /queue/
     * @param {String} replicaId ID of replica
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Event>} and HTTP response
     */
    this.operationReplicaListqueueWithHttpInfo = function(replicaId) {
      var postBody = null;

      // verify the required parameter 'replicaId' is set
      if (replicaId === undefined || replicaId === null) {
        throw new Error("Missing the required parameter 'replicaId' when calling operationReplicaListqueue");
      }


      var pathParams = {
        'replicaId': replicaId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Event];

      return this.apiClient.callApi(
        '/replica/{replicaId}/queue/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /queue/
     * @param {String} replicaId ID of replica
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Event>}
     */
    this.operationReplicaListqueue = function(replicaId) {
      return this.operationReplicaListqueueWithHttpInfo(replicaId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services/
     * @param {String} replicaId ID of replica
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ReplicaServices>} and HTTP response
     */
    this.operationReplicaListservicesWithHttpInfo = function(replicaId) {
      var postBody = null;

      // verify the required parameter 'replicaId' is set
      if (replicaId === undefined || replicaId === null) {
        throw new Error("Missing the required parameter 'replicaId' when calling operationReplicaListservices");
      }


      var pathParams = {
        'replicaId': replicaId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [ReplicaServices];

      return this.apiClient.callApi(
        '/replica/{replicaId}/services/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /services/
     * @param {String} replicaId ID of replica
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ReplicaServices>}
     */
    this.operationReplicaListservices = function(replicaId) {
      return this.operationReplicaListservicesWithHttpInfo(replicaId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag/
     * @param {String} replicaId ID of replica
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    this.operationReplicaPatchtagWithHttpInfo = function(replicaId, requestBody) {
      var postBody = requestBody;

      // verify the required parameter 'replicaId' is set
      if (replicaId === undefined || replicaId === null) {
        throw new Error("Missing the required parameter 'replicaId' when calling operationReplicaPatchtag");
      }

      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling operationReplicaPatchtag");
      }


      var pathParams = {
        'replicaId': replicaId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = {'String': 'String'};

      return this.apiClient.callApi(
        '/replica/{replicaId}/tag/', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /tag/
     * @param {String} replicaId ID of replica
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    this.operationReplicaPatchtag = function(replicaId, requestBody) {
      return this.operationReplicaPatchtagWithHttpInfo(replicaId, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights/
     * @param {String} replicaId ID of replica
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject76} opts.inlineObject76 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    this.operationReplicaPostaccessrightsWithHttpInfo = function(replicaId, opts) {
      opts = opts || {};
      var postBody = opts['inlineObject76'];

      // verify the required parameter 'replicaId' is set
      if (replicaId === undefined || replicaId === null) {
        throw new Error("Missing the required parameter 'replicaId' when calling operationReplicaPostaccessrights");
      }


      var pathParams = {
        'replicaId': replicaId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/replica/{replicaId}/accessrights/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /accessrights/
     * @param {String} replicaId ID of replica
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject76} opts.inlineObject76 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    this.operationReplicaPostaccessrights = function(replicaId, opts) {
      return this.operationReplicaPostaccessrightsWithHttpInfo(replicaId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get
     * Returns a single replica
     * @param {String} replicaId ID of replica
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Replica} and HTTP response
     */
    this.showReplicaWithHttpInfo = function(replicaId) {
      var postBody = null;

      // verify the required parameter 'replicaId' is set
      if (replicaId === undefined || replicaId === null) {
        throw new Error("Missing the required parameter 'replicaId' when calling showReplica");
      }


      var pathParams = {
        'replicaId': replicaId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Replica;

      return this.apiClient.callApi(
        '/replica/{replicaId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get
     * Returns a single replica
     * @param {String} replicaId ID of replica
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Replica}
     */
    this.showReplica = function(replicaId) {
      return this.showReplicaWithHttpInfo(replicaId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
