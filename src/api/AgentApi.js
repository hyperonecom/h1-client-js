/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Agent', 'model/AgentCreate', 'model/AgentPatchCredentialcertificateId', 'model/AgentPostAccessrights', 'model/AgentPostCredentialcertificate', 'model/AgentResource', 'model/AgentResourceEvent', 'model/AgentServices', 'model/AgentUpdate', 'model/CredentialCertificate', 'model/Event', 'model/InlineResponse400'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Agent'), require('../model/AgentCreate'), require('../model/AgentPatchCredentialcertificateId'), require('../model/AgentPostAccessrights'), require('../model/AgentPostCredentialcertificate'), require('../model/AgentResource'), require('../model/AgentResourceEvent'), require('../model/AgentServices'), require('../model/AgentUpdate'), require('../model/CredentialCertificate'), require('../model/Event'), require('../model/InlineResponse400'));
  } else {
    // Browser globals (root is window)
    if (!root.HyperOneApi) {
      root.HyperOneApi = {};
    }
    root.HyperOneApi.AgentApi = factory(root.HyperOneApi.ApiClient, root.HyperOneApi.Agent, root.HyperOneApi.AgentCreate, root.HyperOneApi.AgentPatchCredentialcertificateId, root.HyperOneApi.AgentPostAccessrights, root.HyperOneApi.AgentPostCredentialcertificate, root.HyperOneApi.AgentResource, root.HyperOneApi.AgentResourceEvent, root.HyperOneApi.AgentServices, root.HyperOneApi.AgentUpdate, root.HyperOneApi.CredentialCertificate, root.HyperOneApi.Event, root.HyperOneApi.InlineResponse400);
  }
}(this, function(ApiClient, Agent, AgentCreate, AgentPatchCredentialcertificateId, AgentPostAccessrights, AgentPostCredentialcertificate, AgentResource, AgentResourceEvent, AgentServices, AgentUpdate, CredentialCertificate, Event, InlineResponse400) {
  'use strict';

  /**
   * Agent service.
   * @module api/AgentApi
   * @version 0.0.2
   */

  /**
   * Constructs a new AgentApi. 
   * @alias module:api/AgentApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * /actions/start
     * Action start
     * @param {String} agentId ID of agent
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Agent} and HTTP response
     */
    this.agentActionStartWithHttpInfo = function(agentId) {
      var postBody = null;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentActionStart");
      }

      var pathParams = {
        'agentId': agentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Agent;
      return this.apiClient.callApi(
        '/agent/{agentId}/actions/start', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /actions/start
     * Action start
     * @param {String} agentId ID of agent
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Agent}
     */
    this.agentActionStart = function(agentId) {
      return this.agentActionStartWithHttpInfo(agentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/suspend
     * Action suspend
     * @param {String} agentId ID of agent
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Agent} and HTTP response
     */
    this.agentActionSuspendWithHttpInfo = function(agentId) {
      var postBody = null;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentActionSuspend");
      }

      var pathParams = {
        'agentId': agentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Agent;
      return this.apiClient.callApi(
        '/agent/{agentId}/actions/suspend', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /actions/suspend
     * Action suspend
     * @param {String} agentId ID of agent
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Agent}
     */
    this.agentActionSuspend = function(agentId) {
      return this.agentActionSuspendWithHttpInfo(agentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create
     * Create agent
     * @param {module:model/AgentCreate} agentCreate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Agent} and HTTP response
     */
    this.agentCreateWithHttpInfo = function(agentCreate) {
      var postBody = agentCreate;
      // verify the required parameter 'agentCreate' is set
      if (agentCreate === undefined || agentCreate === null) {
        throw new Error("Missing the required parameter 'agentCreate' when calling agentCreate");
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Agent;
      return this.apiClient.callApi(
        '/agent', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create
     * Create agent
     * @param {module:model/AgentCreate} agentCreate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Agent}
     */
    this.agentCreate = function(agentCreate) {
      return this.agentCreateWithHttpInfo(agentCreate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete
     * @param {String} agentId ID of agent
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.agentDeleteWithHttpInfo = function(agentId) {
      var postBody = null;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentDelete");
      }

      var pathParams = {
        'agentId': agentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;
      return this.apiClient.callApi(
        '/agent/{agentId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete
     * @param {String} agentId ID of agent
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.agentDelete = function(agentId) {
      return this.agentDeleteWithHttpInfo(agentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights/:identity
     * @param {String} agentId ID of agent
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Agent} and HTTP response
     */
    this.agentDeleteAccessrightsIdentityWithHttpInfo = function(agentId, identity) {
      var postBody = null;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentDeleteAccessrightsIdentity");
      }
      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling agentDeleteAccessrightsIdentity");
      }

      var pathParams = {
        'agentId': agentId,
        'identity': identity
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Agent;
      return this.apiClient.callApi(
        '/agent/{agentId}/accessrights/{identity}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights/:identity
     * @param {String} agentId ID of agent
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Agent}
     */
    this.agentDeleteAccessrightsIdentity = function(agentId, identity) {
      return this.agentDeleteAccessrightsIdentityWithHttpInfo(agentId, identity)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/certificate/:id
     * @param {String} agentId ID of agent
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CredentialCertificate} and HTTP response
     */
    this.agentDeleteCredentialcertificateIdWithHttpInfo = function(agentId, id) {
      var postBody = null;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentDeleteCredentialcertificateId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling agentDeleteCredentialcertificateId");
      }

      var pathParams = {
        'agentId': agentId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CredentialCertificate;
      return this.apiClient.callApi(
        '/agent/{agentId}/credential/certificate/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/certificate/:id
     * @param {String} agentId ID of agent
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CredentialCertificate}
     */
    this.agentDeleteCredentialcertificateId = function(agentId, id) {
      return this.agentDeleteCredentialcertificateIdWithHttpInfo(agentId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag/:key
     * @param {String} agentId ID of agent
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    this.agentDeleteTagKeyWithHttpInfo = function(agentId, key) {
      var postBody = null;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentDeleteTagKey");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling agentDeleteTagKey");
      }

      var pathParams = {
        'agentId': agentId,
        'key': key
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi(
        '/agent/{agentId}/tag/{key}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag/:key
     * @param {String} agentId ID of agent
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    this.agentDeleteTagKey = function(agentId, key) {
      return this.agentDeleteTagKeyWithHttpInfo(agentId, key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/certificate/:id
     * @param {String} agentId ID of agent
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CredentialCertificate} and HTTP response
     */
    this.agentGetCredentialcertificateIdWithHttpInfo = function(agentId, id) {
      var postBody = null;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentGetCredentialcertificateId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling agentGetCredentialcertificateId");
      }

      var pathParams = {
        'agentId': agentId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CredentialCertificate;
      return this.apiClient.callApi(
        '/agent/{agentId}/credential/certificate/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/certificate/:id
     * @param {String} agentId ID of agent
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CredentialCertificate}
     */
    this.agentGetCredentialcertificateId = function(agentId, id) {
      return this.agentGetCredentialcertificateIdWithHttpInfo(agentId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /inspect
     * @param {String} agentId ID of agent
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    this.agentGetInspectWithHttpInfo = function(agentId) {
      var postBody = null;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentGetInspect");
      }

      var pathParams = {
        'agentId': agentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi(
        '/agent/{agentId}/inspect', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /inspect
     * @param {String} agentId ID of agent
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    this.agentGetInspect = function(agentId) {
      return this.agentGetInspectWithHttpInfo(agentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /resource/:resourceId/inspect
     * @param {String} agentId ID of agent
     * @param {String} resourceId resourceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    this.agentGetResourceResourceIdinspectWithHttpInfo = function(agentId, resourceId) {
      var postBody = null;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentGetResourceResourceIdinspect");
      }
      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling agentGetResourceResourceIdinspect");
      }

      var pathParams = {
        'agentId': agentId,
        'resourceId': resourceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi(
        '/agent/{agentId}/resource/{resourceId}/inspect', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /resource/:resourceId/inspect
     * @param {String} agentId ID of agent
     * @param {String} resourceId resourceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    this.agentGetResourceResourceIdinspect = function(agentId, resourceId) {
      return this.agentGetResourceResourceIdinspectWithHttpInfo(agentId, resourceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services/:serviceId
     * @param {String} agentId ID of agent
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AgentServices} and HTTP response
     */
    this.agentGetServicesServiceIdWithHttpInfo = function(agentId, serviceId) {
      var postBody = null;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentGetServicesServiceId");
      }
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling agentGetServicesServiceId");
      }

      var pathParams = {
        'agentId': agentId,
        'serviceId': serviceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AgentServices;
      return this.apiClient.callApi(
        '/agent/{agentId}/services/{serviceId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /services/:serviceId
     * @param {String} agentId ID of agent
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AgentServices}
     */
    this.agentGetServicesServiceId = function(agentId, serviceId) {
      return this.agentGetServicesServiceIdWithHttpInfo(agentId, serviceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} agentId ID of agent
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    this.agentGetTagWithHttpInfo = function(agentId) {
      var postBody = null;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentGetTag");
      }

      var pathParams = {
        'agentId': agentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi(
        '/agent/{agentId}/tag', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} agentId ID of agent
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    this.agentGetTag = function(agentId) {
      return this.agentGetTagWithHttpInfo(agentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List
     * List agent
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @param {Object.<String, {String: String}>} opts.tag Filter by tag
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Agent>} and HTTP response
     */
    this.agentListWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
        'name': opts['name'],
        'tag': opts['tag'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Agent];
      return this.apiClient.callApi(
        '/agent', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List
     * List agent
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @param {Object.<String, {String: String}>} opts.tag Filter by tag
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Agent>}
     */
    this.agentList = function(opts) {
      return this.agentListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} agentId ID of agent
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    this.agentListAccessrightsWithHttpInfo = function(agentId) {
      var postBody = null;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentListAccessrights");
      }

      var pathParams = {
        'agentId': agentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['String'];
      return this.apiClient.callApi(
        '/agent/{agentId}/accessrights', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights
     * @param {String} agentId ID of agent
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    this.agentListAccessrights = function(agentId) {
      return this.agentListAccessrightsWithHttpInfo(agentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/certificate
     * @param {String} agentId ID of agent
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/CredentialCertificate>} and HTTP response
     */
    this.agentListCredentialcertificateWithHttpInfo = function(agentId) {
      var postBody = null;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentListCredentialcertificate");
      }

      var pathParams = {
        'agentId': agentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [CredentialCertificate];
      return this.apiClient.callApi(
        '/agent/{agentId}/credential/certificate', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/certificate
     * @param {String} agentId ID of agent
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/CredentialCertificate>}
     */
    this.agentListCredentialcertificate = function(agentId) {
      return this.agentListCredentialcertificateWithHttpInfo(agentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /enabledServices
     * @param {String} agentId ID of agent
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    this.agentListEnabledServicesWithHttpInfo = function(agentId) {
      var postBody = null;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentListEnabledServices");
      }

      var pathParams = {
        'agentId': agentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['String'];
      return this.apiClient.callApi(
        '/agent/{agentId}/enabledServices', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /enabledServices
     * @param {String} agentId ID of agent
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    this.agentListEnabledServices = function(agentId) {
      return this.agentListEnabledServicesWithHttpInfo(agentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /queue
     * @param {String} agentId ID of agent
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Event>} and HTTP response
     */
    this.agentListQueueWithHttpInfo = function(agentId) {
      var postBody = null;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentListQueue");
      }

      var pathParams = {
        'agentId': agentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Event];
      return this.apiClient.callApi(
        '/agent/{agentId}/queue', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /queue
     * @param {String} agentId ID of agent
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Event>}
     */
    this.agentListQueue = function(agentId) {
      return this.agentListQueueWithHttpInfo(agentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /resource
     * @param {String} agentId ID of agent
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/AgentResource>} and HTTP response
     */
    this.agentListResourceWithHttpInfo = function(agentId) {
      var postBody = null;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentListResource");
      }

      var pathParams = {
        'agentId': agentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [AgentResource];
      return this.apiClient.callApi(
        '/agent/{agentId}/resource', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /resource
     * @param {String} agentId ID of agent
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/AgentResource>}
     */
    this.agentListResource = function(agentId) {
      return this.agentListResourceWithHttpInfo(agentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /resource/:resourceId/queue
     * @param {String} agentId ID of agent
     * @param {String} resourceId resourceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/AgentResourceEvent>} and HTTP response
     */
    this.agentListResourceResourceIdqueueWithHttpInfo = function(agentId, resourceId) {
      var postBody = null;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentListResourceResourceIdqueue");
      }
      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling agentListResourceResourceIdqueue");
      }

      var pathParams = {
        'agentId': agentId,
        'resourceId': resourceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [AgentResourceEvent];
      return this.apiClient.callApi(
        '/agent/{agentId}/resource/{resourceId}/queue', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /resource/:resourceId/queue
     * @param {String} agentId ID of agent
     * @param {String} resourceId resourceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/AgentResourceEvent>}
     */
    this.agentListResourceResourceIdqueue = function(agentId, resourceId) {
      return this.agentListResourceResourceIdqueueWithHttpInfo(agentId, resourceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services
     * @param {String} agentId ID of agent
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/AgentServices>} and HTTP response
     */
    this.agentListServicesWithHttpInfo = function(agentId) {
      var postBody = null;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentListServices");
      }

      var pathParams = {
        'agentId': agentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [AgentServices];
      return this.apiClient.callApi(
        '/agent/{agentId}/services', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /services
     * @param {String} agentId ID of agent
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/AgentServices>}
     */
    this.agentListServices = function(agentId) {
      return this.agentListServicesWithHttpInfo(agentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/certificate/:id
     * @param {String} agentId ID of agent
     * @param {String} id id
     * @param {module:model/AgentPatchCredentialcertificateId} agentPatchCredentialcertificateId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CredentialCertificate} and HTTP response
     */
    this.agentPatchCredentialcertificateIdWithHttpInfo = function(agentId, id, agentPatchCredentialcertificateId) {
      var postBody = agentPatchCredentialcertificateId;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentPatchCredentialcertificateId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling agentPatchCredentialcertificateId");
      }
      // verify the required parameter 'agentPatchCredentialcertificateId' is set
      if (agentPatchCredentialcertificateId === undefined || agentPatchCredentialcertificateId === null) {
        throw new Error("Missing the required parameter 'agentPatchCredentialcertificateId' when calling agentPatchCredentialcertificateId");
      }

      var pathParams = {
        'agentId': agentId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CredentialCertificate;
      return this.apiClient.callApi(
        '/agent/{agentId}/credential/certificate/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/certificate/:id
     * @param {String} agentId ID of agent
     * @param {String} id id
     * @param {module:model/AgentPatchCredentialcertificateId} agentPatchCredentialcertificateId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CredentialCertificate}
     */
    this.agentPatchCredentialcertificateId = function(agentId, id, agentPatchCredentialcertificateId) {
      return this.agentPatchCredentialcertificateIdWithHttpInfo(agentId, id, agentPatchCredentialcertificateId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} agentId ID of agent
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    this.agentPatchTagWithHttpInfo = function(agentId, requestBody) {
      var postBody = requestBody;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentPatchTag");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling agentPatchTag");
      }

      var pathParams = {
        'agentId': agentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi(
        '/agent/{agentId}/tag', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} agentId ID of agent
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    this.agentPatchTag = function(agentId, requestBody) {
      return this.agentPatchTagWithHttpInfo(agentId, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} agentId ID of agent
     * @param {module:model/AgentPostAccessrights} agentPostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Agent} and HTTP response
     */
    this.agentPostAccessrightsWithHttpInfo = function(agentId, agentPostAccessrights) {
      var postBody = agentPostAccessrights;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentPostAccessrights");
      }
      // verify the required parameter 'agentPostAccessrights' is set
      if (agentPostAccessrights === undefined || agentPostAccessrights === null) {
        throw new Error("Missing the required parameter 'agentPostAccessrights' when calling agentPostAccessrights");
      }

      var pathParams = {
        'agentId': agentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Agent;
      return this.apiClient.callApi(
        '/agent/{agentId}/accessrights', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights
     * @param {String} agentId ID of agent
     * @param {module:model/AgentPostAccessrights} agentPostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Agent}
     */
    this.agentPostAccessrights = function(agentId, agentPostAccessrights) {
      return this.agentPostAccessrightsWithHttpInfo(agentId, agentPostAccessrights)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/certificate
     * @param {String} agentId ID of agent
     * @param {module:model/AgentPostCredentialcertificate} agentPostCredentialcertificate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CredentialCertificate} and HTTP response
     */
    this.agentPostCredentialcertificateWithHttpInfo = function(agentId, agentPostCredentialcertificate) {
      var postBody = agentPostCredentialcertificate;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentPostCredentialcertificate");
      }
      // verify the required parameter 'agentPostCredentialcertificate' is set
      if (agentPostCredentialcertificate === undefined || agentPostCredentialcertificate === null) {
        throw new Error("Missing the required parameter 'agentPostCredentialcertificate' when calling agentPostCredentialcertificate");
      }

      var pathParams = {
        'agentId': agentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CredentialCertificate;
      return this.apiClient.callApi(
        '/agent/{agentId}/credential/certificate', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/certificate
     * @param {String} agentId ID of agent
     * @param {module:model/AgentPostCredentialcertificate} agentPostCredentialcertificate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CredentialCertificate}
     */
    this.agentPostCredentialcertificate = function(agentId, agentPostCredentialcertificate) {
      return this.agentPostCredentialcertificateWithHttpInfo(agentId, agentPostCredentialcertificate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /resource/:resourceId/actions/recreate
     * @param {String} agentId ID of agent
     * @param {String} resourceId resourceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AgentResource} and HTTP response
     */
    this.agentPostResourceResourceIdactionsrecreateWithHttpInfo = function(agentId, resourceId) {
      var postBody = null;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentPostResourceResourceIdactionsrecreate");
      }
      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling agentPostResourceResourceIdactionsrecreate");
      }

      var pathParams = {
        'agentId': agentId,
        'resourceId': resourceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AgentResource;
      return this.apiClient.callApi(
        '/agent/{agentId}/resource/{resourceId}/actions/recreate', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /resource/:resourceId/actions/recreate
     * @param {String} agentId ID of agent
     * @param {String} resourceId resourceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AgentResource}
     */
    this.agentPostResourceResourceIdactionsrecreate = function(agentId, resourceId) {
      return this.agentPostResourceResourceIdactionsrecreateWithHttpInfo(agentId, resourceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /enabledServices
     * @param {String} agentId ID of agent
     * @param {Array.<String>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    this.agentPutEnabledServicesWithHttpInfo = function(agentId, requestBody) {
      var postBody = requestBody;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentPutEnabledServices");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling agentPutEnabledServices");
      }

      var pathParams = {
        'agentId': agentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ['String'];
      return this.apiClient.callApi(
        '/agent/{agentId}/enabledServices', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /enabledServices
     * @param {String} agentId ID of agent
     * @param {Array.<String>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    this.agentPutEnabledServices = function(agentId, requestBody) {
      return this.agentPutEnabledServicesWithHttpInfo(agentId, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get
     * Returns a single agent
     * @param {String} agentId ID of agent
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Agent} and HTTP response
     */
    this.agentShowWithHttpInfo = function(agentId) {
      var postBody = null;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentShow");
      }

      var pathParams = {
        'agentId': agentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Agent;
      return this.apiClient.callApi(
        '/agent/{agentId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get
     * Returns a single agent
     * @param {String} agentId ID of agent
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Agent}
     */
    this.agentShow = function(agentId) {
      return this.agentShowWithHttpInfo(agentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update
     * Returns modified agent
     * @param {String} agentId ID of agent
     * @param {module:model/AgentUpdate} agentUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Agent} and HTTP response
     */
    this.agentUpdateWithHttpInfo = function(agentId, agentUpdate) {
      var postBody = agentUpdate;
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling agentUpdate");
      }
      // verify the required parameter 'agentUpdate' is set
      if (agentUpdate === undefined || agentUpdate === null) {
        throw new Error("Missing the required parameter 'agentUpdate' when calling agentUpdate");
      }

      var pathParams = {
        'agentId': agentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Agent;
      return this.apiClient.callApi(
        '/agent/{agentId}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update
     * Returns modified agent
     * @param {String} agentId ID of agent
     * @param {module:model/AgentUpdate} agentUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Agent}
     */
    this.agentUpdate = function(agentId, agentUpdate) {
      return this.agentUpdateWithHttpInfo(agentId, agentUpdate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
