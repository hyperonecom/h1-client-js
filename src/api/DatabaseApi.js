/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.2-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CredentialPassword', 'model/Database', 'model/DatabaseCreate', 'model/DatabasePatchCredentialpasswordId', 'model/DatabasePostAccessrights', 'model/DatabasePostCredentialpassword', 'model/DatabaseServices', 'model/DatabaseUpdate', 'model/Event', 'model/InlineResponse400'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CredentialPassword'), require('../model/Database'), require('../model/DatabaseCreate'), require('../model/DatabasePatchCredentialpasswordId'), require('../model/DatabasePostAccessrights'), require('../model/DatabasePostCredentialpassword'), require('../model/DatabaseServices'), require('../model/DatabaseUpdate'), require('../model/Event'), require('../model/InlineResponse400'));
  } else {
    // Browser globals (root is window)
    if (!root.HyperOneApi) {
      root.HyperOneApi = {};
    }
    root.HyperOneApi.DatabaseApi = factory(root.HyperOneApi.ApiClient, root.HyperOneApi.CredentialPassword, root.HyperOneApi.Database, root.HyperOneApi.DatabaseCreate, root.HyperOneApi.DatabasePatchCredentialpasswordId, root.HyperOneApi.DatabasePostAccessrights, root.HyperOneApi.DatabasePostCredentialpassword, root.HyperOneApi.DatabaseServices, root.HyperOneApi.DatabaseUpdate, root.HyperOneApi.Event, root.HyperOneApi.InlineResponse400);
  }
}(this, function(ApiClient, CredentialPassword, Database, DatabaseCreate, DatabasePatchCredentialpasswordId, DatabasePostAccessrights, DatabasePostCredentialpassword, DatabaseServices, DatabaseUpdate, Event, InlineResponse400) {
  'use strict';

  /**
   * Database service.
   * @module api/DatabaseApi
   * @version 0.0.2
   */

  /**
   * Constructs a new DatabaseApi. 
   * @alias module:api/DatabaseApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * /actions/start
     * Action start
     * @param {String} databaseId ID of database
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Database} and HTTP response
     */
    this.databaseActionStartWithHttpInfo = function(databaseId) {
      var postBody = null;
      // verify the required parameter 'databaseId' is set
      if (databaseId === undefined || databaseId === null) {
        throw new Error("Missing the required parameter 'databaseId' when calling databaseActionStart");
      }

      var pathParams = {
        'databaseId': databaseId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Database;
      return this.apiClient.callApi(
        '/database/{databaseId}/actions/start', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /actions/start
     * Action start
     * @param {String} databaseId ID of database
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Database}
     */
    this.databaseActionStart = function(databaseId) {
      return this.databaseActionStartWithHttpInfo(databaseId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/stop
     * Action stop
     * @param {String} databaseId ID of database
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Database} and HTTP response
     */
    this.databaseActionStopWithHttpInfo = function(databaseId) {
      var postBody = null;
      // verify the required parameter 'databaseId' is set
      if (databaseId === undefined || databaseId === null) {
        throw new Error("Missing the required parameter 'databaseId' when calling databaseActionStop");
      }

      var pathParams = {
        'databaseId': databaseId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Database;
      return this.apiClient.callApi(
        '/database/{databaseId}/actions/stop', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /actions/stop
     * Action stop
     * @param {String} databaseId ID of database
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Database}
     */
    this.databaseActionStop = function(databaseId) {
      return this.databaseActionStopWithHttpInfo(databaseId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create
     * Create database
     * @param {module:model/DatabaseCreate} databaseCreate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Database} and HTTP response
     */
    this.databaseCreateWithHttpInfo = function(databaseCreate) {
      var postBody = databaseCreate;
      // verify the required parameter 'databaseCreate' is set
      if (databaseCreate === undefined || databaseCreate === null) {
        throw new Error("Missing the required parameter 'databaseCreate' when calling databaseCreate");
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Database;
      return this.apiClient.callApi(
        '/database', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create
     * Create database
     * @param {module:model/DatabaseCreate} databaseCreate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Database}
     */
    this.databaseCreate = function(databaseCreate) {
      return this.databaseCreateWithHttpInfo(databaseCreate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete
     * @param {String} databaseId ID of database
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.databaseDeleteWithHttpInfo = function(databaseId) {
      var postBody = null;
      // verify the required parameter 'databaseId' is set
      if (databaseId === undefined || databaseId === null) {
        throw new Error("Missing the required parameter 'databaseId' when calling databaseDelete");
      }

      var pathParams = {
        'databaseId': databaseId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;
      return this.apiClient.callApi(
        '/database/{databaseId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete
     * @param {String} databaseId ID of database
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.databaseDelete = function(databaseId) {
      return this.databaseDeleteWithHttpInfo(databaseId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights/:identity
     * @param {String} databaseId ID of database
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Database} and HTTP response
     */
    this.databaseDeleteAccessrightsIdentityWithHttpInfo = function(databaseId, identity) {
      var postBody = null;
      // verify the required parameter 'databaseId' is set
      if (databaseId === undefined || databaseId === null) {
        throw new Error("Missing the required parameter 'databaseId' when calling databaseDeleteAccessrightsIdentity");
      }
      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling databaseDeleteAccessrightsIdentity");
      }

      var pathParams = {
        'databaseId': databaseId,
        'identity': identity
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Database;
      return this.apiClient.callApi(
        '/database/{databaseId}/accessrights/{identity}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights/:identity
     * @param {String} databaseId ID of database
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Database}
     */
    this.databaseDeleteAccessrightsIdentity = function(databaseId, identity) {
      return this.databaseDeleteAccessrightsIdentityWithHttpInfo(databaseId, identity)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password/:id
     * @param {String} databaseId ID of database
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Database} and HTTP response
     */
    this.databaseDeleteCredentialpasswordIdWithHttpInfo = function(databaseId, id) {
      var postBody = null;
      // verify the required parameter 'databaseId' is set
      if (databaseId === undefined || databaseId === null) {
        throw new Error("Missing the required parameter 'databaseId' when calling databaseDeleteCredentialpasswordId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling databaseDeleteCredentialpasswordId");
      }

      var pathParams = {
        'databaseId': databaseId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Database;
      return this.apiClient.callApi(
        '/database/{databaseId}/credential/password/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/password/:id
     * @param {String} databaseId ID of database
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Database}
     */
    this.databaseDeleteCredentialpasswordId = function(databaseId, id) {
      return this.databaseDeleteCredentialpasswordIdWithHttpInfo(databaseId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag/:key
     * @param {String} databaseId ID of database
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    this.databaseDeleteTagKeyWithHttpInfo = function(databaseId, key) {
      var postBody = null;
      // verify the required parameter 'databaseId' is set
      if (databaseId === undefined || databaseId === null) {
        throw new Error("Missing the required parameter 'databaseId' when calling databaseDeleteTagKey");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling databaseDeleteTagKey");
      }

      var pathParams = {
        'databaseId': databaseId,
        'key': key
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi(
        '/database/{databaseId}/tag/{key}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag/:key
     * @param {String} databaseId ID of database
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    this.databaseDeleteTagKey = function(databaseId, key) {
      return this.databaseDeleteTagKeyWithHttpInfo(databaseId, key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password/:id
     * @param {String} databaseId ID of database
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CredentialPassword} and HTTP response
     */
    this.databaseGetCredentialpasswordIdWithHttpInfo = function(databaseId, id) {
      var postBody = null;
      // verify the required parameter 'databaseId' is set
      if (databaseId === undefined || databaseId === null) {
        throw new Error("Missing the required parameter 'databaseId' when calling databaseGetCredentialpasswordId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling databaseGetCredentialpasswordId");
      }

      var pathParams = {
        'databaseId': databaseId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CredentialPassword;
      return this.apiClient.callApi(
        '/database/{databaseId}/credential/password/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/password/:id
     * @param {String} databaseId ID of database
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CredentialPassword}
     */
    this.databaseGetCredentialpasswordId = function(databaseId, id) {
      return this.databaseGetCredentialpasswordIdWithHttpInfo(databaseId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services/:serviceId
     * @param {String} databaseId ID of database
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DatabaseServices} and HTTP response
     */
    this.databaseGetServicesServiceIdWithHttpInfo = function(databaseId, serviceId) {
      var postBody = null;
      // verify the required parameter 'databaseId' is set
      if (databaseId === undefined || databaseId === null) {
        throw new Error("Missing the required parameter 'databaseId' when calling databaseGetServicesServiceId");
      }
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling databaseGetServicesServiceId");
      }

      var pathParams = {
        'databaseId': databaseId,
        'serviceId': serviceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DatabaseServices;
      return this.apiClient.callApi(
        '/database/{databaseId}/services/{serviceId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /services/:serviceId
     * @param {String} databaseId ID of database
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DatabaseServices}
     */
    this.databaseGetServicesServiceId = function(databaseId, serviceId) {
      return this.databaseGetServicesServiceIdWithHttpInfo(databaseId, serviceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} databaseId ID of database
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    this.databaseGetTagWithHttpInfo = function(databaseId) {
      var postBody = null;
      // verify the required parameter 'databaseId' is set
      if (databaseId === undefined || databaseId === null) {
        throw new Error("Missing the required parameter 'databaseId' when calling databaseGetTag");
      }

      var pathParams = {
        'databaseId': databaseId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi(
        '/database/{databaseId}/tag', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} databaseId ID of database
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    this.databaseGetTag = function(databaseId) {
      return this.databaseGetTagWithHttpInfo(databaseId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List
     * List database
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @param {Object.<String, {String: String}>} opts.tag Filter by tag
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Database>} and HTTP response
     */
    this.databaseListWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
        'name': opts['name'],
        'tag': opts['tag'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Database];
      return this.apiClient.callApi(
        '/database', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List
     * List database
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @param {Object.<String, {String: String}>} opts.tag Filter by tag
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Database>}
     */
    this.databaseList = function(opts) {
      return this.databaseListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} databaseId ID of database
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    this.databaseListAccessrightsWithHttpInfo = function(databaseId) {
      var postBody = null;
      // verify the required parameter 'databaseId' is set
      if (databaseId === undefined || databaseId === null) {
        throw new Error("Missing the required parameter 'databaseId' when calling databaseListAccessrights");
      }

      var pathParams = {
        'databaseId': databaseId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['String'];
      return this.apiClient.callApi(
        '/database/{databaseId}/accessrights', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights
     * @param {String} databaseId ID of database
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    this.databaseListAccessrights = function(databaseId) {
      return this.databaseListAccessrightsWithHttpInfo(databaseId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password
     * @param {String} databaseId ID of database
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/CredentialPassword>} and HTTP response
     */
    this.databaseListCredentialpasswordWithHttpInfo = function(databaseId) {
      var postBody = null;
      // verify the required parameter 'databaseId' is set
      if (databaseId === undefined || databaseId === null) {
        throw new Error("Missing the required parameter 'databaseId' when calling databaseListCredentialpassword");
      }

      var pathParams = {
        'databaseId': databaseId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [CredentialPassword];
      return this.apiClient.callApi(
        '/database/{databaseId}/credential/password', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/password
     * @param {String} databaseId ID of database
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/CredentialPassword>}
     */
    this.databaseListCredentialpassword = function(databaseId) {
      return this.databaseListCredentialpasswordWithHttpInfo(databaseId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /queue
     * @param {String} databaseId ID of database
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Event>} and HTTP response
     */
    this.databaseListQueueWithHttpInfo = function(databaseId) {
      var postBody = null;
      // verify the required parameter 'databaseId' is set
      if (databaseId === undefined || databaseId === null) {
        throw new Error("Missing the required parameter 'databaseId' when calling databaseListQueue");
      }

      var pathParams = {
        'databaseId': databaseId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Event];
      return this.apiClient.callApi(
        '/database/{databaseId}/queue', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /queue
     * @param {String} databaseId ID of database
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Event>}
     */
    this.databaseListQueue = function(databaseId) {
      return this.databaseListQueueWithHttpInfo(databaseId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services
     * @param {String} databaseId ID of database
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/DatabaseServices>} and HTTP response
     */
    this.databaseListServicesWithHttpInfo = function(databaseId) {
      var postBody = null;
      // verify the required parameter 'databaseId' is set
      if (databaseId === undefined || databaseId === null) {
        throw new Error("Missing the required parameter 'databaseId' when calling databaseListServices");
      }

      var pathParams = {
        'databaseId': databaseId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [DatabaseServices];
      return this.apiClient.callApi(
        '/database/{databaseId}/services', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /services
     * @param {String} databaseId ID of database
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/DatabaseServices>}
     */
    this.databaseListServices = function(databaseId) {
      return this.databaseListServicesWithHttpInfo(databaseId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password/:id
     * @param {String} databaseId ID of database
     * @param {String} id id
     * @param {module:model/DatabasePatchCredentialpasswordId} databasePatchCredentialpasswordId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CredentialPassword} and HTTP response
     */
    this.databasePatchCredentialpasswordIdWithHttpInfo = function(databaseId, id, databasePatchCredentialpasswordId) {
      var postBody = databasePatchCredentialpasswordId;
      // verify the required parameter 'databaseId' is set
      if (databaseId === undefined || databaseId === null) {
        throw new Error("Missing the required parameter 'databaseId' when calling databasePatchCredentialpasswordId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling databasePatchCredentialpasswordId");
      }
      // verify the required parameter 'databasePatchCredentialpasswordId' is set
      if (databasePatchCredentialpasswordId === undefined || databasePatchCredentialpasswordId === null) {
        throw new Error("Missing the required parameter 'databasePatchCredentialpasswordId' when calling databasePatchCredentialpasswordId");
      }

      var pathParams = {
        'databaseId': databaseId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CredentialPassword;
      return this.apiClient.callApi(
        '/database/{databaseId}/credential/password/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/password/:id
     * @param {String} databaseId ID of database
     * @param {String} id id
     * @param {module:model/DatabasePatchCredentialpasswordId} databasePatchCredentialpasswordId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CredentialPassword}
     */
    this.databasePatchCredentialpasswordId = function(databaseId, id, databasePatchCredentialpasswordId) {
      return this.databasePatchCredentialpasswordIdWithHttpInfo(databaseId, id, databasePatchCredentialpasswordId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} databaseId ID of database
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    this.databasePatchTagWithHttpInfo = function(databaseId, requestBody) {
      var postBody = requestBody;
      // verify the required parameter 'databaseId' is set
      if (databaseId === undefined || databaseId === null) {
        throw new Error("Missing the required parameter 'databaseId' when calling databasePatchTag");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling databasePatchTag");
      }

      var pathParams = {
        'databaseId': databaseId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi(
        '/database/{databaseId}/tag', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} databaseId ID of database
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    this.databasePatchTag = function(databaseId, requestBody) {
      return this.databasePatchTagWithHttpInfo(databaseId, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} databaseId ID of database
     * @param {module:model/DatabasePostAccessrights} databasePostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Database} and HTTP response
     */
    this.databasePostAccessrightsWithHttpInfo = function(databaseId, databasePostAccessrights) {
      var postBody = databasePostAccessrights;
      // verify the required parameter 'databaseId' is set
      if (databaseId === undefined || databaseId === null) {
        throw new Error("Missing the required parameter 'databaseId' when calling databasePostAccessrights");
      }
      // verify the required parameter 'databasePostAccessrights' is set
      if (databasePostAccessrights === undefined || databasePostAccessrights === null) {
        throw new Error("Missing the required parameter 'databasePostAccessrights' when calling databasePostAccessrights");
      }

      var pathParams = {
        'databaseId': databaseId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Database;
      return this.apiClient.callApi(
        '/database/{databaseId}/accessrights', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights
     * @param {String} databaseId ID of database
     * @param {module:model/DatabasePostAccessrights} databasePostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Database}
     */
    this.databasePostAccessrights = function(databaseId, databasePostAccessrights) {
      return this.databasePostAccessrightsWithHttpInfo(databaseId, databasePostAccessrights)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password
     * @param {String} databaseId ID of database
     * @param {module:model/DatabasePostCredentialpassword} databasePostCredentialpassword 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CredentialPassword} and HTTP response
     */
    this.databasePostCredentialpasswordWithHttpInfo = function(databaseId, databasePostCredentialpassword) {
      var postBody = databasePostCredentialpassword;
      // verify the required parameter 'databaseId' is set
      if (databaseId === undefined || databaseId === null) {
        throw new Error("Missing the required parameter 'databaseId' when calling databasePostCredentialpassword");
      }
      // verify the required parameter 'databasePostCredentialpassword' is set
      if (databasePostCredentialpassword === undefined || databasePostCredentialpassword === null) {
        throw new Error("Missing the required parameter 'databasePostCredentialpassword' when calling databasePostCredentialpassword");
      }

      var pathParams = {
        'databaseId': databaseId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CredentialPassword;
      return this.apiClient.callApi(
        '/database/{databaseId}/credential/password', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/password
     * @param {String} databaseId ID of database
     * @param {module:model/DatabasePostCredentialpassword} databasePostCredentialpassword 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CredentialPassword}
     */
    this.databasePostCredentialpassword = function(databaseId, databasePostCredentialpassword) {
      return this.databasePostCredentialpasswordWithHttpInfo(databaseId, databasePostCredentialpassword)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get
     * Returns a single database
     * @param {String} databaseId ID of database
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Database} and HTTP response
     */
    this.databaseShowWithHttpInfo = function(databaseId) {
      var postBody = null;
      // verify the required parameter 'databaseId' is set
      if (databaseId === undefined || databaseId === null) {
        throw new Error("Missing the required parameter 'databaseId' when calling databaseShow");
      }

      var pathParams = {
        'databaseId': databaseId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Database;
      return this.apiClient.callApi(
        '/database/{databaseId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get
     * Returns a single database
     * @param {String} databaseId ID of database
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Database}
     */
    this.databaseShow = function(databaseId) {
      return this.databaseShowWithHttpInfo(databaseId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update
     * Returns modified database
     * @param {String} databaseId ID of database
     * @param {module:model/DatabaseUpdate} databaseUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Database} and HTTP response
     */
    this.databaseUpdateWithHttpInfo = function(databaseId, databaseUpdate) {
      var postBody = databaseUpdate;
      // verify the required parameter 'databaseId' is set
      if (databaseId === undefined || databaseId === null) {
        throw new Error("Missing the required parameter 'databaseId' when calling databaseUpdate");
      }
      // verify the required parameter 'databaseUpdate' is set
      if (databaseUpdate === undefined || databaseUpdate === null) {
        throw new Error("Missing the required parameter 'databaseUpdate' when calling databaseUpdate");
      }

      var pathParams = {
        'databaseId': databaseId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Database;
      return this.apiClient.callApi(
        '/database/{databaseId}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update
     * Returns modified database
     * @param {String} databaseId ID of database
     * @param {module:model/DatabaseUpdate} databaseUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Database}
     */
    this.databaseUpdate = function(databaseId, databaseUpdate) {
      return this.databaseUpdateWithHttpInfo(databaseId, databaseUpdate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
