/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CredentialCertificate', 'model/CredentialPassword', 'model/Event', 'model/LogArchive', 'model/LogArchiveActionTransfer', 'model/LogArchiveCreate', 'model/LogArchivePatchCredentialcertificateId', 'model/LogArchivePatchCredentialpasswordId', 'model/LogArchivePostAccessrights', 'model/LogArchivePostCredentialcertificate', 'model/LogArchivePostCredentialpassword', 'model/LogArchiveServices', 'model/LogArchiveUpdate'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CredentialCertificate'), require('../model/CredentialPassword'), require('../model/Event'), require('../model/LogArchive'), require('../model/LogArchiveActionTransfer'), require('../model/LogArchiveCreate'), require('../model/LogArchivePatchCredentialcertificateId'), require('../model/LogArchivePatchCredentialpasswordId'), require('../model/LogArchivePostAccessrights'), require('../model/LogArchivePostCredentialcertificate'), require('../model/LogArchivePostCredentialpassword'), require('../model/LogArchiveServices'), require('../model/LogArchiveUpdate'));
  } else {
    // Browser globals (root is window)
    if (!root.HyperOneApi) {
      root.HyperOneApi = {};
    }
    root.HyperOneApi.LogArchiveApi = factory(root.HyperOneApi.ApiClient, root.HyperOneApi.CredentialCertificate, root.HyperOneApi.CredentialPassword, root.HyperOneApi.Event, root.HyperOneApi.LogArchive, root.HyperOneApi.LogArchiveActionTransfer, root.HyperOneApi.LogArchiveCreate, root.HyperOneApi.LogArchivePatchCredentialcertificateId, root.HyperOneApi.LogArchivePatchCredentialpasswordId, root.HyperOneApi.LogArchivePostAccessrights, root.HyperOneApi.LogArchivePostCredentialcertificate, root.HyperOneApi.LogArchivePostCredentialpassword, root.HyperOneApi.LogArchiveServices, root.HyperOneApi.LogArchiveUpdate);
  }
}(this, function(ApiClient, CredentialCertificate, CredentialPassword, Event, LogArchive, LogArchiveActionTransfer, LogArchiveCreate, LogArchivePatchCredentialcertificateId, LogArchivePatchCredentialpasswordId, LogArchivePostAccessrights, LogArchivePostCredentialcertificate, LogArchivePostCredentialpassword, LogArchiveServices, LogArchiveUpdate) {
  'use strict';

  /**
   * LogArchive service.
   * @module api/LogArchiveApi
   * @version 1.0.0
   */

  /**
   * Constructs a new LogArchiveApi. 
   * @alias module:api/LogArchiveApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * /actions/transfer
     * Action transfer
     * @param {String} logArchiveId ID of logArchive
     * @param {module:model/LogArchiveActionTransfer} logArchiveActionTransfer 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LogArchive} and HTTP response
     */
    this.logArchiveActionTransferWithHttpInfo = function(logArchiveId, logArchiveActionTransfer) {
      var postBody = logArchiveActionTransfer;

      // verify the required parameter 'logArchiveId' is set
      if (logArchiveId === undefined || logArchiveId === null) {
        throw new Error("Missing the required parameter 'logArchiveId' when calling logArchiveActionTransfer");
      }

      // verify the required parameter 'logArchiveActionTransfer' is set
      if (logArchiveActionTransfer === undefined || logArchiveActionTransfer === null) {
        throw new Error("Missing the required parameter 'logArchiveActionTransfer' when calling logArchiveActionTransfer");
      }


      var pathParams = {
        'logArchiveId': logArchiveId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LogArchive;

      return this.apiClient.callApi(
        '/logArchive/{logArchiveId}/actions/transfer', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /actions/transfer
     * Action transfer
     * @param {String} logArchiveId ID of logArchive
     * @param {module:model/LogArchiveActionTransfer} logArchiveActionTransfer 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LogArchive}
     */
    this.logArchiveActionTransfer = function(logArchiveId, logArchiveActionTransfer) {
      return this.logArchiveActionTransferWithHttpInfo(logArchiveId, logArchiveActionTransfer)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create
     * Create logArchive
     * @param {module:model/LogArchiveCreate} logArchiveCreate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LogArchive} and HTTP response
     */
    this.logArchiveCreateWithHttpInfo = function(logArchiveCreate) {
      var postBody = logArchiveCreate;

      // verify the required parameter 'logArchiveCreate' is set
      if (logArchiveCreate === undefined || logArchiveCreate === null) {
        throw new Error("Missing the required parameter 'logArchiveCreate' when calling logArchiveCreate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LogArchive;

      return this.apiClient.callApi(
        '/logArchive', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create
     * Create logArchive
     * @param {module:model/LogArchiveCreate} logArchiveCreate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LogArchive}
     */
    this.logArchiveCreate = function(logArchiveCreate) {
      return this.logArchiveCreateWithHttpInfo(logArchiveCreate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete
     * @param {String} logArchiveId ID of logArchive
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.logArchiveDeleteWithHttpInfo = function(logArchiveId) {
      var postBody = null;

      // verify the required parameter 'logArchiveId' is set
      if (logArchiveId === undefined || logArchiveId === null) {
        throw new Error("Missing the required parameter 'logArchiveId' when calling logArchiveDelete");
      }


      var pathParams = {
        'logArchiveId': logArchiveId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/logArchive/{logArchiveId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete
     * @param {String} logArchiveId ID of logArchive
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.logArchiveDelete = function(logArchiveId) {
      return this.logArchiveDeleteWithHttpInfo(logArchiveId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights/:identity
     * @param {String} logArchiveId ID of logArchive
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LogArchive} and HTTP response
     */
    this.logArchiveDeleteAccessrightsIdentityWithHttpInfo = function(logArchiveId, identity) {
      var postBody = null;

      // verify the required parameter 'logArchiveId' is set
      if (logArchiveId === undefined || logArchiveId === null) {
        throw new Error("Missing the required parameter 'logArchiveId' when calling logArchiveDeleteAccessrightsIdentity");
      }

      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling logArchiveDeleteAccessrightsIdentity");
      }


      var pathParams = {
        'logArchiveId': logArchiveId,
        'identity': identity
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = LogArchive;

      return this.apiClient.callApi(
        '/logArchive/{logArchiveId}/accessrights/{identity}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /accessrights/:identity
     * @param {String} logArchiveId ID of logArchive
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LogArchive}
     */
    this.logArchiveDeleteAccessrightsIdentity = function(logArchiveId, identity) {
      return this.logArchiveDeleteAccessrightsIdentityWithHttpInfo(logArchiveId, identity)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/certificate/:id
     * @param {String} logArchiveId ID of logArchive
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LogArchive} and HTTP response
     */
    this.logArchiveDeleteCredentialcertificateIdWithHttpInfo = function(logArchiveId, id) {
      var postBody = null;

      // verify the required parameter 'logArchiveId' is set
      if (logArchiveId === undefined || logArchiveId === null) {
        throw new Error("Missing the required parameter 'logArchiveId' when calling logArchiveDeleteCredentialcertificateId");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling logArchiveDeleteCredentialcertificateId");
      }


      var pathParams = {
        'logArchiveId': logArchiveId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = LogArchive;

      return this.apiClient.callApi(
        '/logArchive/{logArchiveId}/credential/certificate/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /credential/certificate/:id
     * @param {String} logArchiveId ID of logArchive
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LogArchive}
     */
    this.logArchiveDeleteCredentialcertificateId = function(logArchiveId, id) {
      return this.logArchiveDeleteCredentialcertificateIdWithHttpInfo(logArchiveId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password/:id
     * @param {String} logArchiveId ID of logArchive
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LogArchive} and HTTP response
     */
    this.logArchiveDeleteCredentialpasswordIdWithHttpInfo = function(logArchiveId, id) {
      var postBody = null;

      // verify the required parameter 'logArchiveId' is set
      if (logArchiveId === undefined || logArchiveId === null) {
        throw new Error("Missing the required parameter 'logArchiveId' when calling logArchiveDeleteCredentialpasswordId");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling logArchiveDeleteCredentialpasswordId");
      }


      var pathParams = {
        'logArchiveId': logArchiveId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = LogArchive;

      return this.apiClient.callApi(
        '/logArchive/{logArchiveId}/credential/password/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /credential/password/:id
     * @param {String} logArchiveId ID of logArchive
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LogArchive}
     */
    this.logArchiveDeleteCredentialpasswordId = function(logArchiveId, id) {
      return this.logArchiveDeleteCredentialpasswordIdWithHttpInfo(logArchiveId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag/:key
     * @param {String} logArchiveId ID of logArchive
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    this.logArchiveDeleteTagKeyWithHttpInfo = function(logArchiveId, key) {
      var postBody = null;

      // verify the required parameter 'logArchiveId' is set
      if (logArchiveId === undefined || logArchiveId === null) {
        throw new Error("Missing the required parameter 'logArchiveId' when calling logArchiveDeleteTagKey");
      }

      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling logArchiveDeleteTagKey");
      }


      var pathParams = {
        'logArchiveId': logArchiveId,
        'key': key
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/logArchive/{logArchiveId}/tag/{key}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /tag/:key
     * @param {String} logArchiveId ID of logArchive
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    this.logArchiveDeleteTagKey = function(logArchiveId, key) {
      return this.logArchiveDeleteTagKeyWithHttpInfo(logArchiveId, key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/certificate/:id
     * @param {String} logArchiveId ID of logArchive
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CredentialCertificate} and HTTP response
     */
    this.logArchiveGetCredentialcertificateIdWithHttpInfo = function(logArchiveId, id) {
      var postBody = null;

      // verify the required parameter 'logArchiveId' is set
      if (logArchiveId === undefined || logArchiveId === null) {
        throw new Error("Missing the required parameter 'logArchiveId' when calling logArchiveGetCredentialcertificateId");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling logArchiveGetCredentialcertificateId");
      }


      var pathParams = {
        'logArchiveId': logArchiveId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CredentialCertificate;

      return this.apiClient.callApi(
        '/logArchive/{logArchiveId}/credential/certificate/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /credential/certificate/:id
     * @param {String} logArchiveId ID of logArchive
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CredentialCertificate}
     */
    this.logArchiveGetCredentialcertificateId = function(logArchiveId, id) {
      return this.logArchiveGetCredentialcertificateIdWithHttpInfo(logArchiveId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password/:id
     * @param {String} logArchiveId ID of logArchive
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CredentialPassword} and HTTP response
     */
    this.logArchiveGetCredentialpasswordIdWithHttpInfo = function(logArchiveId, id) {
      var postBody = null;

      // verify the required parameter 'logArchiveId' is set
      if (logArchiveId === undefined || logArchiveId === null) {
        throw new Error("Missing the required parameter 'logArchiveId' when calling logArchiveGetCredentialpasswordId");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling logArchiveGetCredentialpasswordId");
      }


      var pathParams = {
        'logArchiveId': logArchiveId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CredentialPassword;

      return this.apiClient.callApi(
        '/logArchive/{logArchiveId}/credential/password/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /credential/password/:id
     * @param {String} logArchiveId ID of logArchive
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CredentialPassword}
     */
    this.logArchiveGetCredentialpasswordId = function(logArchiveId, id) {
      return this.logArchiveGetCredentialpasswordIdWithHttpInfo(logArchiveId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services/:serviceId
     * @param {String} logArchiveId ID of logArchive
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LogArchiveServices} and HTTP response
     */
    this.logArchiveGetServicesServiceIdWithHttpInfo = function(logArchiveId, serviceId) {
      var postBody = null;

      // verify the required parameter 'logArchiveId' is set
      if (logArchiveId === undefined || logArchiveId === null) {
        throw new Error("Missing the required parameter 'logArchiveId' when calling logArchiveGetServicesServiceId");
      }

      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling logArchiveGetServicesServiceId");
      }


      var pathParams = {
        'logArchiveId': logArchiveId,
        'serviceId': serviceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = LogArchiveServices;

      return this.apiClient.callApi(
        '/logArchive/{logArchiveId}/services/{serviceId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /services/:serviceId
     * @param {String} logArchiveId ID of logArchive
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LogArchiveServices}
     */
    this.logArchiveGetServicesServiceId = function(logArchiveId, serviceId) {
      return this.logArchiveGetServicesServiceIdWithHttpInfo(logArchiveId, serviceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} logArchiveId ID of logArchive
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    this.logArchiveGetTagWithHttpInfo = function(logArchiveId) {
      var postBody = null;

      // verify the required parameter 'logArchiveId' is set
      if (logArchiveId === undefined || logArchiveId === null) {
        throw new Error("Missing the required parameter 'logArchiveId' when calling logArchiveGetTag");
      }


      var pathParams = {
        'logArchiveId': logArchiveId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/logArchive/{logArchiveId}/tag', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /tag
     * @param {String} logArchiveId ID of logArchive
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    this.logArchiveGetTag = function(logArchiveId) {
      return this.logArchiveGetTagWithHttpInfo(logArchiveId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List
     * List logArchive
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/LogArchive>} and HTTP response
     */
    this.logArchiveListWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'name': opts['name'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [LogArchive];

      return this.apiClient.callApi(
        '/logArchive', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List
     * List logArchive
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/LogArchive>}
     */
    this.logArchiveList = function(opts) {
      return this.logArchiveListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} logArchiveId ID of logArchive
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    this.logArchiveListAccessrightsWithHttpInfo = function(logArchiveId) {
      var postBody = null;

      // verify the required parameter 'logArchiveId' is set
      if (logArchiveId === undefined || logArchiveId === null) {
        throw new Error("Missing the required parameter 'logArchiveId' when calling logArchiveListAccessrights");
      }


      var pathParams = {
        'logArchiveId': logArchiveId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/logArchive/{logArchiveId}/accessrights', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /accessrights
     * @param {String} logArchiveId ID of logArchive
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    this.logArchiveListAccessrights = function(logArchiveId) {
      return this.logArchiveListAccessrightsWithHttpInfo(logArchiveId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/certificate
     * @param {String} logArchiveId ID of logArchive
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/CredentialCertificate>} and HTTP response
     */
    this.logArchiveListCredentialcertificateWithHttpInfo = function(logArchiveId) {
      var postBody = null;

      // verify the required parameter 'logArchiveId' is set
      if (logArchiveId === undefined || logArchiveId === null) {
        throw new Error("Missing the required parameter 'logArchiveId' when calling logArchiveListCredentialcertificate");
      }


      var pathParams = {
        'logArchiveId': logArchiveId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [CredentialCertificate];

      return this.apiClient.callApi(
        '/logArchive/{logArchiveId}/credential/certificate', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /credential/certificate
     * @param {String} logArchiveId ID of logArchive
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/CredentialCertificate>}
     */
    this.logArchiveListCredentialcertificate = function(logArchiveId) {
      return this.logArchiveListCredentialcertificateWithHttpInfo(logArchiveId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password
     * @param {String} logArchiveId ID of logArchive
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/CredentialPassword>} and HTTP response
     */
    this.logArchiveListCredentialpasswordWithHttpInfo = function(logArchiveId) {
      var postBody = null;

      // verify the required parameter 'logArchiveId' is set
      if (logArchiveId === undefined || logArchiveId === null) {
        throw new Error("Missing the required parameter 'logArchiveId' when calling logArchiveListCredentialpassword");
      }


      var pathParams = {
        'logArchiveId': logArchiveId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [CredentialPassword];

      return this.apiClient.callApi(
        '/logArchive/{logArchiveId}/credential/password', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /credential/password
     * @param {String} logArchiveId ID of logArchive
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/CredentialPassword>}
     */
    this.logArchiveListCredentialpassword = function(logArchiveId) {
      return this.logArchiveListCredentialpasswordWithHttpInfo(logArchiveId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /queue
     * @param {String} logArchiveId ID of logArchive
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Event>} and HTTP response
     */
    this.logArchiveListQueueWithHttpInfo = function(logArchiveId) {
      var postBody = null;

      // verify the required parameter 'logArchiveId' is set
      if (logArchiveId === undefined || logArchiveId === null) {
        throw new Error("Missing the required parameter 'logArchiveId' when calling logArchiveListQueue");
      }


      var pathParams = {
        'logArchiveId': logArchiveId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Event];

      return this.apiClient.callApi(
        '/logArchive/{logArchiveId}/queue', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /queue
     * @param {String} logArchiveId ID of logArchive
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Event>}
     */
    this.logArchiveListQueue = function(logArchiveId) {
      return this.logArchiveListQueueWithHttpInfo(logArchiveId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services
     * @param {String} logArchiveId ID of logArchive
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/LogArchiveServices>} and HTTP response
     */
    this.logArchiveListServicesWithHttpInfo = function(logArchiveId) {
      var postBody = null;

      // verify the required parameter 'logArchiveId' is set
      if (logArchiveId === undefined || logArchiveId === null) {
        throw new Error("Missing the required parameter 'logArchiveId' when calling logArchiveListServices");
      }


      var pathParams = {
        'logArchiveId': logArchiveId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [LogArchiveServices];

      return this.apiClient.callApi(
        '/logArchive/{logArchiveId}/services', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /services
     * @param {String} logArchiveId ID of logArchive
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/LogArchiveServices>}
     */
    this.logArchiveListServices = function(logArchiveId) {
      return this.logArchiveListServicesWithHttpInfo(logArchiveId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/certificate/:id
     * @param {String} logArchiveId ID of logArchive
     * @param {String} id id
     * @param {module:model/LogArchivePatchCredentialcertificateId} logArchivePatchCredentialcertificateId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CredentialCertificate} and HTTP response
     */
    this.logArchivePatchCredentialcertificateIdWithHttpInfo = function(logArchiveId, id, logArchivePatchCredentialcertificateId) {
      var postBody = logArchivePatchCredentialcertificateId;

      // verify the required parameter 'logArchiveId' is set
      if (logArchiveId === undefined || logArchiveId === null) {
        throw new Error("Missing the required parameter 'logArchiveId' when calling logArchivePatchCredentialcertificateId");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling logArchivePatchCredentialcertificateId");
      }

      // verify the required parameter 'logArchivePatchCredentialcertificateId' is set
      if (logArchivePatchCredentialcertificateId === undefined || logArchivePatchCredentialcertificateId === null) {
        throw new Error("Missing the required parameter 'logArchivePatchCredentialcertificateId' when calling logArchivePatchCredentialcertificateId");
      }


      var pathParams = {
        'logArchiveId': logArchiveId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CredentialCertificate;

      return this.apiClient.callApi(
        '/logArchive/{logArchiveId}/credential/certificate/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /credential/certificate/:id
     * @param {String} logArchiveId ID of logArchive
     * @param {String} id id
     * @param {module:model/LogArchivePatchCredentialcertificateId} logArchivePatchCredentialcertificateId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CredentialCertificate}
     */
    this.logArchivePatchCredentialcertificateId = function(logArchiveId, id, logArchivePatchCredentialcertificateId) {
      return this.logArchivePatchCredentialcertificateIdWithHttpInfo(logArchiveId, id, logArchivePatchCredentialcertificateId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password/:id
     * @param {String} logArchiveId ID of logArchive
     * @param {String} id id
     * @param {module:model/LogArchivePatchCredentialpasswordId} logArchivePatchCredentialpasswordId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CredentialPassword} and HTTP response
     */
    this.logArchivePatchCredentialpasswordIdWithHttpInfo = function(logArchiveId, id, logArchivePatchCredentialpasswordId) {
      var postBody = logArchivePatchCredentialpasswordId;

      // verify the required parameter 'logArchiveId' is set
      if (logArchiveId === undefined || logArchiveId === null) {
        throw new Error("Missing the required parameter 'logArchiveId' when calling logArchivePatchCredentialpasswordId");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling logArchivePatchCredentialpasswordId");
      }

      // verify the required parameter 'logArchivePatchCredentialpasswordId' is set
      if (logArchivePatchCredentialpasswordId === undefined || logArchivePatchCredentialpasswordId === null) {
        throw new Error("Missing the required parameter 'logArchivePatchCredentialpasswordId' when calling logArchivePatchCredentialpasswordId");
      }


      var pathParams = {
        'logArchiveId': logArchiveId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CredentialPassword;

      return this.apiClient.callApi(
        '/logArchive/{logArchiveId}/credential/password/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /credential/password/:id
     * @param {String} logArchiveId ID of logArchive
     * @param {String} id id
     * @param {module:model/LogArchivePatchCredentialpasswordId} logArchivePatchCredentialpasswordId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CredentialPassword}
     */
    this.logArchivePatchCredentialpasswordId = function(logArchiveId, id, logArchivePatchCredentialpasswordId) {
      return this.logArchivePatchCredentialpasswordIdWithHttpInfo(logArchiveId, id, logArchivePatchCredentialpasswordId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} logArchiveId ID of logArchive
     * @param {Object} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    this.logArchivePatchTagWithHttpInfo = function(logArchiveId, body) {
      var postBody = body;

      // verify the required parameter 'logArchiveId' is set
      if (logArchiveId === undefined || logArchiveId === null) {
        throw new Error("Missing the required parameter 'logArchiveId' when calling logArchivePatchTag");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling logArchivePatchTag");
      }


      var pathParams = {
        'logArchiveId': logArchiveId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/logArchive/{logArchiveId}/tag', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /tag
     * @param {String} logArchiveId ID of logArchive
     * @param {Object} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    this.logArchivePatchTag = function(logArchiveId, body) {
      return this.logArchivePatchTagWithHttpInfo(logArchiveId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} logArchiveId ID of logArchive
     * @param {module:model/LogArchivePostAccessrights} logArchivePostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    this.logArchivePostAccessrightsWithHttpInfo = function(logArchiveId, logArchivePostAccessrights) {
      var postBody = logArchivePostAccessrights;

      // verify the required parameter 'logArchiveId' is set
      if (logArchiveId === undefined || logArchiveId === null) {
        throw new Error("Missing the required parameter 'logArchiveId' when calling logArchivePostAccessrights");
      }

      // verify the required parameter 'logArchivePostAccessrights' is set
      if (logArchivePostAccessrights === undefined || logArchivePostAccessrights === null) {
        throw new Error("Missing the required parameter 'logArchivePostAccessrights' when calling logArchivePostAccessrights");
      }


      var pathParams = {
        'logArchiveId': logArchiveId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/logArchive/{logArchiveId}/accessrights', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /accessrights
     * @param {String} logArchiveId ID of logArchive
     * @param {module:model/LogArchivePostAccessrights} logArchivePostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    this.logArchivePostAccessrights = function(logArchiveId, logArchivePostAccessrights) {
      return this.logArchivePostAccessrightsWithHttpInfo(logArchiveId, logArchivePostAccessrights)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/certificate
     * @param {String} logArchiveId ID of logArchive
     * @param {module:model/LogArchivePostCredentialcertificate} logArchivePostCredentialcertificate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CredentialCertificate} and HTTP response
     */
    this.logArchivePostCredentialcertificateWithHttpInfo = function(logArchiveId, logArchivePostCredentialcertificate) {
      var postBody = logArchivePostCredentialcertificate;

      // verify the required parameter 'logArchiveId' is set
      if (logArchiveId === undefined || logArchiveId === null) {
        throw new Error("Missing the required parameter 'logArchiveId' when calling logArchivePostCredentialcertificate");
      }

      // verify the required parameter 'logArchivePostCredentialcertificate' is set
      if (logArchivePostCredentialcertificate === undefined || logArchivePostCredentialcertificate === null) {
        throw new Error("Missing the required parameter 'logArchivePostCredentialcertificate' when calling logArchivePostCredentialcertificate");
      }


      var pathParams = {
        'logArchiveId': logArchiveId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CredentialCertificate;

      return this.apiClient.callApi(
        '/logArchive/{logArchiveId}/credential/certificate', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /credential/certificate
     * @param {String} logArchiveId ID of logArchive
     * @param {module:model/LogArchivePostCredentialcertificate} logArchivePostCredentialcertificate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CredentialCertificate}
     */
    this.logArchivePostCredentialcertificate = function(logArchiveId, logArchivePostCredentialcertificate) {
      return this.logArchivePostCredentialcertificateWithHttpInfo(logArchiveId, logArchivePostCredentialcertificate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password
     * @param {String} logArchiveId ID of logArchive
     * @param {module:model/LogArchivePostCredentialpassword} logArchivePostCredentialpassword 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CredentialPassword} and HTTP response
     */
    this.logArchivePostCredentialpasswordWithHttpInfo = function(logArchiveId, logArchivePostCredentialpassword) {
      var postBody = logArchivePostCredentialpassword;

      // verify the required parameter 'logArchiveId' is set
      if (logArchiveId === undefined || logArchiveId === null) {
        throw new Error("Missing the required parameter 'logArchiveId' when calling logArchivePostCredentialpassword");
      }

      // verify the required parameter 'logArchivePostCredentialpassword' is set
      if (logArchivePostCredentialpassword === undefined || logArchivePostCredentialpassword === null) {
        throw new Error("Missing the required parameter 'logArchivePostCredentialpassword' when calling logArchivePostCredentialpassword");
      }


      var pathParams = {
        'logArchiveId': logArchiveId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CredentialPassword;

      return this.apiClient.callApi(
        '/logArchive/{logArchiveId}/credential/password', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /credential/password
     * @param {String} logArchiveId ID of logArchive
     * @param {module:model/LogArchivePostCredentialpassword} logArchivePostCredentialpassword 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CredentialPassword}
     */
    this.logArchivePostCredentialpassword = function(logArchiveId, logArchivePostCredentialpassword) {
      return this.logArchivePostCredentialpasswordWithHttpInfo(logArchiveId, logArchivePostCredentialpassword)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get
     * Returns a single logArchive
     * @param {String} logArchiveId ID of logArchive
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LogArchive} and HTTP response
     */
    this.logArchiveShowWithHttpInfo = function(logArchiveId) {
      var postBody = null;

      // verify the required parameter 'logArchiveId' is set
      if (logArchiveId === undefined || logArchiveId === null) {
        throw new Error("Missing the required parameter 'logArchiveId' when calling logArchiveShow");
      }


      var pathParams = {
        'logArchiveId': logArchiveId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = LogArchive;

      return this.apiClient.callApi(
        '/logArchive/{logArchiveId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get
     * Returns a single logArchive
     * @param {String} logArchiveId ID of logArchive
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LogArchive}
     */
    this.logArchiveShow = function(logArchiveId) {
      return this.logArchiveShowWithHttpInfo(logArchiveId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update
     * Returns modified logArchive
     * @param {String} logArchiveId ID of logArchive
     * @param {module:model/LogArchiveUpdate} logArchiveUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LogArchive} and HTTP response
     */
    this.logArchiveUpdateWithHttpInfo = function(logArchiveId, logArchiveUpdate) {
      var postBody = logArchiveUpdate;

      // verify the required parameter 'logArchiveId' is set
      if (logArchiveId === undefined || logArchiveId === null) {
        throw new Error("Missing the required parameter 'logArchiveId' when calling logArchiveUpdate");
      }

      // verify the required parameter 'logArchiveUpdate' is set
      if (logArchiveUpdate === undefined || logArchiveUpdate === null) {
        throw new Error("Missing the required parameter 'logArchiveUpdate' when calling logArchiveUpdate");
      }


      var pathParams = {
        'logArchiveId': logArchiveId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LogArchive;

      return this.apiClient.callApi(
        '/logArchive/{logArchiveId}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update
     * Returns modified logArchive
     * @param {String} logArchiveId ID of logArchive
     * @param {module:model/LogArchiveUpdate} logArchiveUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LogArchive}
     */
    this.logArchiveUpdate = function(logArchiveId, logArchiveUpdate) {
      return this.logArchiveUpdateWithHttpInfo(logArchiveId, logArchiveUpdate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
