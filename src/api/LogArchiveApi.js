/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CredentialCertificate from '../model/CredentialCertificate';
import CredentialPassword from '../model/CredentialPassword';
import Event from '../model/Event';
import LogArchive from '../model/LogArchive';
import LogArchiveActionTransfer from '../model/LogArchiveActionTransfer';
import LogArchiveCreate from '../model/LogArchiveCreate';
import LogArchivePatchCredentialcertificateId from '../model/LogArchivePatchCredentialcertificateId';
import LogArchivePatchCredentialpasswordId from '../model/LogArchivePatchCredentialpasswordId';
import LogArchivePostAccessrights from '../model/LogArchivePostAccessrights';
import LogArchivePostCredentialcertificate from '../model/LogArchivePostCredentialcertificate';
import LogArchivePostCredentialpassword from '../model/LogArchivePostCredentialpassword';
import LogArchiveServices from '../model/LogArchiveServices';
import LogArchiveUpdate from '../model/LogArchiveUpdate';

/**
* LogArchive service.
* @module api/LogArchiveApi
* @version 0.0.2
*/
export default class LogArchiveApi {

    /**
    * Constructs a new LogArchiveApi. 
    * @alias module:api/LogArchiveApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * /actions/transfer
     * Action transfer
     * @param {String} logArchiveId ID of logArchive
     * @param {module:model/LogArchiveActionTransfer} logArchiveActionTransfer 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LogArchive} and HTTP response
     */
    logArchiveActionTransferWithHttpInfo(logArchiveId, logArchiveActionTransfer) {
      let postBody = logArchiveActionTransfer;

      // verify the required parameter 'logArchiveId' is set
      if (logArchiveId === undefined || logArchiveId === null) {
        throw new Error("Missing the required parameter 'logArchiveId' when calling logArchiveActionTransfer");
      }

      // verify the required parameter 'logArchiveActionTransfer' is set
      if (logArchiveActionTransfer === undefined || logArchiveActionTransfer === null) {
        throw new Error("Missing the required parameter 'logArchiveActionTransfer' when calling logArchiveActionTransfer");
      }


      let pathParams = {
        'logArchiveId': logArchiveId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LogArchive;

      return this.apiClient.callApi(
        '/logArchive/{logArchiveId}/actions/transfer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /actions/transfer
     * Action transfer
     * @param {String} logArchiveId ID of logArchive
     * @param {module:model/LogArchiveActionTransfer} logArchiveActionTransfer 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LogArchive}
     */
    logArchiveActionTransfer(logArchiveId, logArchiveActionTransfer) {
      return this.logArchiveActionTransferWithHttpInfo(logArchiveId, logArchiveActionTransfer)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create
     * Create logArchive
     * @param {module:model/LogArchiveCreate} logArchiveCreate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LogArchive} and HTTP response
     */
    logArchiveCreateWithHttpInfo(logArchiveCreate) {
      let postBody = logArchiveCreate;

      // verify the required parameter 'logArchiveCreate' is set
      if (logArchiveCreate === undefined || logArchiveCreate === null) {
        throw new Error("Missing the required parameter 'logArchiveCreate' when calling logArchiveCreate");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LogArchive;

      return this.apiClient.callApi(
        '/logArchive', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create
     * Create logArchive
     * @param {module:model/LogArchiveCreate} logArchiveCreate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LogArchive}
     */
    logArchiveCreate(logArchiveCreate) {
      return this.logArchiveCreateWithHttpInfo(logArchiveCreate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete
     * @param {String} logArchiveId ID of logArchive
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    logArchiveDeleteWithHttpInfo(logArchiveId) {
      let postBody = null;

      // verify the required parameter 'logArchiveId' is set
      if (logArchiveId === undefined || logArchiveId === null) {
        throw new Error("Missing the required parameter 'logArchiveId' when calling logArchiveDelete");
      }


      let pathParams = {
        'logArchiveId': logArchiveId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/logArchive/{logArchiveId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete
     * @param {String} logArchiveId ID of logArchive
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    logArchiveDelete(logArchiveId) {
      return this.logArchiveDeleteWithHttpInfo(logArchiveId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights/:identity
     * @param {String} logArchiveId ID of logArchive
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LogArchive} and HTTP response
     */
    logArchiveDeleteAccessrightsIdentityWithHttpInfo(logArchiveId, identity) {
      let postBody = null;

      // verify the required parameter 'logArchiveId' is set
      if (logArchiveId === undefined || logArchiveId === null) {
        throw new Error("Missing the required parameter 'logArchiveId' when calling logArchiveDeleteAccessrightsIdentity");
      }

      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling logArchiveDeleteAccessrightsIdentity");
      }


      let pathParams = {
        'logArchiveId': logArchiveId,
        'identity': identity
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LogArchive;

      return this.apiClient.callApi(
        '/logArchive/{logArchiveId}/accessrights/{identity}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /accessrights/:identity
     * @param {String} logArchiveId ID of logArchive
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LogArchive}
     */
    logArchiveDeleteAccessrightsIdentity(logArchiveId, identity) {
      return this.logArchiveDeleteAccessrightsIdentityWithHttpInfo(logArchiveId, identity)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/certificate/:id
     * @param {String} logArchiveId ID of logArchive
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LogArchive} and HTTP response
     */
    logArchiveDeleteCredentialcertificateIdWithHttpInfo(logArchiveId, id) {
      let postBody = null;

      // verify the required parameter 'logArchiveId' is set
      if (logArchiveId === undefined || logArchiveId === null) {
        throw new Error("Missing the required parameter 'logArchiveId' when calling logArchiveDeleteCredentialcertificateId");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling logArchiveDeleteCredentialcertificateId");
      }


      let pathParams = {
        'logArchiveId': logArchiveId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LogArchive;

      return this.apiClient.callApi(
        '/logArchive/{logArchiveId}/credential/certificate/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /credential/certificate/:id
     * @param {String} logArchiveId ID of logArchive
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LogArchive}
     */
    logArchiveDeleteCredentialcertificateId(logArchiveId, id) {
      return this.logArchiveDeleteCredentialcertificateIdWithHttpInfo(logArchiveId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password/:id
     * @param {String} logArchiveId ID of logArchive
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LogArchive} and HTTP response
     */
    logArchiveDeleteCredentialpasswordIdWithHttpInfo(logArchiveId, id) {
      let postBody = null;

      // verify the required parameter 'logArchiveId' is set
      if (logArchiveId === undefined || logArchiveId === null) {
        throw new Error("Missing the required parameter 'logArchiveId' when calling logArchiveDeleteCredentialpasswordId");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling logArchiveDeleteCredentialpasswordId");
      }


      let pathParams = {
        'logArchiveId': logArchiveId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LogArchive;

      return this.apiClient.callApi(
        '/logArchive/{logArchiveId}/credential/password/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /credential/password/:id
     * @param {String} logArchiveId ID of logArchive
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LogArchive}
     */
    logArchiveDeleteCredentialpasswordId(logArchiveId, id) {
      return this.logArchiveDeleteCredentialpasswordIdWithHttpInfo(logArchiveId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag/:key
     * @param {String} logArchiveId ID of logArchive
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    logArchiveDeleteTagKeyWithHttpInfo(logArchiveId, key) {
      let postBody = null;

      // verify the required parameter 'logArchiveId' is set
      if (logArchiveId === undefined || logArchiveId === null) {
        throw new Error("Missing the required parameter 'logArchiveId' when calling logArchiveDeleteTagKey");
      }

      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling logArchiveDeleteTagKey");
      }


      let pathParams = {
        'logArchiveId': logArchiveId,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/logArchive/{logArchiveId}/tag/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /tag/:key
     * @param {String} logArchiveId ID of logArchive
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    logArchiveDeleteTagKey(logArchiveId, key) {
      return this.logArchiveDeleteTagKeyWithHttpInfo(logArchiveId, key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/certificate/:id
     * @param {String} logArchiveId ID of logArchive
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CredentialCertificate} and HTTP response
     */
    logArchiveGetCredentialcertificateIdWithHttpInfo(logArchiveId, id) {
      let postBody = null;

      // verify the required parameter 'logArchiveId' is set
      if (logArchiveId === undefined || logArchiveId === null) {
        throw new Error("Missing the required parameter 'logArchiveId' when calling logArchiveGetCredentialcertificateId");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling logArchiveGetCredentialcertificateId");
      }


      let pathParams = {
        'logArchiveId': logArchiveId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CredentialCertificate;

      return this.apiClient.callApi(
        '/logArchive/{logArchiveId}/credential/certificate/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /credential/certificate/:id
     * @param {String} logArchiveId ID of logArchive
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CredentialCertificate}
     */
    logArchiveGetCredentialcertificateId(logArchiveId, id) {
      return this.logArchiveGetCredentialcertificateIdWithHttpInfo(logArchiveId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password/:id
     * @param {String} logArchiveId ID of logArchive
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CredentialPassword} and HTTP response
     */
    logArchiveGetCredentialpasswordIdWithHttpInfo(logArchiveId, id) {
      let postBody = null;

      // verify the required parameter 'logArchiveId' is set
      if (logArchiveId === undefined || logArchiveId === null) {
        throw new Error("Missing the required parameter 'logArchiveId' when calling logArchiveGetCredentialpasswordId");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling logArchiveGetCredentialpasswordId");
      }


      let pathParams = {
        'logArchiveId': logArchiveId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CredentialPassword;

      return this.apiClient.callApi(
        '/logArchive/{logArchiveId}/credential/password/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /credential/password/:id
     * @param {String} logArchiveId ID of logArchive
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CredentialPassword}
     */
    logArchiveGetCredentialpasswordId(logArchiveId, id) {
      return this.logArchiveGetCredentialpasswordIdWithHttpInfo(logArchiveId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services/:serviceId
     * @param {String} logArchiveId ID of logArchive
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LogArchiveServices} and HTTP response
     */
    logArchiveGetServicesServiceIdWithHttpInfo(logArchiveId, serviceId) {
      let postBody = null;

      // verify the required parameter 'logArchiveId' is set
      if (logArchiveId === undefined || logArchiveId === null) {
        throw new Error("Missing the required parameter 'logArchiveId' when calling logArchiveGetServicesServiceId");
      }

      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling logArchiveGetServicesServiceId");
      }


      let pathParams = {
        'logArchiveId': logArchiveId,
        'serviceId': serviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LogArchiveServices;

      return this.apiClient.callApi(
        '/logArchive/{logArchiveId}/services/{serviceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /services/:serviceId
     * @param {String} logArchiveId ID of logArchive
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LogArchiveServices}
     */
    logArchiveGetServicesServiceId(logArchiveId, serviceId) {
      return this.logArchiveGetServicesServiceIdWithHttpInfo(logArchiveId, serviceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} logArchiveId ID of logArchive
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    logArchiveGetTagWithHttpInfo(logArchiveId) {
      let postBody = null;

      // verify the required parameter 'logArchiveId' is set
      if (logArchiveId === undefined || logArchiveId === null) {
        throw new Error("Missing the required parameter 'logArchiveId' when calling logArchiveGetTag");
      }


      let pathParams = {
        'logArchiveId': logArchiveId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/logArchive/{logArchiveId}/tag', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /tag
     * @param {String} logArchiveId ID of logArchive
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    logArchiveGetTag(logArchiveId) {
      return this.logArchiveGetTagWithHttpInfo(logArchiveId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List
     * List logArchive
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/LogArchive>} and HTTP response
     */
    logArchiveListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [LogArchive];

      return this.apiClient.callApi(
        '/logArchive', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List
     * List logArchive
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/LogArchive>}
     */
    logArchiveList(opts) {
      return this.logArchiveListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} logArchiveId ID of logArchive
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    logArchiveListAccessrightsWithHttpInfo(logArchiveId) {
      let postBody = null;

      // verify the required parameter 'logArchiveId' is set
      if (logArchiveId === undefined || logArchiveId === null) {
        throw new Error("Missing the required parameter 'logArchiveId' when calling logArchiveListAccessrights");
      }


      let pathParams = {
        'logArchiveId': logArchiveId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];

      return this.apiClient.callApi(
        '/logArchive/{logArchiveId}/accessrights', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /accessrights
     * @param {String} logArchiveId ID of logArchive
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    logArchiveListAccessrights(logArchiveId) {
      return this.logArchiveListAccessrightsWithHttpInfo(logArchiveId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/certificate
     * @param {String} logArchiveId ID of logArchive
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/CredentialCertificate>} and HTTP response
     */
    logArchiveListCredentialcertificateWithHttpInfo(logArchiveId) {
      let postBody = null;

      // verify the required parameter 'logArchiveId' is set
      if (logArchiveId === undefined || logArchiveId === null) {
        throw new Error("Missing the required parameter 'logArchiveId' when calling logArchiveListCredentialcertificate");
      }


      let pathParams = {
        'logArchiveId': logArchiveId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CredentialCertificate];

      return this.apiClient.callApi(
        '/logArchive/{logArchiveId}/credential/certificate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /credential/certificate
     * @param {String} logArchiveId ID of logArchive
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/CredentialCertificate>}
     */
    logArchiveListCredentialcertificate(logArchiveId) {
      return this.logArchiveListCredentialcertificateWithHttpInfo(logArchiveId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password
     * @param {String} logArchiveId ID of logArchive
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/CredentialPassword>} and HTTP response
     */
    logArchiveListCredentialpasswordWithHttpInfo(logArchiveId) {
      let postBody = null;

      // verify the required parameter 'logArchiveId' is set
      if (logArchiveId === undefined || logArchiveId === null) {
        throw new Error("Missing the required parameter 'logArchiveId' when calling logArchiveListCredentialpassword");
      }


      let pathParams = {
        'logArchiveId': logArchiveId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CredentialPassword];

      return this.apiClient.callApi(
        '/logArchive/{logArchiveId}/credential/password', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /credential/password
     * @param {String} logArchiveId ID of logArchive
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/CredentialPassword>}
     */
    logArchiveListCredentialpassword(logArchiveId) {
      return this.logArchiveListCredentialpasswordWithHttpInfo(logArchiveId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /queue
     * @param {String} logArchiveId ID of logArchive
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Event>} and HTTP response
     */
    logArchiveListQueueWithHttpInfo(logArchiveId) {
      let postBody = null;

      // verify the required parameter 'logArchiveId' is set
      if (logArchiveId === undefined || logArchiveId === null) {
        throw new Error("Missing the required parameter 'logArchiveId' when calling logArchiveListQueue");
      }


      let pathParams = {
        'logArchiveId': logArchiveId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Event];

      return this.apiClient.callApi(
        '/logArchive/{logArchiveId}/queue', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /queue
     * @param {String} logArchiveId ID of logArchive
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Event>}
     */
    logArchiveListQueue(logArchiveId) {
      return this.logArchiveListQueueWithHttpInfo(logArchiveId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services
     * @param {String} logArchiveId ID of logArchive
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/LogArchiveServices>} and HTTP response
     */
    logArchiveListServicesWithHttpInfo(logArchiveId) {
      let postBody = null;

      // verify the required parameter 'logArchiveId' is set
      if (logArchiveId === undefined || logArchiveId === null) {
        throw new Error("Missing the required parameter 'logArchiveId' when calling logArchiveListServices");
      }


      let pathParams = {
        'logArchiveId': logArchiveId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [LogArchiveServices];

      return this.apiClient.callApi(
        '/logArchive/{logArchiveId}/services', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /services
     * @param {String} logArchiveId ID of logArchive
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/LogArchiveServices>}
     */
    logArchiveListServices(logArchiveId) {
      return this.logArchiveListServicesWithHttpInfo(logArchiveId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/certificate/:id
     * @param {String} logArchiveId ID of logArchive
     * @param {String} id id
     * @param {module:model/LogArchivePatchCredentialcertificateId} logArchivePatchCredentialcertificateId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CredentialCertificate} and HTTP response
     */
    logArchivePatchCredentialcertificateIdWithHttpInfo(logArchiveId, id, logArchivePatchCredentialcertificateId) {
      let postBody = logArchivePatchCredentialcertificateId;

      // verify the required parameter 'logArchiveId' is set
      if (logArchiveId === undefined || logArchiveId === null) {
        throw new Error("Missing the required parameter 'logArchiveId' when calling logArchivePatchCredentialcertificateId");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling logArchivePatchCredentialcertificateId");
      }

      // verify the required parameter 'logArchivePatchCredentialcertificateId' is set
      if (logArchivePatchCredentialcertificateId === undefined || logArchivePatchCredentialcertificateId === null) {
        throw new Error("Missing the required parameter 'logArchivePatchCredentialcertificateId' when calling logArchivePatchCredentialcertificateId");
      }


      let pathParams = {
        'logArchiveId': logArchiveId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CredentialCertificate;

      return this.apiClient.callApi(
        '/logArchive/{logArchiveId}/credential/certificate/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /credential/certificate/:id
     * @param {String} logArchiveId ID of logArchive
     * @param {String} id id
     * @param {module:model/LogArchivePatchCredentialcertificateId} logArchivePatchCredentialcertificateId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CredentialCertificate}
     */
    logArchivePatchCredentialcertificateId(logArchiveId, id, logArchivePatchCredentialcertificateId) {
      return this.logArchivePatchCredentialcertificateIdWithHttpInfo(logArchiveId, id, logArchivePatchCredentialcertificateId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password/:id
     * @param {String} logArchiveId ID of logArchive
     * @param {String} id id
     * @param {module:model/LogArchivePatchCredentialpasswordId} logArchivePatchCredentialpasswordId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CredentialPassword} and HTTP response
     */
    logArchivePatchCredentialpasswordIdWithHttpInfo(logArchiveId, id, logArchivePatchCredentialpasswordId) {
      let postBody = logArchivePatchCredentialpasswordId;

      // verify the required parameter 'logArchiveId' is set
      if (logArchiveId === undefined || logArchiveId === null) {
        throw new Error("Missing the required parameter 'logArchiveId' when calling logArchivePatchCredentialpasswordId");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling logArchivePatchCredentialpasswordId");
      }

      // verify the required parameter 'logArchivePatchCredentialpasswordId' is set
      if (logArchivePatchCredentialpasswordId === undefined || logArchivePatchCredentialpasswordId === null) {
        throw new Error("Missing the required parameter 'logArchivePatchCredentialpasswordId' when calling logArchivePatchCredentialpasswordId");
      }


      let pathParams = {
        'logArchiveId': logArchiveId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CredentialPassword;

      return this.apiClient.callApi(
        '/logArchive/{logArchiveId}/credential/password/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /credential/password/:id
     * @param {String} logArchiveId ID of logArchive
     * @param {String} id id
     * @param {module:model/LogArchivePatchCredentialpasswordId} logArchivePatchCredentialpasswordId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CredentialPassword}
     */
    logArchivePatchCredentialpasswordId(logArchiveId, id, logArchivePatchCredentialpasswordId) {
      return this.logArchivePatchCredentialpasswordIdWithHttpInfo(logArchiveId, id, logArchivePatchCredentialpasswordId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} logArchiveId ID of logArchive
     * @param {Object} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    logArchivePatchTagWithHttpInfo(logArchiveId, body) {
      let postBody = body;

      // verify the required parameter 'logArchiveId' is set
      if (logArchiveId === undefined || logArchiveId === null) {
        throw new Error("Missing the required parameter 'logArchiveId' when calling logArchivePatchTag");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling logArchivePatchTag");
      }


      let pathParams = {
        'logArchiveId': logArchiveId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/logArchive/{logArchiveId}/tag', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /tag
     * @param {String} logArchiveId ID of logArchive
     * @param {Object} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    logArchivePatchTag(logArchiveId, body) {
      return this.logArchivePatchTagWithHttpInfo(logArchiveId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} logArchiveId ID of logArchive
     * @param {module:model/LogArchivePostAccessrights} logArchivePostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    logArchivePostAccessrightsWithHttpInfo(logArchiveId, logArchivePostAccessrights) {
      let postBody = logArchivePostAccessrights;

      // verify the required parameter 'logArchiveId' is set
      if (logArchiveId === undefined || logArchiveId === null) {
        throw new Error("Missing the required parameter 'logArchiveId' when calling logArchivePostAccessrights");
      }

      // verify the required parameter 'logArchivePostAccessrights' is set
      if (logArchivePostAccessrights === undefined || logArchivePostAccessrights === null) {
        throw new Error("Missing the required parameter 'logArchivePostAccessrights' when calling logArchivePostAccessrights");
      }


      let pathParams = {
        'logArchiveId': logArchiveId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/logArchive/{logArchiveId}/accessrights', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /accessrights
     * @param {String} logArchiveId ID of logArchive
     * @param {module:model/LogArchivePostAccessrights} logArchivePostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    logArchivePostAccessrights(logArchiveId, logArchivePostAccessrights) {
      return this.logArchivePostAccessrightsWithHttpInfo(logArchiveId, logArchivePostAccessrights)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/certificate
     * @param {String} logArchiveId ID of logArchive
     * @param {module:model/LogArchivePostCredentialcertificate} logArchivePostCredentialcertificate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CredentialCertificate} and HTTP response
     */
    logArchivePostCredentialcertificateWithHttpInfo(logArchiveId, logArchivePostCredentialcertificate) {
      let postBody = logArchivePostCredentialcertificate;

      // verify the required parameter 'logArchiveId' is set
      if (logArchiveId === undefined || logArchiveId === null) {
        throw new Error("Missing the required parameter 'logArchiveId' when calling logArchivePostCredentialcertificate");
      }

      // verify the required parameter 'logArchivePostCredentialcertificate' is set
      if (logArchivePostCredentialcertificate === undefined || logArchivePostCredentialcertificate === null) {
        throw new Error("Missing the required parameter 'logArchivePostCredentialcertificate' when calling logArchivePostCredentialcertificate");
      }


      let pathParams = {
        'logArchiveId': logArchiveId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CredentialCertificate;

      return this.apiClient.callApi(
        '/logArchive/{logArchiveId}/credential/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /credential/certificate
     * @param {String} logArchiveId ID of logArchive
     * @param {module:model/LogArchivePostCredentialcertificate} logArchivePostCredentialcertificate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CredentialCertificate}
     */
    logArchivePostCredentialcertificate(logArchiveId, logArchivePostCredentialcertificate) {
      return this.logArchivePostCredentialcertificateWithHttpInfo(logArchiveId, logArchivePostCredentialcertificate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password
     * @param {String} logArchiveId ID of logArchive
     * @param {module:model/LogArchivePostCredentialpassword} logArchivePostCredentialpassword 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CredentialPassword} and HTTP response
     */
    logArchivePostCredentialpasswordWithHttpInfo(logArchiveId, logArchivePostCredentialpassword) {
      let postBody = logArchivePostCredentialpassword;

      // verify the required parameter 'logArchiveId' is set
      if (logArchiveId === undefined || logArchiveId === null) {
        throw new Error("Missing the required parameter 'logArchiveId' when calling logArchivePostCredentialpassword");
      }

      // verify the required parameter 'logArchivePostCredentialpassword' is set
      if (logArchivePostCredentialpassword === undefined || logArchivePostCredentialpassword === null) {
        throw new Error("Missing the required parameter 'logArchivePostCredentialpassword' when calling logArchivePostCredentialpassword");
      }


      let pathParams = {
        'logArchiveId': logArchiveId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CredentialPassword;

      return this.apiClient.callApi(
        '/logArchive/{logArchiveId}/credential/password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /credential/password
     * @param {String} logArchiveId ID of logArchive
     * @param {module:model/LogArchivePostCredentialpassword} logArchivePostCredentialpassword 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CredentialPassword}
     */
    logArchivePostCredentialpassword(logArchiveId, logArchivePostCredentialpassword) {
      return this.logArchivePostCredentialpasswordWithHttpInfo(logArchiveId, logArchivePostCredentialpassword)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get
     * Returns a single logArchive
     * @param {String} logArchiveId ID of logArchive
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LogArchive} and HTTP response
     */
    logArchiveShowWithHttpInfo(logArchiveId) {
      let postBody = null;

      // verify the required parameter 'logArchiveId' is set
      if (logArchiveId === undefined || logArchiveId === null) {
        throw new Error("Missing the required parameter 'logArchiveId' when calling logArchiveShow");
      }


      let pathParams = {
        'logArchiveId': logArchiveId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LogArchive;

      return this.apiClient.callApi(
        '/logArchive/{logArchiveId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get
     * Returns a single logArchive
     * @param {String} logArchiveId ID of logArchive
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LogArchive}
     */
    logArchiveShow(logArchiveId) {
      return this.logArchiveShowWithHttpInfo(logArchiveId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update
     * Returns modified logArchive
     * @param {String} logArchiveId ID of logArchive
     * @param {module:model/LogArchiveUpdate} logArchiveUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LogArchive} and HTTP response
     */
    logArchiveUpdateWithHttpInfo(logArchiveId, logArchiveUpdate) {
      let postBody = logArchiveUpdate;

      // verify the required parameter 'logArchiveId' is set
      if (logArchiveId === undefined || logArchiveId === null) {
        throw new Error("Missing the required parameter 'logArchiveId' when calling logArchiveUpdate");
      }

      // verify the required parameter 'logArchiveUpdate' is set
      if (logArchiveUpdate === undefined || logArchiveUpdate === null) {
        throw new Error("Missing the required parameter 'logArchiveUpdate' when calling logArchiveUpdate");
      }


      let pathParams = {
        'logArchiveId': logArchiveId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LogArchive;

      return this.apiClient.callApi(
        '/logArchive/{logArchiveId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update
     * Returns modified logArchive
     * @param {String} logArchiveId ID of logArchive
     * @param {module:model/LogArchiveUpdate} logArchiveUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LogArchive}
     */
    logArchiveUpdate(logArchiveId, logArchiveUpdate) {
      return this.logArchiveUpdateWithHttpInfo(logArchiveId, logArchiveUpdate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
