/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Disk from '../model/Disk';
import DiskActionResize from '../model/DiskActionResize';
import DiskActionTransfer from '../model/DiskActionTransfer';
import DiskCreate from '../model/DiskCreate';
import DiskPostAccessrights from '../model/DiskPostAccessrights';
import DiskServices from '../model/DiskServices';
import DiskUpdate from '../model/DiskUpdate';
import Event from '../model/Event';

/**
* Disk service.
* @module api/DiskApi
* @version 0.0.2
*/
export default class DiskApi {

    /**
    * Constructs a new DiskApi. 
    * @alias module:api/DiskApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * /actions/resize
     * Action resize
     * @param {String} diskId ID of disk
     * @param {module:model/DiskActionResize} diskActionResize 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Disk} and HTTP response
     */
    diskActionResizeWithHttpInfo(diskId, diskActionResize) {
      let postBody = diskActionResize;

      // verify the required parameter 'diskId' is set
      if (diskId === undefined || diskId === null) {
        throw new Error("Missing the required parameter 'diskId' when calling diskActionResize");
      }

      // verify the required parameter 'diskActionResize' is set
      if (diskActionResize === undefined || diskActionResize === null) {
        throw new Error("Missing the required parameter 'diskActionResize' when calling diskActionResize");
      }


      let pathParams = {
        'diskId': diskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Disk;

      return this.apiClient.callApi(
        '/disk/{diskId}/actions/resize', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /actions/resize
     * Action resize
     * @param {String} diskId ID of disk
     * @param {module:model/DiskActionResize} diskActionResize 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Disk}
     */
    diskActionResize(diskId, diskActionResize) {
      return this.diskActionResizeWithHttpInfo(diskId, diskActionResize)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/transfer
     * Action transfer
     * @param {String} diskId ID of disk
     * @param {module:model/DiskActionTransfer} diskActionTransfer 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Disk} and HTTP response
     */
    diskActionTransferWithHttpInfo(diskId, diskActionTransfer) {
      let postBody = diskActionTransfer;

      // verify the required parameter 'diskId' is set
      if (diskId === undefined || diskId === null) {
        throw new Error("Missing the required parameter 'diskId' when calling diskActionTransfer");
      }

      // verify the required parameter 'diskActionTransfer' is set
      if (diskActionTransfer === undefined || diskActionTransfer === null) {
        throw new Error("Missing the required parameter 'diskActionTransfer' when calling diskActionTransfer");
      }


      let pathParams = {
        'diskId': diskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Disk;

      return this.apiClient.callApi(
        '/disk/{diskId}/actions/transfer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /actions/transfer
     * Action transfer
     * @param {String} diskId ID of disk
     * @param {module:model/DiskActionTransfer} diskActionTransfer 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Disk}
     */
    diskActionTransfer(diskId, diskActionTransfer) {
      return this.diskActionTransferWithHttpInfo(diskId, diskActionTransfer)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create
     * Create disk
     * @param {module:model/DiskCreate} diskCreate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Disk} and HTTP response
     */
    diskCreateWithHttpInfo(diskCreate) {
      let postBody = diskCreate;

      // verify the required parameter 'diskCreate' is set
      if (diskCreate === undefined || diskCreate === null) {
        throw new Error("Missing the required parameter 'diskCreate' when calling diskCreate");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Disk;

      return this.apiClient.callApi(
        '/disk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create
     * Create disk
     * @param {module:model/DiskCreate} diskCreate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Disk}
     */
    diskCreate(diskCreate) {
      return this.diskCreateWithHttpInfo(diskCreate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete
     * @param {String} diskId ID of disk
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    diskDeleteWithHttpInfo(diskId) {
      let postBody = null;

      // verify the required parameter 'diskId' is set
      if (diskId === undefined || diskId === null) {
        throw new Error("Missing the required parameter 'diskId' when calling diskDelete");
      }


      let pathParams = {
        'diskId': diskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/disk/{diskId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete
     * @param {String} diskId ID of disk
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    diskDelete(diskId) {
      return this.diskDeleteWithHttpInfo(diskId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights/:identity
     * @param {String} diskId ID of disk
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Disk} and HTTP response
     */
    diskDeleteAccessrightsIdentityWithHttpInfo(diskId, identity) {
      let postBody = null;

      // verify the required parameter 'diskId' is set
      if (diskId === undefined || diskId === null) {
        throw new Error("Missing the required parameter 'diskId' when calling diskDeleteAccessrightsIdentity");
      }

      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling diskDeleteAccessrightsIdentity");
      }


      let pathParams = {
        'diskId': diskId,
        'identity': identity
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Disk;

      return this.apiClient.callApi(
        '/disk/{diskId}/accessrights/{identity}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /accessrights/:identity
     * @param {String} diskId ID of disk
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Disk}
     */
    diskDeleteAccessrightsIdentity(diskId, identity) {
      return this.diskDeleteAccessrightsIdentityWithHttpInfo(diskId, identity)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag/:key
     * @param {String} diskId ID of disk
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    diskDeleteTagKeyWithHttpInfo(diskId, key) {
      let postBody = null;

      // verify the required parameter 'diskId' is set
      if (diskId === undefined || diskId === null) {
        throw new Error("Missing the required parameter 'diskId' when calling diskDeleteTagKey");
      }

      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling diskDeleteTagKey");
      }


      let pathParams = {
        'diskId': diskId,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/disk/{diskId}/tag/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /tag/:key
     * @param {String} diskId ID of disk
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    diskDeleteTagKey(diskId, key) {
      return this.diskDeleteTagKeyWithHttpInfo(diskId, key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services/:serviceId
     * @param {String} diskId ID of disk
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DiskServices} and HTTP response
     */
    diskGetServicesServiceIdWithHttpInfo(diskId, serviceId) {
      let postBody = null;

      // verify the required parameter 'diskId' is set
      if (diskId === undefined || diskId === null) {
        throw new Error("Missing the required parameter 'diskId' when calling diskGetServicesServiceId");
      }

      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling diskGetServicesServiceId");
      }


      let pathParams = {
        'diskId': diskId,
        'serviceId': serviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DiskServices;

      return this.apiClient.callApi(
        '/disk/{diskId}/services/{serviceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /services/:serviceId
     * @param {String} diskId ID of disk
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DiskServices}
     */
    diskGetServicesServiceId(diskId, serviceId) {
      return this.diskGetServicesServiceIdWithHttpInfo(diskId, serviceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} diskId ID of disk
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    diskGetTagWithHttpInfo(diskId) {
      let postBody = null;

      // verify the required parameter 'diskId' is set
      if (diskId === undefined || diskId === null) {
        throw new Error("Missing the required parameter 'diskId' when calling diskGetTag");
      }


      let pathParams = {
        'diskId': diskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/disk/{diskId}/tag', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /tag
     * @param {String} diskId ID of disk
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    diskGetTag(diskId) {
      return this.diskGetTagWithHttpInfo(diskId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List
     * List disk
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Disk>} and HTTP response
     */
    diskListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Disk];

      return this.apiClient.callApi(
        '/disk', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List
     * List disk
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Disk>}
     */
    diskList(opts) {
      return this.diskListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} diskId ID of disk
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    diskListAccessrightsWithHttpInfo(diskId) {
      let postBody = null;

      // verify the required parameter 'diskId' is set
      if (diskId === undefined || diskId === null) {
        throw new Error("Missing the required parameter 'diskId' when calling diskListAccessrights");
      }


      let pathParams = {
        'diskId': diskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];

      return this.apiClient.callApi(
        '/disk/{diskId}/accessrights', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /accessrights
     * @param {String} diskId ID of disk
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    diskListAccessrights(diskId) {
      return this.diskListAccessrightsWithHttpInfo(diskId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /queue
     * @param {String} diskId ID of disk
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Event>} and HTTP response
     */
    diskListQueueWithHttpInfo(diskId) {
      let postBody = null;

      // verify the required parameter 'diskId' is set
      if (diskId === undefined || diskId === null) {
        throw new Error("Missing the required parameter 'diskId' when calling diskListQueue");
      }


      let pathParams = {
        'diskId': diskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Event];

      return this.apiClient.callApi(
        '/disk/{diskId}/queue', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /queue
     * @param {String} diskId ID of disk
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Event>}
     */
    diskListQueue(diskId) {
      return this.diskListQueueWithHttpInfo(diskId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services
     * @param {String} diskId ID of disk
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/DiskServices>} and HTTP response
     */
    diskListServicesWithHttpInfo(diskId) {
      let postBody = null;

      // verify the required parameter 'diskId' is set
      if (diskId === undefined || diskId === null) {
        throw new Error("Missing the required parameter 'diskId' when calling diskListServices");
      }


      let pathParams = {
        'diskId': diskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DiskServices];

      return this.apiClient.callApi(
        '/disk/{diskId}/services', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /services
     * @param {String} diskId ID of disk
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/DiskServices>}
     */
    diskListServices(diskId) {
      return this.diskListServicesWithHttpInfo(diskId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} diskId ID of disk
     * @param {Object} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    diskPatchTagWithHttpInfo(diskId, body) {
      let postBody = body;

      // verify the required parameter 'diskId' is set
      if (diskId === undefined || diskId === null) {
        throw new Error("Missing the required parameter 'diskId' when calling diskPatchTag");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling diskPatchTag");
      }


      let pathParams = {
        'diskId': diskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/disk/{diskId}/tag', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /tag
     * @param {String} diskId ID of disk
     * @param {Object} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    diskPatchTag(diskId, body) {
      return this.diskPatchTagWithHttpInfo(diskId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} diskId ID of disk
     * @param {module:model/DiskPostAccessrights} diskPostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    diskPostAccessrightsWithHttpInfo(diskId, diskPostAccessrights) {
      let postBody = diskPostAccessrights;

      // verify the required parameter 'diskId' is set
      if (diskId === undefined || diskId === null) {
        throw new Error("Missing the required parameter 'diskId' when calling diskPostAccessrights");
      }

      // verify the required parameter 'diskPostAccessrights' is set
      if (diskPostAccessrights === undefined || diskPostAccessrights === null) {
        throw new Error("Missing the required parameter 'diskPostAccessrights' when calling diskPostAccessrights");
      }


      let pathParams = {
        'diskId': diskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/disk/{diskId}/accessrights', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /accessrights
     * @param {String} diskId ID of disk
     * @param {module:model/DiskPostAccessrights} diskPostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    diskPostAccessrights(diskId, diskPostAccessrights) {
      return this.diskPostAccessrightsWithHttpInfo(diskId, diskPostAccessrights)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get
     * Returns a single disk
     * @param {String} diskId ID of disk
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Disk} and HTTP response
     */
    diskShowWithHttpInfo(diskId) {
      let postBody = null;

      // verify the required parameter 'diskId' is set
      if (diskId === undefined || diskId === null) {
        throw new Error("Missing the required parameter 'diskId' when calling diskShow");
      }


      let pathParams = {
        'diskId': diskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Disk;

      return this.apiClient.callApi(
        '/disk/{diskId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get
     * Returns a single disk
     * @param {String} diskId ID of disk
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Disk}
     */
    diskShow(diskId) {
      return this.diskShowWithHttpInfo(diskId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update
     * Returns modified disk
     * @param {String} diskId ID of disk
     * @param {module:model/DiskUpdate} diskUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Disk} and HTTP response
     */
    diskUpdateWithHttpInfo(diskId, diskUpdate) {
      let postBody = diskUpdate;

      // verify the required parameter 'diskId' is set
      if (diskId === undefined || diskId === null) {
        throw new Error("Missing the required parameter 'diskId' when calling diskUpdate");
      }

      // verify the required parameter 'diskUpdate' is set
      if (diskUpdate === undefined || diskUpdate === null) {
        throw new Error("Missing the required parameter 'diskUpdate' when calling diskUpdate");
      }


      let pathParams = {
        'diskId': diskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Disk;

      return this.apiClient.callApi(
        '/disk/{diskId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update
     * Returns modified disk
     * @param {String} diskId ID of disk
     * @param {module:model/DiskUpdate} diskUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Disk}
     */
    diskUpdate(diskId, diskUpdate) {
      return this.diskUpdateWithHttpInfo(diskId, diskUpdate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
