/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Event from '../model/Event';
import Organisation from '../model/Organisation';
import OrganisationAccessRights from '../model/OrganisationAccessRights';
import OrganisationActionTransferAccept from '../model/OrganisationActionTransferAccept';
import OrganisationCreate from '../model/OrganisationCreate';
import OrganisationPostAccessrights from '../model/OrganisationPostAccessrights';
import OrganisationUpdate from '../model/OrganisationUpdate';

/**
* Organisation service.
* @module api/OrganisationApi
* @version 0.0.2
*/
export default class OrganisationApi {

    /**
    * Constructs a new OrganisationApi. 
    * @alias module:api/OrganisationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * /actions/transfer_accept
     * Action transfer_accept
     * @param {String} organisationId ID of organisation
     * @param {module:model/OrganisationActionTransferAccept} organisationActionTransferAccept 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Organisation} and HTTP response
     */
    organisationActionTransferAcceptWithHttpInfo(organisationId, organisationActionTransferAccept) {
      let postBody = organisationActionTransferAccept;

      // verify the required parameter 'organisationId' is set
      if (organisationId === undefined || organisationId === null) {
        throw new Error("Missing the required parameter 'organisationId' when calling organisationActionTransferAccept");
      }

      // verify the required parameter 'organisationActionTransferAccept' is set
      if (organisationActionTransferAccept === undefined || organisationActionTransferAccept === null) {
        throw new Error("Missing the required parameter 'organisationActionTransferAccept' when calling organisationActionTransferAccept");
      }


      let pathParams = {
        'organisationId': organisationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Organisation;

      return this.apiClient.callApi(
        '/organisation/{organisationId}/actions/transfer_accept', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /actions/transfer_accept
     * Action transfer_accept
     * @param {String} organisationId ID of organisation
     * @param {module:model/OrganisationActionTransferAccept} organisationActionTransferAccept 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Organisation}
     */
    organisationActionTransferAccept(organisationId, organisationActionTransferAccept) {
      return this.organisationActionTransferAcceptWithHttpInfo(organisationId, organisationActionTransferAccept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create
     * Create organisation
     * @param {module:model/OrganisationCreate} organisationCreate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Organisation} and HTTP response
     */
    organisationCreateWithHttpInfo(organisationCreate) {
      let postBody = organisationCreate;

      // verify the required parameter 'organisationCreate' is set
      if (organisationCreate === undefined || organisationCreate === null) {
        throw new Error("Missing the required parameter 'organisationCreate' when calling organisationCreate");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Organisation;

      return this.apiClient.callApi(
        '/organisation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create
     * Create organisation
     * @param {module:model/OrganisationCreate} organisationCreate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Organisation}
     */
    organisationCreate(organisationCreate) {
      return this.organisationCreateWithHttpInfo(organisationCreate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights/:identity
     * @param {String} organisationId ID of organisation
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Organisation} and HTTP response
     */
    organisationDeleteAccessrightsIdentityWithHttpInfo(organisationId, identity) {
      let postBody = null;

      // verify the required parameter 'organisationId' is set
      if (organisationId === undefined || organisationId === null) {
        throw new Error("Missing the required parameter 'organisationId' when calling organisationDeleteAccessrightsIdentity");
      }

      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling organisationDeleteAccessrightsIdentity");
      }


      let pathParams = {
        'organisationId': organisationId,
        'identity': identity
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Organisation;

      return this.apiClient.callApi(
        '/organisation/{organisationId}/accessrights/{identity}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /accessrights/:identity
     * @param {String} organisationId ID of organisation
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Organisation}
     */
    organisationDeleteAccessrightsIdentity(organisationId, identity) {
      return this.organisationDeleteAccessrightsIdentityWithHttpInfo(organisationId, identity)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag/:key
     * @param {String} organisationId ID of organisation
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    organisationDeleteTagKeyWithHttpInfo(organisationId, key) {
      let postBody = null;

      // verify the required parameter 'organisationId' is set
      if (organisationId === undefined || organisationId === null) {
        throw new Error("Missing the required parameter 'organisationId' when calling organisationDeleteTagKey");
      }

      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling organisationDeleteTagKey");
      }


      let pathParams = {
        'organisationId': organisationId,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/organisation/{organisationId}/tag/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /tag/:key
     * @param {String} organisationId ID of organisation
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    organisationDeleteTagKey(organisationId, key) {
      return this.organisationDeleteTagKeyWithHttpInfo(organisationId, key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} organisationId ID of organisation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    organisationGetTagWithHttpInfo(organisationId) {
      let postBody = null;

      // verify the required parameter 'organisationId' is set
      if (organisationId === undefined || organisationId === null) {
        throw new Error("Missing the required parameter 'organisationId' when calling organisationGetTag");
      }


      let pathParams = {
        'organisationId': organisationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/organisation/{organisationId}/tag', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /tag
     * @param {String} organisationId ID of organisation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    organisationGetTag(organisationId) {
      return this.organisationGetTagWithHttpInfo(organisationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List
     * List organisation
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @param {String} opts.billingCompany Filter by billing.company
     * @param {String} opts.limit Filter by $limit
     * @param {String} opts.active Filter by active
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Organisation>} and HTTP response
     */
    organisationListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'billing.company': opts['billingCompany'],
        '$limit': opts['limit'],
        'active': opts['active']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Organisation];

      return this.apiClient.callApi(
        '/organisation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List
     * List organisation
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @param {String} opts.billingCompany Filter by billing.company
     * @param {String} opts.limit Filter by $limit
     * @param {String} opts.active Filter by active
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Organisation>}
     */
    organisationList(opts) {
      return this.organisationListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} organisationId ID of organisation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/OrganisationAccessRights>} and HTTP response
     */
    organisationListAccessrightsWithHttpInfo(organisationId) {
      let postBody = null;

      // verify the required parameter 'organisationId' is set
      if (organisationId === undefined || organisationId === null) {
        throw new Error("Missing the required parameter 'organisationId' when calling organisationListAccessrights");
      }


      let pathParams = {
        'organisationId': organisationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OrganisationAccessRights];

      return this.apiClient.callApi(
        '/organisation/{organisationId}/accessrights', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /accessrights
     * @param {String} organisationId ID of organisation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/OrganisationAccessRights>}
     */
    organisationListAccessrights(organisationId) {
      return this.organisationListAccessrightsWithHttpInfo(organisationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /queue
     * @param {String} organisationId ID of organisation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Event>} and HTTP response
     */
    organisationListQueueWithHttpInfo(organisationId) {
      let postBody = null;

      // verify the required parameter 'organisationId' is set
      if (organisationId === undefined || organisationId === null) {
        throw new Error("Missing the required parameter 'organisationId' when calling organisationListQueue");
      }


      let pathParams = {
        'organisationId': organisationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Event];

      return this.apiClient.callApi(
        '/organisation/{organisationId}/queue', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /queue
     * @param {String} organisationId ID of organisation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Event>}
     */
    organisationListQueue(organisationId) {
      return this.organisationListQueueWithHttpInfo(organisationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} organisationId ID of organisation
     * @param {Object} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    organisationPatchTagWithHttpInfo(organisationId, body) {
      let postBody = body;

      // verify the required parameter 'organisationId' is set
      if (organisationId === undefined || organisationId === null) {
        throw new Error("Missing the required parameter 'organisationId' when calling organisationPatchTag");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling organisationPatchTag");
      }


      let pathParams = {
        'organisationId': organisationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/organisation/{organisationId}/tag', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /tag
     * @param {String} organisationId ID of organisation
     * @param {Object} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    organisationPatchTag(organisationId, body) {
      return this.organisationPatchTagWithHttpInfo(organisationId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} organisationId ID of organisation
     * @param {module:model/OrganisationPostAccessrights} organisationPostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/OrganisationAccessRights} and HTTP response
     */
    organisationPostAccessrightsWithHttpInfo(organisationId, organisationPostAccessrights) {
      let postBody = organisationPostAccessrights;

      // verify the required parameter 'organisationId' is set
      if (organisationId === undefined || organisationId === null) {
        throw new Error("Missing the required parameter 'organisationId' when calling organisationPostAccessrights");
      }

      // verify the required parameter 'organisationPostAccessrights' is set
      if (organisationPostAccessrights === undefined || organisationPostAccessrights === null) {
        throw new Error("Missing the required parameter 'organisationPostAccessrights' when calling organisationPostAccessrights");
      }


      let pathParams = {
        'organisationId': organisationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrganisationAccessRights;

      return this.apiClient.callApi(
        '/organisation/{organisationId}/accessrights', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /accessrights
     * @param {String} organisationId ID of organisation
     * @param {module:model/OrganisationPostAccessrights} organisationPostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/OrganisationAccessRights}
     */
    organisationPostAccessrights(organisationId, organisationPostAccessrights) {
      return this.organisationPostAccessrightsWithHttpInfo(organisationId, organisationPostAccessrights)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get
     * Returns a single organisation
     * @param {String} organisationId ID of organisation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Organisation} and HTTP response
     */
    organisationShowWithHttpInfo(organisationId) {
      let postBody = null;

      // verify the required parameter 'organisationId' is set
      if (organisationId === undefined || organisationId === null) {
        throw new Error("Missing the required parameter 'organisationId' when calling organisationShow");
      }


      let pathParams = {
        'organisationId': organisationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Organisation;

      return this.apiClient.callApi(
        '/organisation/{organisationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get
     * Returns a single organisation
     * @param {String} organisationId ID of organisation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Organisation}
     */
    organisationShow(organisationId) {
      return this.organisationShowWithHttpInfo(organisationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update
     * Returns modified organisation
     * @param {String} organisationId ID of organisation
     * @param {module:model/OrganisationUpdate} organisationUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Organisation} and HTTP response
     */
    organisationUpdateWithHttpInfo(organisationId, organisationUpdate) {
      let postBody = organisationUpdate;

      // verify the required parameter 'organisationId' is set
      if (organisationId === undefined || organisationId === null) {
        throw new Error("Missing the required parameter 'organisationId' when calling organisationUpdate");
      }

      // verify the required parameter 'organisationUpdate' is set
      if (organisationUpdate === undefined || organisationUpdate === null) {
        throw new Error("Missing the required parameter 'organisationUpdate' when calling organisationUpdate");
      }


      let pathParams = {
        'organisationId': organisationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Organisation;

      return this.apiClient.callApi(
        '/organisation/{organisationId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update
     * Returns modified organisation
     * @param {String} organisationId ID of organisation
     * @param {module:model/OrganisationUpdate} organisationUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Organisation}
     */
    organisationUpdate(organisationId, organisationUpdate) {
      return this.organisationUpdateWithHttpInfo(organisationId, organisationUpdate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
