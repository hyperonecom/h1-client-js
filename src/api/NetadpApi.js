/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Event', 'model/InlineObject46', 'model/Netadp', 'model/NetadpServices'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Event'), require('../model/InlineObject46'), require('../model/Netadp'), require('../model/NetadpServices'));
  } else {
    // Browser globals (root is window)
    if (!root.HyperOneApi) {
      root.HyperOneApi = {};
    }
    root.HyperOneApi.NetadpApi = factory(root.HyperOneApi.ApiClient, root.HyperOneApi.Event, root.HyperOneApi.InlineObject46, root.HyperOneApi.Netadp, root.HyperOneApi.NetadpServices);
  }
}(this, function(ApiClient, Event, InlineObject46, Netadp, NetadpServices) {
  'use strict';

  /**
   * Netadp service.
   * @module api/NetadpApi
   * @version 1.0.0
   */

  /**
   * Constructs a new NetadpApi. 
   * @alias module:api/NetadpApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * List
     * List netadp
     * @param {Object} opts Optional parameters
     * @param {String} opts.assignedResource Filter by assigned.resource
     * @param {String} opts.assignedId Filter by assigned.id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Netadp>} and HTTP response
     */
    this.listNetadpWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'assigned.resource': opts['assignedResource'],
        'assigned.id': opts['assignedId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Netadp];

      return this.apiClient.callApi(
        '/netadp', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List
     * List netadp
     * @param {Object} opts Optional parameters
     * @param {String} opts.assignedResource Filter by assigned.resource
     * @param {String} opts.assignedId Filter by assigned.id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Netadp>}
     */
    this.listNetadp = function(opts) {
      return this.listNetadpWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights/:identity
     * @param {String} netadpId ID of netadp
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Netadp} and HTTP response
     */
    this.operationNetadpDeleteaccessrightsIdentityWithHttpInfo = function(netadpId, identity) {
      var postBody = null;

      // verify the required parameter 'netadpId' is set
      if (netadpId === undefined || netadpId === null) {
        throw new Error("Missing the required parameter 'netadpId' when calling operationNetadpDeleteaccessrightsIdentity");
      }

      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling operationNetadpDeleteaccessrightsIdentity");
      }


      var pathParams = {
        'netadpId': netadpId,
        'identity': identity
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Netadp;

      return this.apiClient.callApi(
        '/netadp/{netadpId}/accessrights/{identity}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /accessrights/:identity
     * @param {String} netadpId ID of netadp
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Netadp}
     */
    this.operationNetadpDeleteaccessrightsIdentity = function(netadpId, identity) {
      return this.operationNetadpDeleteaccessrightsIdentityWithHttpInfo(netadpId, identity)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag/:key
     * @param {String} netadpId ID of netadp
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    this.operationNetadpDeletetagKeyWithHttpInfo = function(netadpId, key) {
      var postBody = null;

      // verify the required parameter 'netadpId' is set
      if (netadpId === undefined || netadpId === null) {
        throw new Error("Missing the required parameter 'netadpId' when calling operationNetadpDeletetagKey");
      }

      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling operationNetadpDeletetagKey");
      }


      var pathParams = {
        'netadpId': netadpId,
        'key': key
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = {'String': 'String'};

      return this.apiClient.callApi(
        '/netadp/{netadpId}/tag/{key}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /tag/:key
     * @param {String} netadpId ID of netadp
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    this.operationNetadpDeletetagKey = function(netadpId, key) {
      return this.operationNetadpDeletetagKeyWithHttpInfo(netadpId, key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services/:serviceId
     * @param {String} netadpId ID of netadp
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NetadpServices} and HTTP response
     */
    this.operationNetadpGetservicesServiceIdWithHttpInfo = function(netadpId, serviceId) {
      var postBody = null;

      // verify the required parameter 'netadpId' is set
      if (netadpId === undefined || netadpId === null) {
        throw new Error("Missing the required parameter 'netadpId' when calling operationNetadpGetservicesServiceId");
      }

      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling operationNetadpGetservicesServiceId");
      }


      var pathParams = {
        'netadpId': netadpId,
        'serviceId': serviceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = NetadpServices;

      return this.apiClient.callApi(
        '/netadp/{netadpId}/services/{serviceId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /services/:serviceId
     * @param {String} netadpId ID of netadp
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NetadpServices}
     */
    this.operationNetadpGetservicesServiceId = function(netadpId, serviceId) {
      return this.operationNetadpGetservicesServiceIdWithHttpInfo(netadpId, serviceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag/
     * @param {String} netadpId ID of netadp
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    this.operationNetadpGettagWithHttpInfo = function(netadpId) {
      var postBody = null;

      // verify the required parameter 'netadpId' is set
      if (netadpId === undefined || netadpId === null) {
        throw new Error("Missing the required parameter 'netadpId' when calling operationNetadpGettag");
      }


      var pathParams = {
        'netadpId': netadpId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = {'String': 'String'};

      return this.apiClient.callApi(
        '/netadp/{netadpId}/tag/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /tag/
     * @param {String} netadpId ID of netadp
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    this.operationNetadpGettag = function(netadpId) {
      return this.operationNetadpGettagWithHttpInfo(netadpId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights/
     * @param {String} netadpId ID of netadp
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    this.operationNetadpListaccessrightsWithHttpInfo = function(netadpId) {
      var postBody = null;

      // verify the required parameter 'netadpId' is set
      if (netadpId === undefined || netadpId === null) {
        throw new Error("Missing the required parameter 'netadpId' when calling operationNetadpListaccessrights");
      }


      var pathParams = {
        'netadpId': netadpId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/netadp/{netadpId}/accessrights/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /accessrights/
     * @param {String} netadpId ID of netadp
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    this.operationNetadpListaccessrights = function(netadpId) {
      return this.operationNetadpListaccessrightsWithHttpInfo(netadpId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /queue/
     * @param {String} netadpId ID of netadp
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Event>} and HTTP response
     */
    this.operationNetadpListqueueWithHttpInfo = function(netadpId) {
      var postBody = null;

      // verify the required parameter 'netadpId' is set
      if (netadpId === undefined || netadpId === null) {
        throw new Error("Missing the required parameter 'netadpId' when calling operationNetadpListqueue");
      }


      var pathParams = {
        'netadpId': netadpId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Event];

      return this.apiClient.callApi(
        '/netadp/{netadpId}/queue/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /queue/
     * @param {String} netadpId ID of netadp
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Event>}
     */
    this.operationNetadpListqueue = function(netadpId) {
      return this.operationNetadpListqueueWithHttpInfo(netadpId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services/
     * @param {String} netadpId ID of netadp
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/NetadpServices>} and HTTP response
     */
    this.operationNetadpListservicesWithHttpInfo = function(netadpId) {
      var postBody = null;

      // verify the required parameter 'netadpId' is set
      if (netadpId === undefined || netadpId === null) {
        throw new Error("Missing the required parameter 'netadpId' when calling operationNetadpListservices");
      }


      var pathParams = {
        'netadpId': netadpId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [NetadpServices];

      return this.apiClient.callApi(
        '/netadp/{netadpId}/services/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /services/
     * @param {String} netadpId ID of netadp
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/NetadpServices>}
     */
    this.operationNetadpListservices = function(netadpId) {
      return this.operationNetadpListservicesWithHttpInfo(netadpId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag/
     * @param {String} netadpId ID of netadp
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    this.operationNetadpPatchtagWithHttpInfo = function(netadpId, requestBody) {
      var postBody = requestBody;

      // verify the required parameter 'netadpId' is set
      if (netadpId === undefined || netadpId === null) {
        throw new Error("Missing the required parameter 'netadpId' when calling operationNetadpPatchtag");
      }

      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling operationNetadpPatchtag");
      }


      var pathParams = {
        'netadpId': netadpId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = {'String': 'String'};

      return this.apiClient.callApi(
        '/netadp/{netadpId}/tag/', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /tag/
     * @param {String} netadpId ID of netadp
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    this.operationNetadpPatchtag = function(netadpId, requestBody) {
      return this.operationNetadpPatchtagWithHttpInfo(netadpId, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights/
     * @param {String} netadpId ID of netadp
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject46} opts.inlineObject46 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    this.operationNetadpPostaccessrightsWithHttpInfo = function(netadpId, opts) {
      opts = opts || {};
      var postBody = opts['inlineObject46'];

      // verify the required parameter 'netadpId' is set
      if (netadpId === undefined || netadpId === null) {
        throw new Error("Missing the required parameter 'netadpId' when calling operationNetadpPostaccessrights");
      }


      var pathParams = {
        'netadpId': netadpId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/netadp/{netadpId}/accessrights/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /accessrights/
     * @param {String} netadpId ID of netadp
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject46} opts.inlineObject46 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    this.operationNetadpPostaccessrights = function(netadpId, opts) {
      return this.operationNetadpPostaccessrightsWithHttpInfo(netadpId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get
     * Returns a single netadp
     * @param {String} netadpId ID of netadp
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Netadp} and HTTP response
     */
    this.showNetadpWithHttpInfo = function(netadpId) {
      var postBody = null;

      // verify the required parameter 'netadpId' is set
      if (netadpId === undefined || netadpId === null) {
        throw new Error("Missing the required parameter 'netadpId' when calling showNetadp");
      }


      var pathParams = {
        'netadpId': netadpId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Netadp;

      return this.apiClient.callApi(
        '/netadp/{netadpId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get
     * Returns a single netadp
     * @param {String} netadpId ID of netadp
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Netadp}
     */
    this.showNetadp = function(netadpId) {
      return this.showNetadpWithHttpInfo(netadpId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
