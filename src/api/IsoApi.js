/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Event', 'model/Iso', 'model/IsoActionTransfer', 'model/IsoCreate', 'model/IsoPostAccessrights', 'model/IsoServices', 'model/IsoUpdate'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Event'), require('../model/Iso'), require('../model/IsoActionTransfer'), require('../model/IsoCreate'), require('../model/IsoPostAccessrights'), require('../model/IsoServices'), require('../model/IsoUpdate'));
  } else {
    // Browser globals (root is window)
    if (!root.HyperOneApi) {
      root.HyperOneApi = {};
    }
    root.HyperOneApi.IsoApi = factory(root.HyperOneApi.ApiClient, root.HyperOneApi.Event, root.HyperOneApi.Iso, root.HyperOneApi.IsoActionTransfer, root.HyperOneApi.IsoCreate, root.HyperOneApi.IsoPostAccessrights, root.HyperOneApi.IsoServices, root.HyperOneApi.IsoUpdate);
  }
}(this, function(ApiClient, Event, Iso, IsoActionTransfer, IsoCreate, IsoPostAccessrights, IsoServices, IsoUpdate) {
  'use strict';

  /**
   * Iso service.
   * @module api/IsoApi
   * @version 0.0.2
   */

  /**
   * Constructs a new IsoApi. 
   * @alias module:api/IsoApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * /actions/transfer
     * Action transfer
     * @param {String} isoId ID of iso
     * @param {module:model/IsoActionTransfer} isoActionTransfer 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Iso} and HTTP response
     */
    this.isoActionTransferWithHttpInfo = function(isoId, isoActionTransfer) {
      var postBody = isoActionTransfer;

      // verify the required parameter 'isoId' is set
      if (isoId === undefined || isoId === null) {
        throw new Error("Missing the required parameter 'isoId' when calling isoActionTransfer");
      }

      // verify the required parameter 'isoActionTransfer' is set
      if (isoActionTransfer === undefined || isoActionTransfer === null) {
        throw new Error("Missing the required parameter 'isoActionTransfer' when calling isoActionTransfer");
      }


      var pathParams = {
        'isoId': isoId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Iso;
      return this.apiClient.callApi(
        '/iso/{isoId}/actions/transfer', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /actions/transfer
     * Action transfer
     * @param {String} isoId ID of iso
     * @param {module:model/IsoActionTransfer} isoActionTransfer 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Iso}
     */
    this.isoActionTransfer = function(isoId, isoActionTransfer) {
      return this.isoActionTransferWithHttpInfo(isoId, isoActionTransfer)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create
     * Create iso
     * @param {module:model/IsoCreate} isoCreate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Iso} and HTTP response
     */
    this.isoCreateWithHttpInfo = function(isoCreate) {
      var postBody = isoCreate;

      // verify the required parameter 'isoCreate' is set
      if (isoCreate === undefined || isoCreate === null) {
        throw new Error("Missing the required parameter 'isoCreate' when calling isoCreate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Iso;
      return this.apiClient.callApi(
        '/iso', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create
     * Create iso
     * @param {module:model/IsoCreate} isoCreate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Iso}
     */
    this.isoCreate = function(isoCreate) {
      return this.isoCreateWithHttpInfo(isoCreate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete
     * @param {String} isoId ID of iso
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.isoDeleteWithHttpInfo = function(isoId) {
      var postBody = null;

      // verify the required parameter 'isoId' is set
      if (isoId === undefined || isoId === null) {
        throw new Error("Missing the required parameter 'isoId' when calling isoDelete");
      }


      var pathParams = {
        'isoId': isoId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/iso/{isoId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete
     * @param {String} isoId ID of iso
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.isoDelete = function(isoId) {
      return this.isoDeleteWithHttpInfo(isoId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights/:identity
     * @param {String} isoId ID of iso
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Iso} and HTTP response
     */
    this.isoDeleteAccessrightsIdentityWithHttpInfo = function(isoId, identity) {
      var postBody = null;

      // verify the required parameter 'isoId' is set
      if (isoId === undefined || isoId === null) {
        throw new Error("Missing the required parameter 'isoId' when calling isoDeleteAccessrightsIdentity");
      }

      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling isoDeleteAccessrightsIdentity");
      }


      var pathParams = {
        'isoId': isoId,
        'identity': identity
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Iso;
      return this.apiClient.callApi(
        '/iso/{isoId}/accessrights/{identity}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights/:identity
     * @param {String} isoId ID of iso
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Iso}
     */
    this.isoDeleteAccessrightsIdentity = function(isoId, identity) {
      return this.isoDeleteAccessrightsIdentityWithHttpInfo(isoId, identity)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag/:key
     * @param {String} isoId ID of iso
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    this.isoDeleteTagKeyWithHttpInfo = function(isoId, key) {
      var postBody = null;

      // verify the required parameter 'isoId' is set
      if (isoId === undefined || isoId === null) {
        throw new Error("Missing the required parameter 'isoId' when calling isoDeleteTagKey");
      }

      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling isoDeleteTagKey");
      }


      var pathParams = {
        'isoId': isoId,
        'key': key
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi(
        '/iso/{isoId}/tag/{key}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag/:key
     * @param {String} isoId ID of iso
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    this.isoDeleteTagKey = function(isoId, key) {
      return this.isoDeleteTagKeyWithHttpInfo(isoId, key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services/:serviceId
     * @param {String} isoId ID of iso
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IsoServices} and HTTP response
     */
    this.isoGetServicesServiceIdWithHttpInfo = function(isoId, serviceId) {
      var postBody = null;

      // verify the required parameter 'isoId' is set
      if (isoId === undefined || isoId === null) {
        throw new Error("Missing the required parameter 'isoId' when calling isoGetServicesServiceId");
      }

      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling isoGetServicesServiceId");
      }


      var pathParams = {
        'isoId': isoId,
        'serviceId': serviceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = IsoServices;
      return this.apiClient.callApi(
        '/iso/{isoId}/services/{serviceId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /services/:serviceId
     * @param {String} isoId ID of iso
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IsoServices}
     */
    this.isoGetServicesServiceId = function(isoId, serviceId) {
      return this.isoGetServicesServiceIdWithHttpInfo(isoId, serviceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} isoId ID of iso
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    this.isoGetTagWithHttpInfo = function(isoId) {
      var postBody = null;

      // verify the required parameter 'isoId' is set
      if (isoId === undefined || isoId === null) {
        throw new Error("Missing the required parameter 'isoId' when calling isoGetTag");
      }


      var pathParams = {
        'isoId': isoId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi(
        '/iso/{isoId}/tag', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} isoId ID of iso
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    this.isoGetTag = function(isoId) {
      return this.isoGetTagWithHttpInfo(isoId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List
     * List iso
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Iso>} and HTTP response
     */
    this.isoListWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'name': opts['name'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Iso];
      return this.apiClient.callApi(
        '/iso', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List
     * List iso
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Iso>}
     */
    this.isoList = function(opts) {
      return this.isoListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} isoId ID of iso
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    this.isoListAccessrightsWithHttpInfo = function(isoId) {
      var postBody = null;

      // verify the required parameter 'isoId' is set
      if (isoId === undefined || isoId === null) {
        throw new Error("Missing the required parameter 'isoId' when calling isoListAccessrights");
      }


      var pathParams = {
        'isoId': isoId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['String'];
      return this.apiClient.callApi(
        '/iso/{isoId}/accessrights', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights
     * @param {String} isoId ID of iso
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    this.isoListAccessrights = function(isoId) {
      return this.isoListAccessrightsWithHttpInfo(isoId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /queue
     * @param {String} isoId ID of iso
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Event>} and HTTP response
     */
    this.isoListQueueWithHttpInfo = function(isoId) {
      var postBody = null;

      // verify the required parameter 'isoId' is set
      if (isoId === undefined || isoId === null) {
        throw new Error("Missing the required parameter 'isoId' when calling isoListQueue");
      }


      var pathParams = {
        'isoId': isoId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Event];
      return this.apiClient.callApi(
        '/iso/{isoId}/queue', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /queue
     * @param {String} isoId ID of iso
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Event>}
     */
    this.isoListQueue = function(isoId) {
      return this.isoListQueueWithHttpInfo(isoId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services
     * @param {String} isoId ID of iso
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/IsoServices>} and HTTP response
     */
    this.isoListServicesWithHttpInfo = function(isoId) {
      var postBody = null;

      // verify the required parameter 'isoId' is set
      if (isoId === undefined || isoId === null) {
        throw new Error("Missing the required parameter 'isoId' when calling isoListServices");
      }


      var pathParams = {
        'isoId': isoId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [IsoServices];
      return this.apiClient.callApi(
        '/iso/{isoId}/services', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /services
     * @param {String} isoId ID of iso
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/IsoServices>}
     */
    this.isoListServices = function(isoId) {
      return this.isoListServicesWithHttpInfo(isoId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} isoId ID of iso
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    this.isoPatchTagWithHttpInfo = function(isoId, requestBody) {
      var postBody = requestBody;

      // verify the required parameter 'isoId' is set
      if (isoId === undefined || isoId === null) {
        throw new Error("Missing the required parameter 'isoId' when calling isoPatchTag");
      }

      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling isoPatchTag");
      }


      var pathParams = {
        'isoId': isoId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi(
        '/iso/{isoId}/tag', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} isoId ID of iso
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    this.isoPatchTag = function(isoId, requestBody) {
      return this.isoPatchTagWithHttpInfo(isoId, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} isoId ID of iso
     * @param {module:model/IsoPostAccessrights} isoPostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Iso} and HTTP response
     */
    this.isoPostAccessrightsWithHttpInfo = function(isoId, isoPostAccessrights) {
      var postBody = isoPostAccessrights;

      // verify the required parameter 'isoId' is set
      if (isoId === undefined || isoId === null) {
        throw new Error("Missing the required parameter 'isoId' when calling isoPostAccessrights");
      }

      // verify the required parameter 'isoPostAccessrights' is set
      if (isoPostAccessrights === undefined || isoPostAccessrights === null) {
        throw new Error("Missing the required parameter 'isoPostAccessrights' when calling isoPostAccessrights");
      }


      var pathParams = {
        'isoId': isoId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Iso;
      return this.apiClient.callApi(
        '/iso/{isoId}/accessrights', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights
     * @param {String} isoId ID of iso
     * @param {module:model/IsoPostAccessrights} isoPostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Iso}
     */
    this.isoPostAccessrights = function(isoId, isoPostAccessrights) {
      return this.isoPostAccessrightsWithHttpInfo(isoId, isoPostAccessrights)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get
     * Returns a single iso
     * @param {String} isoId ID of iso
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Iso} and HTTP response
     */
    this.isoShowWithHttpInfo = function(isoId) {
      var postBody = null;

      // verify the required parameter 'isoId' is set
      if (isoId === undefined || isoId === null) {
        throw new Error("Missing the required parameter 'isoId' when calling isoShow");
      }


      var pathParams = {
        'isoId': isoId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Iso;
      return this.apiClient.callApi(
        '/iso/{isoId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get
     * Returns a single iso
     * @param {String} isoId ID of iso
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Iso}
     */
    this.isoShow = function(isoId) {
      return this.isoShowWithHttpInfo(isoId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update
     * Returns modified iso
     * @param {String} isoId ID of iso
     * @param {module:model/IsoUpdate} isoUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Iso} and HTTP response
     */
    this.isoUpdateWithHttpInfo = function(isoId, isoUpdate) {
      var postBody = isoUpdate;

      // verify the required parameter 'isoId' is set
      if (isoId === undefined || isoId === null) {
        throw new Error("Missing the required parameter 'isoId' when calling isoUpdate");
      }

      // verify the required parameter 'isoUpdate' is set
      if (isoUpdate === undefined || isoUpdate === null) {
        throw new Error("Missing the required parameter 'isoUpdate' when calling isoUpdate");
      }


      var pathParams = {
        'isoId': isoId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Iso;
      return this.apiClient.callApi(
        '/iso/{isoId}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update
     * Returns modified iso
     * @param {String} isoId ID of iso
     * @param {module:model/IsoUpdate} isoUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Iso}
     */
    this.isoUpdate = function(isoId, isoUpdate) {
      return this.isoUpdateWithHttpInfo(isoId, isoUpdate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
