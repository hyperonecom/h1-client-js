/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Event', 'model/InlineObject31', 'model/InlineObject32', 'model/InlineObject33', 'model/InlineObject34', 'model/Iso', 'model/IsoServices'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Event'), require('../model/InlineObject31'), require('../model/InlineObject32'), require('../model/InlineObject33'), require('../model/InlineObject34'), require('../model/Iso'), require('../model/IsoServices'));
  } else {
    // Browser globals (root is window)
    if (!root.HyperOneApi) {
      root.HyperOneApi = {};
    }
    root.HyperOneApi.IsoApi = factory(root.HyperOneApi.ApiClient, root.HyperOneApi.Event, root.HyperOneApi.InlineObject31, root.HyperOneApi.InlineObject32, root.HyperOneApi.InlineObject33, root.HyperOneApi.InlineObject34, root.HyperOneApi.Iso, root.HyperOneApi.IsoServices);
  }
}(this, function(ApiClient, Event, InlineObject31, InlineObject32, InlineObject33, InlineObject34, Iso, IsoServices) {
  'use strict';

  /**
   * Iso service.
   * @module api/IsoApi
   * @version 1.0.0
   */

  /**
   * Constructs a new IsoApi. 
   * @alias module:api/IsoApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * /actions/transfer
     * Action transfer
     * @param {String} isoId ID of iso
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject33} opts.inlineObject33 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Iso} and HTTP response
     */
    this.actionIsoTransferWithHttpInfo = function(isoId, opts) {
      opts = opts || {};
      var postBody = opts['inlineObject33'];

      // verify the required parameter 'isoId' is set
      if (isoId === undefined || isoId === null) {
        throw new Error("Missing the required parameter 'isoId' when calling actionIsoTransfer");
      }


      var pathParams = {
        'isoId': isoId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Iso;

      return this.apiClient.callApi(
        '/iso/{isoId}/actions/transfer', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /actions/transfer
     * Action transfer
     * @param {String} isoId ID of iso
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject33} opts.inlineObject33 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Iso}
     */
    this.actionIsoTransfer = function(isoId, opts) {
      return this.actionIsoTransferWithHttpInfo(isoId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create
     * Create iso
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject31} opts.inlineObject31 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Iso} and HTTP response
     */
    this.createIsoWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['inlineObject31'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Iso;

      return this.apiClient.callApi(
        '/iso', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create
     * Create iso
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject31} opts.inlineObject31 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Iso}
     */
    this.createIso = function(opts) {
      return this.createIsoWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete
     * @param {String} isoId ID of iso
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteIsoWithHttpInfo = function(isoId) {
      var postBody = null;

      // verify the required parameter 'isoId' is set
      if (isoId === undefined || isoId === null) {
        throw new Error("Missing the required parameter 'isoId' when calling deleteIso");
      }


      var pathParams = {
        'isoId': isoId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/iso/{isoId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete
     * @param {String} isoId ID of iso
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteIso = function(isoId) {
      return this.deleteIsoWithHttpInfo(isoId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List
     * List iso
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Iso>} and HTTP response
     */
    this.listIsoWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'name': opts['name'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Iso];

      return this.apiClient.callApi(
        '/iso', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List
     * List iso
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Iso>}
     */
    this.listIso = function(opts) {
      return this.listIsoWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights/:identity
     * @param {String} isoId ID of iso
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Iso} and HTTP response
     */
    this.operationIsoDeleteaccessrightsIdentityWithHttpInfo = function(isoId, identity) {
      var postBody = null;

      // verify the required parameter 'isoId' is set
      if (isoId === undefined || isoId === null) {
        throw new Error("Missing the required parameter 'isoId' when calling operationIsoDeleteaccessrightsIdentity");
      }

      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling operationIsoDeleteaccessrightsIdentity");
      }


      var pathParams = {
        'isoId': isoId,
        'identity': identity
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Iso;

      return this.apiClient.callApi(
        '/iso/{isoId}/accessrights/{identity}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /accessrights/:identity
     * @param {String} isoId ID of iso
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Iso}
     */
    this.operationIsoDeleteaccessrightsIdentity = function(isoId, identity) {
      return this.operationIsoDeleteaccessrightsIdentityWithHttpInfo(isoId, identity)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag/:key
     * @param {String} isoId ID of iso
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    this.operationIsoDeletetagKeyWithHttpInfo = function(isoId, key) {
      var postBody = null;

      // verify the required parameter 'isoId' is set
      if (isoId === undefined || isoId === null) {
        throw new Error("Missing the required parameter 'isoId' when calling operationIsoDeletetagKey");
      }

      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling operationIsoDeletetagKey");
      }


      var pathParams = {
        'isoId': isoId,
        'key': key
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = {'String': 'String'};

      return this.apiClient.callApi(
        '/iso/{isoId}/tag/{key}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /tag/:key
     * @param {String} isoId ID of iso
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    this.operationIsoDeletetagKey = function(isoId, key) {
      return this.operationIsoDeletetagKeyWithHttpInfo(isoId, key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services/:serviceId
     * @param {String} isoId ID of iso
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IsoServices} and HTTP response
     */
    this.operationIsoGetservicesServiceIdWithHttpInfo = function(isoId, serviceId) {
      var postBody = null;

      // verify the required parameter 'isoId' is set
      if (isoId === undefined || isoId === null) {
        throw new Error("Missing the required parameter 'isoId' when calling operationIsoGetservicesServiceId");
      }

      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling operationIsoGetservicesServiceId");
      }


      var pathParams = {
        'isoId': isoId,
        'serviceId': serviceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = IsoServices;

      return this.apiClient.callApi(
        '/iso/{isoId}/services/{serviceId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /services/:serviceId
     * @param {String} isoId ID of iso
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IsoServices}
     */
    this.operationIsoGetservicesServiceId = function(isoId, serviceId) {
      return this.operationIsoGetservicesServiceIdWithHttpInfo(isoId, serviceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag/
     * @param {String} isoId ID of iso
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    this.operationIsoGettagWithHttpInfo = function(isoId) {
      var postBody = null;

      // verify the required parameter 'isoId' is set
      if (isoId === undefined || isoId === null) {
        throw new Error("Missing the required parameter 'isoId' when calling operationIsoGettag");
      }


      var pathParams = {
        'isoId': isoId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = {'String': 'String'};

      return this.apiClient.callApi(
        '/iso/{isoId}/tag/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /tag/
     * @param {String} isoId ID of iso
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    this.operationIsoGettag = function(isoId) {
      return this.operationIsoGettagWithHttpInfo(isoId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights/
     * @param {String} isoId ID of iso
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    this.operationIsoListaccessrightsWithHttpInfo = function(isoId) {
      var postBody = null;

      // verify the required parameter 'isoId' is set
      if (isoId === undefined || isoId === null) {
        throw new Error("Missing the required parameter 'isoId' when calling operationIsoListaccessrights");
      }


      var pathParams = {
        'isoId': isoId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/iso/{isoId}/accessrights/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /accessrights/
     * @param {String} isoId ID of iso
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    this.operationIsoListaccessrights = function(isoId) {
      return this.operationIsoListaccessrightsWithHttpInfo(isoId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /queue/
     * @param {String} isoId ID of iso
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Event>} and HTTP response
     */
    this.operationIsoListqueueWithHttpInfo = function(isoId) {
      var postBody = null;

      // verify the required parameter 'isoId' is set
      if (isoId === undefined || isoId === null) {
        throw new Error("Missing the required parameter 'isoId' when calling operationIsoListqueue");
      }


      var pathParams = {
        'isoId': isoId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Event];

      return this.apiClient.callApi(
        '/iso/{isoId}/queue/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /queue/
     * @param {String} isoId ID of iso
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Event>}
     */
    this.operationIsoListqueue = function(isoId) {
      return this.operationIsoListqueueWithHttpInfo(isoId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services/
     * @param {String} isoId ID of iso
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/IsoServices>} and HTTP response
     */
    this.operationIsoListservicesWithHttpInfo = function(isoId) {
      var postBody = null;

      // verify the required parameter 'isoId' is set
      if (isoId === undefined || isoId === null) {
        throw new Error("Missing the required parameter 'isoId' when calling operationIsoListservices");
      }


      var pathParams = {
        'isoId': isoId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [IsoServices];

      return this.apiClient.callApi(
        '/iso/{isoId}/services/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /services/
     * @param {String} isoId ID of iso
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/IsoServices>}
     */
    this.operationIsoListservices = function(isoId) {
      return this.operationIsoListservicesWithHttpInfo(isoId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag/
     * @param {String} isoId ID of iso
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    this.operationIsoPatchtagWithHttpInfo = function(isoId, requestBody) {
      var postBody = requestBody;

      // verify the required parameter 'isoId' is set
      if (isoId === undefined || isoId === null) {
        throw new Error("Missing the required parameter 'isoId' when calling operationIsoPatchtag");
      }

      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling operationIsoPatchtag");
      }


      var pathParams = {
        'isoId': isoId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = {'String': 'String'};

      return this.apiClient.callApi(
        '/iso/{isoId}/tag/', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /tag/
     * @param {String} isoId ID of iso
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    this.operationIsoPatchtag = function(isoId, requestBody) {
      return this.operationIsoPatchtagWithHttpInfo(isoId, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights/
     * @param {String} isoId ID of iso
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject34} opts.inlineObject34 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    this.operationIsoPostaccessrightsWithHttpInfo = function(isoId, opts) {
      opts = opts || {};
      var postBody = opts['inlineObject34'];

      // verify the required parameter 'isoId' is set
      if (isoId === undefined || isoId === null) {
        throw new Error("Missing the required parameter 'isoId' when calling operationIsoPostaccessrights");
      }


      var pathParams = {
        'isoId': isoId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/iso/{isoId}/accessrights/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /accessrights/
     * @param {String} isoId ID of iso
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject34} opts.inlineObject34 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    this.operationIsoPostaccessrights = function(isoId, opts) {
      return this.operationIsoPostaccessrightsWithHttpInfo(isoId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get
     * Returns a single iso
     * @param {String} isoId ID of iso
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Iso} and HTTP response
     */
    this.showIsoWithHttpInfo = function(isoId) {
      var postBody = null;

      // verify the required parameter 'isoId' is set
      if (isoId === undefined || isoId === null) {
        throw new Error("Missing the required parameter 'isoId' when calling showIso");
      }


      var pathParams = {
        'isoId': isoId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Iso;

      return this.apiClient.callApi(
        '/iso/{isoId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get
     * Returns a single iso
     * @param {String} isoId ID of iso
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Iso}
     */
    this.showIso = function(isoId) {
      return this.showIsoWithHttpInfo(isoId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update
     * Returns modified iso
     * @param {String} isoId ID of iso
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject32} opts.inlineObject32 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Iso} and HTTP response
     */
    this.updateIsoWithHttpInfo = function(isoId, opts) {
      opts = opts || {};
      var postBody = opts['inlineObject32'];

      // verify the required parameter 'isoId' is set
      if (isoId === undefined || isoId === null) {
        throw new Error("Missing the required parameter 'isoId' when calling updateIso");
      }


      var pathParams = {
        'isoId': isoId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Iso;

      return this.apiClient.callApi(
        '/iso/{isoId}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update
     * Returns modified iso
     * @param {String} isoId ID of iso
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject32} opts.inlineObject32 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Iso}
     */
    this.updateIso = function(isoId, opts) {
      return this.updateIsoWithHttpInfo(isoId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
