/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Event', 'model/InlineObject68', 'model/InlineObject69', 'model/InlineObject70', 'model/InlineObject71', 'model/InlineObject72', 'model/InlineObject73', 'model/Vmhost', 'model/VmhostServices'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Event'), require('../model/InlineObject68'), require('../model/InlineObject69'), require('../model/InlineObject70'), require('../model/InlineObject71'), require('../model/InlineObject72'), require('../model/InlineObject73'), require('../model/Vmhost'), require('../model/VmhostServices'));
  } else {
    // Browser globals (root is window)
    if (!root.HyperOneApi) {
      root.HyperOneApi = {};
    }
    root.HyperOneApi.VmhostApi = factory(root.HyperOneApi.ApiClient, root.HyperOneApi.Event, root.HyperOneApi.InlineObject68, root.HyperOneApi.InlineObject69, root.HyperOneApi.InlineObject70, root.HyperOneApi.InlineObject71, root.HyperOneApi.InlineObject72, root.HyperOneApi.InlineObject73, root.HyperOneApi.Vmhost, root.HyperOneApi.VmhostServices);
  }
}(this, function(ApiClient, Event, InlineObject68, InlineObject69, InlineObject70, InlineObject71, InlineObject72, InlineObject73, Vmhost, VmhostServices) {
  'use strict';

  /**
   * Vmhost service.
   * @module api/VmhostApi
   * @version 1
   */

  /**
   * Constructs a new VmhostApi. 
   * @alias module:api/VmhostApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * /actions/moveDisk
     * Action moveDisk
     * @param {String} vmhostId ID of vmhost
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject70} opts.inlineObject70 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vmhost} and HTTP response
     */
    this.actionVmhostMoveDiskWithHttpInfo = function(vmhostId, opts) {
      opts = opts || {};
      var postBody = opts['inlineObject70'];

      // verify the required parameter 'vmhostId' is set
      if (vmhostId === undefined || vmhostId === null) {
        throw new Error("Missing the required parameter 'vmhostId' when calling actionVmhostMoveDisk");
      }


      var pathParams = {
        'vmhostId': vmhostId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Vmhost;

      return this.apiClient.callApi(
        '/vmhost/{vmhostId}/actions/moveDisk', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /actions/moveDisk
     * Action moveDisk
     * @param {String} vmhostId ID of vmhost
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject70} opts.inlineObject70 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vmhost}
     */
    this.actionVmhostMoveDisk = function(vmhostId, opts) {
      return this.actionVmhostMoveDiskWithHttpInfo(vmhostId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/moveISO
     * Action moveISO
     * @param {String} vmhostId ID of vmhost
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject71} opts.inlineObject71 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vmhost} and HTTP response
     */
    this.actionVmhostMoveISOWithHttpInfo = function(vmhostId, opts) {
      opts = opts || {};
      var postBody = opts['inlineObject71'];

      // verify the required parameter 'vmhostId' is set
      if (vmhostId === undefined || vmhostId === null) {
        throw new Error("Missing the required parameter 'vmhostId' when calling actionVmhostMoveISO");
      }


      var pathParams = {
        'vmhostId': vmhostId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Vmhost;

      return this.apiClient.callApi(
        '/vmhost/{vmhostId}/actions/moveISO', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /actions/moveISO
     * Action moveISO
     * @param {String} vmhostId ID of vmhost
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject71} opts.inlineObject71 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vmhost}
     */
    this.actionVmhostMoveISO = function(vmhostId, opts) {
      return this.actionVmhostMoveISOWithHttpInfo(vmhostId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/moveImage
     * Action moveImage
     * @param {String} vmhostId ID of vmhost
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject72} opts.inlineObject72 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vmhost} and HTTP response
     */
    this.actionVmhostMoveImageWithHttpInfo = function(vmhostId, opts) {
      opts = opts || {};
      var postBody = opts['inlineObject72'];

      // verify the required parameter 'vmhostId' is set
      if (vmhostId === undefined || vmhostId === null) {
        throw new Error("Missing the required parameter 'vmhostId' when calling actionVmhostMoveImage");
      }


      var pathParams = {
        'vmhostId': vmhostId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Vmhost;

      return this.apiClient.callApi(
        '/vmhost/{vmhostId}/actions/moveImage', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /actions/moveImage
     * Action moveImage
     * @param {String} vmhostId ID of vmhost
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject72} opts.inlineObject72 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vmhost}
     */
    this.actionVmhostMoveImage = function(vmhostId, opts) {
      return this.actionVmhostMoveImageWithHttpInfo(vmhostId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/moveVM
     * Action moveVM
     * @param {String} vmhostId ID of vmhost
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject69} opts.inlineObject69 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vmhost} and HTTP response
     */
    this.actionVmhostMoveVMWithHttpInfo = function(vmhostId, opts) {
      opts = opts || {};
      var postBody = opts['inlineObject69'];

      // verify the required parameter 'vmhostId' is set
      if (vmhostId === undefined || vmhostId === null) {
        throw new Error("Missing the required parameter 'vmhostId' when calling actionVmhostMoveVM");
      }


      var pathParams = {
        'vmhostId': vmhostId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Vmhost;

      return this.apiClient.callApi(
        '/vmhost/{vmhostId}/actions/moveVM', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /actions/moveVM
     * Action moveVM
     * @param {String} vmhostId ID of vmhost
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject69} opts.inlineObject69 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vmhost}
     */
    this.actionVmhostMoveVM = function(vmhostId, opts) {
      return this.actionVmhostMoveVMWithHttpInfo(vmhostId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete
     * @param {String} vmhostId ID of vmhost
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteVmhostWithHttpInfo = function(vmhostId) {
      var postBody = null;

      // verify the required parameter 'vmhostId' is set
      if (vmhostId === undefined || vmhostId === null) {
        throw new Error("Missing the required parameter 'vmhostId' when calling deleteVmhost");
      }


      var pathParams = {
        'vmhostId': vmhostId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/vmhost/{vmhostId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete
     * @param {String} vmhostId ID of vmhost
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteVmhost = function(vmhostId) {
      return this.deleteVmhostWithHttpInfo(vmhostId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List
     * List vmhost
     * @param {Object} opts Optional parameters
     * @param {String} opts.enabledServices Filter by enabledServices
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Vmhost>} and HTTP response
     */
    this.listVmhostWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'enabledServices': opts['enabledServices'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Vmhost];

      return this.apiClient.callApi(
        '/vmhost', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List
     * List vmhost
     * @param {Object} opts Optional parameters
     * @param {String} opts.enabledServices Filter by enabledServices
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Vmhost>}
     */
    this.listVmhost = function(opts) {
      return this.listVmhostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights/:identity
     * @param {String} vmhostId ID of vmhost
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vmhost} and HTTP response
     */
    this.operationVmhostDeleteaccessrightsIdentityWithHttpInfo = function(vmhostId, identity) {
      var postBody = null;

      // verify the required parameter 'vmhostId' is set
      if (vmhostId === undefined || vmhostId === null) {
        throw new Error("Missing the required parameter 'vmhostId' when calling operationVmhostDeleteaccessrightsIdentity");
      }

      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling operationVmhostDeleteaccessrightsIdentity");
      }


      var pathParams = {
        'vmhostId': vmhostId,
        'identity': identity
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Vmhost;

      return this.apiClient.callApi(
        '/vmhost/{vmhostId}/accessrights/{identity}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /accessrights/:identity
     * @param {String} vmhostId ID of vmhost
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vmhost}
     */
    this.operationVmhostDeleteaccessrightsIdentity = function(vmhostId, identity) {
      return this.operationVmhostDeleteaccessrightsIdentityWithHttpInfo(vmhostId, identity)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag/:key
     * @param {String} vmhostId ID of vmhost
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    this.operationVmhostDeletetagKeyWithHttpInfo = function(vmhostId, key) {
      var postBody = null;

      // verify the required parameter 'vmhostId' is set
      if (vmhostId === undefined || vmhostId === null) {
        throw new Error("Missing the required parameter 'vmhostId' when calling operationVmhostDeletetagKey");
      }

      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling operationVmhostDeletetagKey");
      }


      var pathParams = {
        'vmhostId': vmhostId,
        'key': key
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = {'String': 'String'};

      return this.apiClient.callApi(
        '/vmhost/{vmhostId}/tag/{key}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /tag/:key
     * @param {String} vmhostId ID of vmhost
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    this.operationVmhostDeletetagKey = function(vmhostId, key) {
      return this.operationVmhostDeletetagKeyWithHttpInfo(vmhostId, key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services/:serviceId
     * @param {String} vmhostId ID of vmhost
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VmhostServices} and HTTP response
     */
    this.operationVmhostGetservicesServiceIdWithHttpInfo = function(vmhostId, serviceId) {
      var postBody = null;

      // verify the required parameter 'vmhostId' is set
      if (vmhostId === undefined || vmhostId === null) {
        throw new Error("Missing the required parameter 'vmhostId' when calling operationVmhostGetservicesServiceId");
      }

      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling operationVmhostGetservicesServiceId");
      }


      var pathParams = {
        'vmhostId': vmhostId,
        'serviceId': serviceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = VmhostServices;

      return this.apiClient.callApi(
        '/vmhost/{vmhostId}/services/{serviceId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /services/:serviceId
     * @param {String} vmhostId ID of vmhost
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VmhostServices}
     */
    this.operationVmhostGetservicesServiceId = function(vmhostId, serviceId) {
      return this.operationVmhostGetservicesServiceIdWithHttpInfo(vmhostId, serviceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag/
     * @param {String} vmhostId ID of vmhost
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    this.operationVmhostGettagWithHttpInfo = function(vmhostId) {
      var postBody = null;

      // verify the required parameter 'vmhostId' is set
      if (vmhostId === undefined || vmhostId === null) {
        throw new Error("Missing the required parameter 'vmhostId' when calling operationVmhostGettag");
      }


      var pathParams = {
        'vmhostId': vmhostId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = {'String': 'String'};

      return this.apiClient.callApi(
        '/vmhost/{vmhostId}/tag/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /tag/
     * @param {String} vmhostId ID of vmhost
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    this.operationVmhostGettag = function(vmhostId) {
      return this.operationVmhostGettagWithHttpInfo(vmhostId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights/
     * @param {String} vmhostId ID of vmhost
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    this.operationVmhostListaccessrightsWithHttpInfo = function(vmhostId) {
      var postBody = null;

      // verify the required parameter 'vmhostId' is set
      if (vmhostId === undefined || vmhostId === null) {
        throw new Error("Missing the required parameter 'vmhostId' when calling operationVmhostListaccessrights");
      }


      var pathParams = {
        'vmhostId': vmhostId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/vmhost/{vmhostId}/accessrights/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /accessrights/
     * @param {String} vmhostId ID of vmhost
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    this.operationVmhostListaccessrights = function(vmhostId) {
      return this.operationVmhostListaccessrightsWithHttpInfo(vmhostId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /queue/
     * @param {String} vmhostId ID of vmhost
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Event>} and HTTP response
     */
    this.operationVmhostListqueueWithHttpInfo = function(vmhostId) {
      var postBody = null;

      // verify the required parameter 'vmhostId' is set
      if (vmhostId === undefined || vmhostId === null) {
        throw new Error("Missing the required parameter 'vmhostId' when calling operationVmhostListqueue");
      }


      var pathParams = {
        'vmhostId': vmhostId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Event];

      return this.apiClient.callApi(
        '/vmhost/{vmhostId}/queue/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /queue/
     * @param {String} vmhostId ID of vmhost
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Event>}
     */
    this.operationVmhostListqueue = function(vmhostId) {
      return this.operationVmhostListqueueWithHttpInfo(vmhostId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services/
     * @param {String} vmhostId ID of vmhost
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/VmhostServices>} and HTTP response
     */
    this.operationVmhostListservicesWithHttpInfo = function(vmhostId) {
      var postBody = null;

      // verify the required parameter 'vmhostId' is set
      if (vmhostId === undefined || vmhostId === null) {
        throw new Error("Missing the required parameter 'vmhostId' when calling operationVmhostListservices");
      }


      var pathParams = {
        'vmhostId': vmhostId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [VmhostServices];

      return this.apiClient.callApi(
        '/vmhost/{vmhostId}/services/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /services/
     * @param {String} vmhostId ID of vmhost
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/VmhostServices>}
     */
    this.operationVmhostListservices = function(vmhostId) {
      return this.operationVmhostListservicesWithHttpInfo(vmhostId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag/
     * @param {String} vmhostId ID of vmhost
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    this.operationVmhostPatchtagWithHttpInfo = function(vmhostId, requestBody) {
      var postBody = requestBody;

      // verify the required parameter 'vmhostId' is set
      if (vmhostId === undefined || vmhostId === null) {
        throw new Error("Missing the required parameter 'vmhostId' when calling operationVmhostPatchtag");
      }

      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling operationVmhostPatchtag");
      }


      var pathParams = {
        'vmhostId': vmhostId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = {'String': 'String'};

      return this.apiClient.callApi(
        '/vmhost/{vmhostId}/tag/', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /tag/
     * @param {String} vmhostId ID of vmhost
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    this.operationVmhostPatchtag = function(vmhostId, requestBody) {
      return this.operationVmhostPatchtagWithHttpInfo(vmhostId, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights/
     * @param {String} vmhostId ID of vmhost
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject73} opts.inlineObject73 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    this.operationVmhostPostaccessrightsWithHttpInfo = function(vmhostId, opts) {
      opts = opts || {};
      var postBody = opts['inlineObject73'];

      // verify the required parameter 'vmhostId' is set
      if (vmhostId === undefined || vmhostId === null) {
        throw new Error("Missing the required parameter 'vmhostId' when calling operationVmhostPostaccessrights");
      }


      var pathParams = {
        'vmhostId': vmhostId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/vmhost/{vmhostId}/accessrights/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /accessrights/
     * @param {String} vmhostId ID of vmhost
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject73} opts.inlineObject73 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    this.operationVmhostPostaccessrights = function(vmhostId, opts) {
      return this.operationVmhostPostaccessrightsWithHttpInfo(vmhostId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get
     * Returns a single vmhost
     * @param {String} vmhostId ID of vmhost
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vmhost} and HTTP response
     */
    this.showVmhostWithHttpInfo = function(vmhostId) {
      var postBody = null;

      // verify the required parameter 'vmhostId' is set
      if (vmhostId === undefined || vmhostId === null) {
        throw new Error("Missing the required parameter 'vmhostId' when calling showVmhost");
      }


      var pathParams = {
        'vmhostId': vmhostId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Vmhost;

      return this.apiClient.callApi(
        '/vmhost/{vmhostId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get
     * Returns a single vmhost
     * @param {String} vmhostId ID of vmhost
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vmhost}
     */
    this.showVmhost = function(vmhostId) {
      return this.showVmhostWithHttpInfo(vmhostId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update
     * Returns modified vmhost
     * @param {String} vmhostId ID of vmhost
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject68} opts.inlineObject68 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vmhost} and HTTP response
     */
    this.updateVmhostWithHttpInfo = function(vmhostId, opts) {
      opts = opts || {};
      var postBody = opts['inlineObject68'];

      // verify the required parameter 'vmhostId' is set
      if (vmhostId === undefined || vmhostId === null) {
        throw new Error("Missing the required parameter 'vmhostId' when calling updateVmhost");
      }


      var pathParams = {
        'vmhostId': vmhostId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Vmhost;

      return this.apiClient.callApi(
        '/vmhost/{vmhostId}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update
     * Returns modified vmhost
     * @param {String} vmhostId ID of vmhost
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject68} opts.inlineObject68 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vmhost}
     */
    this.updateVmhost = function(vmhostId, opts) {
      return this.updateVmhostWithHttpInfo(vmhostId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
