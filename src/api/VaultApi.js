/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CredentialCertificate from '../model/CredentialCertificate';
import CredentialPassword from '../model/CredentialPassword';
import Event from '../model/Event';
import Vault from '../model/Vault';
import VaultActionResize from '../model/VaultActionResize';
import VaultActionSnapshot from '../model/VaultActionSnapshot';
import VaultCreate from '../model/VaultCreate';
import VaultDelete from '../model/VaultDelete';
import VaultPatchCredentialcertificateId from '../model/VaultPatchCredentialcertificateId';
import VaultPatchCredentialpasswordId from '../model/VaultPatchCredentialpasswordId';
import VaultPostAccessrights from '../model/VaultPostAccessrights';
import VaultPostCredentialcertificate from '../model/VaultPostCredentialcertificate';
import VaultPostCredentialpassword from '../model/VaultPostCredentialpassword';
import VaultServices from '../model/VaultServices';
import VaultUpdate from '../model/VaultUpdate';

/**
* Vault service.
* @module api/VaultApi
* @version 0.0.2
*/
export default class VaultApi {

    /**
    * Constructs a new VaultApi. 
    * @alias module:api/VaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * /actions/resize
     * Action resize
     * @param {String} vaultId ID of vault
     * @param {module:model/VaultActionResize} vaultActionResize 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vault} and HTTP response
     */
    vaultActionResizeWithHttpInfo(vaultId, vaultActionResize) {
      let postBody = vaultActionResize;

      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling vaultActionResize");
      }

      // verify the required parameter 'vaultActionResize' is set
      if (vaultActionResize === undefined || vaultActionResize === null) {
        throw new Error("Missing the required parameter 'vaultActionResize' when calling vaultActionResize");
      }


      let pathParams = {
        'vaultId': vaultId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Vault;

      return this.apiClient.callApi(
        '/vault/{vaultId}/actions/resize', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /actions/resize
     * Action resize
     * @param {String} vaultId ID of vault
     * @param {module:model/VaultActionResize} vaultActionResize 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vault}
     */
    vaultActionResize(vaultId, vaultActionResize) {
      return this.vaultActionResizeWithHttpInfo(vaultId, vaultActionResize)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/snapshot
     * Action snapshot
     * @param {String} vaultId ID of vault
     * @param {module:model/VaultActionSnapshot} vaultActionSnapshot 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vault} and HTTP response
     */
    vaultActionSnapshotWithHttpInfo(vaultId, vaultActionSnapshot) {
      let postBody = vaultActionSnapshot;

      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling vaultActionSnapshot");
      }

      // verify the required parameter 'vaultActionSnapshot' is set
      if (vaultActionSnapshot === undefined || vaultActionSnapshot === null) {
        throw new Error("Missing the required parameter 'vaultActionSnapshot' when calling vaultActionSnapshot");
      }


      let pathParams = {
        'vaultId': vaultId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Vault;

      return this.apiClient.callApi(
        '/vault/{vaultId}/actions/snapshot', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /actions/snapshot
     * Action snapshot
     * @param {String} vaultId ID of vault
     * @param {module:model/VaultActionSnapshot} vaultActionSnapshot 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vault}
     */
    vaultActionSnapshot(vaultId, vaultActionSnapshot) {
      return this.vaultActionSnapshotWithHttpInfo(vaultId, vaultActionSnapshot)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/start
     * Action start
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vault} and HTTP response
     */
    vaultActionStartWithHttpInfo(vaultId) {
      let postBody = null;

      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling vaultActionStart");
      }


      let pathParams = {
        'vaultId': vaultId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Vault;

      return this.apiClient.callApi(
        '/vault/{vaultId}/actions/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /actions/start
     * Action start
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vault}
     */
    vaultActionStart(vaultId) {
      return this.vaultActionStartWithHttpInfo(vaultId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/stop
     * Action stop
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vault} and HTTP response
     */
    vaultActionStopWithHttpInfo(vaultId) {
      let postBody = null;

      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling vaultActionStop");
      }


      let pathParams = {
        'vaultId': vaultId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Vault;

      return this.apiClient.callApi(
        '/vault/{vaultId}/actions/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /actions/stop
     * Action stop
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vault}
     */
    vaultActionStop(vaultId) {
      return this.vaultActionStopWithHttpInfo(vaultId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create
     * Create vault
     * @param {module:model/VaultCreate} vaultCreate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vault} and HTTP response
     */
    vaultCreateWithHttpInfo(vaultCreate) {
      let postBody = vaultCreate;

      // verify the required parameter 'vaultCreate' is set
      if (vaultCreate === undefined || vaultCreate === null) {
        throw new Error("Missing the required parameter 'vaultCreate' when calling vaultCreate");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Vault;

      return this.apiClient.callApi(
        '/vault', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create
     * Create vault
     * @param {module:model/VaultCreate} vaultCreate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vault}
     */
    vaultCreate(vaultCreate) {
      return this.vaultCreateWithHttpInfo(vaultCreate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete
     * @param {String} vaultId ID of vault
     * @param {module:model/VaultDelete} vaultDelete 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    vaultDeleteWithHttpInfo(vaultId, vaultDelete) {
      let postBody = vaultDelete;

      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling vaultDelete");
      }

      // verify the required parameter 'vaultDelete' is set
      if (vaultDelete === undefined || vaultDelete === null) {
        throw new Error("Missing the required parameter 'vaultDelete' when calling vaultDelete");
      }


      let pathParams = {
        'vaultId': vaultId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/vault/{vaultId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete
     * @param {String} vaultId ID of vault
     * @param {module:model/VaultDelete} vaultDelete 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    vaultDelete(vaultId, vaultDelete) {
      return this.vaultDeleteWithHttpInfo(vaultId, vaultDelete)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights/:identity
     * @param {String} vaultId ID of vault
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vault} and HTTP response
     */
    vaultDeleteAccessrightsIdentityWithHttpInfo(vaultId, identity) {
      let postBody = null;

      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling vaultDeleteAccessrightsIdentity");
      }

      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling vaultDeleteAccessrightsIdentity");
      }


      let pathParams = {
        'vaultId': vaultId,
        'identity': identity
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Vault;

      return this.apiClient.callApi(
        '/vault/{vaultId}/accessrights/{identity}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /accessrights/:identity
     * @param {String} vaultId ID of vault
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vault}
     */
    vaultDeleteAccessrightsIdentity(vaultId, identity) {
      return this.vaultDeleteAccessrightsIdentityWithHttpInfo(vaultId, identity)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/certificate/:id
     * @param {String} vaultId ID of vault
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vault} and HTTP response
     */
    vaultDeleteCredentialcertificateIdWithHttpInfo(vaultId, id) {
      let postBody = null;

      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling vaultDeleteCredentialcertificateId");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling vaultDeleteCredentialcertificateId");
      }


      let pathParams = {
        'vaultId': vaultId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Vault;

      return this.apiClient.callApi(
        '/vault/{vaultId}/credential/certificate/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /credential/certificate/:id
     * @param {String} vaultId ID of vault
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vault}
     */
    vaultDeleteCredentialcertificateId(vaultId, id) {
      return this.vaultDeleteCredentialcertificateIdWithHttpInfo(vaultId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password/:id
     * @param {String} vaultId ID of vault
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vault} and HTTP response
     */
    vaultDeleteCredentialpasswordIdWithHttpInfo(vaultId, id) {
      let postBody = null;

      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling vaultDeleteCredentialpasswordId");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling vaultDeleteCredentialpasswordId");
      }


      let pathParams = {
        'vaultId': vaultId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Vault;

      return this.apiClient.callApi(
        '/vault/{vaultId}/credential/password/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /credential/password/:id
     * @param {String} vaultId ID of vault
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vault}
     */
    vaultDeleteCredentialpasswordId(vaultId, id) {
      return this.vaultDeleteCredentialpasswordIdWithHttpInfo(vaultId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag/:key
     * @param {String} vaultId ID of vault
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    vaultDeleteTagKeyWithHttpInfo(vaultId, key) {
      let postBody = null;

      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling vaultDeleteTagKey");
      }

      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling vaultDeleteTagKey");
      }


      let pathParams = {
        'vaultId': vaultId,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/vault/{vaultId}/tag/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /tag/:key
     * @param {String} vaultId ID of vault
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    vaultDeleteTagKey(vaultId, key) {
      return this.vaultDeleteTagKeyWithHttpInfo(vaultId, key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/certificate/:id
     * @param {String} vaultId ID of vault
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CredentialCertificate} and HTTP response
     */
    vaultGetCredentialcertificateIdWithHttpInfo(vaultId, id) {
      let postBody = null;

      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling vaultGetCredentialcertificateId");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling vaultGetCredentialcertificateId");
      }


      let pathParams = {
        'vaultId': vaultId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CredentialCertificate;

      return this.apiClient.callApi(
        '/vault/{vaultId}/credential/certificate/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /credential/certificate/:id
     * @param {String} vaultId ID of vault
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CredentialCertificate}
     */
    vaultGetCredentialcertificateId(vaultId, id) {
      return this.vaultGetCredentialcertificateIdWithHttpInfo(vaultId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password/:id
     * @param {String} vaultId ID of vault
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CredentialPassword} and HTTP response
     */
    vaultGetCredentialpasswordIdWithHttpInfo(vaultId, id) {
      let postBody = null;

      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling vaultGetCredentialpasswordId");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling vaultGetCredentialpasswordId");
      }


      let pathParams = {
        'vaultId': vaultId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CredentialPassword;

      return this.apiClient.callApi(
        '/vault/{vaultId}/credential/password/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /credential/password/:id
     * @param {String} vaultId ID of vault
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CredentialPassword}
     */
    vaultGetCredentialpasswordId(vaultId, id) {
      return this.vaultGetCredentialpasswordIdWithHttpInfo(vaultId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services/:serviceId
     * @param {String} vaultId ID of vault
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VaultServices} and HTTP response
     */
    vaultGetServicesServiceIdWithHttpInfo(vaultId, serviceId) {
      let postBody = null;

      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling vaultGetServicesServiceId");
      }

      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling vaultGetServicesServiceId");
      }


      let pathParams = {
        'vaultId': vaultId,
        'serviceId': serviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VaultServices;

      return this.apiClient.callApi(
        '/vault/{vaultId}/services/{serviceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /services/:serviceId
     * @param {String} vaultId ID of vault
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VaultServices}
     */
    vaultGetServicesServiceId(vaultId, serviceId) {
      return this.vaultGetServicesServiceIdWithHttpInfo(vaultId, serviceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    vaultGetTagWithHttpInfo(vaultId) {
      let postBody = null;

      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling vaultGetTag");
      }


      let pathParams = {
        'vaultId': vaultId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/vault/{vaultId}/tag', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /tag
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    vaultGetTag(vaultId) {
      return this.vaultGetTagWithHttpInfo(vaultId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List
     * List vault
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Vault>} and HTTP response
     */
    vaultListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Vault];

      return this.apiClient.callApi(
        '/vault', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List
     * List vault
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Vault>}
     */
    vaultList(opts) {
      return this.vaultListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    vaultListAccessrightsWithHttpInfo(vaultId) {
      let postBody = null;

      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling vaultListAccessrights");
      }


      let pathParams = {
        'vaultId': vaultId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];

      return this.apiClient.callApi(
        '/vault/{vaultId}/accessrights', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /accessrights
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    vaultListAccessrights(vaultId) {
      return this.vaultListAccessrightsWithHttpInfo(vaultId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/certificate
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/CredentialCertificate>} and HTTP response
     */
    vaultListCredentialcertificateWithHttpInfo(vaultId) {
      let postBody = null;

      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling vaultListCredentialcertificate");
      }


      let pathParams = {
        'vaultId': vaultId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CredentialCertificate];

      return this.apiClient.callApi(
        '/vault/{vaultId}/credential/certificate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /credential/certificate
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/CredentialCertificate>}
     */
    vaultListCredentialcertificate(vaultId) {
      return this.vaultListCredentialcertificateWithHttpInfo(vaultId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/CredentialPassword>} and HTTP response
     */
    vaultListCredentialpasswordWithHttpInfo(vaultId) {
      let postBody = null;

      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling vaultListCredentialpassword");
      }


      let pathParams = {
        'vaultId': vaultId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CredentialPassword];

      return this.apiClient.callApi(
        '/vault/{vaultId}/credential/password', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /credential/password
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/CredentialPassword>}
     */
    vaultListCredentialpassword(vaultId) {
      return this.vaultListCredentialpasswordWithHttpInfo(vaultId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /queue
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Event>} and HTTP response
     */
    vaultListQueueWithHttpInfo(vaultId) {
      let postBody = null;

      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling vaultListQueue");
      }


      let pathParams = {
        'vaultId': vaultId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Event];

      return this.apiClient.callApi(
        '/vault/{vaultId}/queue', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /queue
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Event>}
     */
    vaultListQueue(vaultId) {
      return this.vaultListQueueWithHttpInfo(vaultId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/VaultServices>} and HTTP response
     */
    vaultListServicesWithHttpInfo(vaultId) {
      let postBody = null;

      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling vaultListServices");
      }


      let pathParams = {
        'vaultId': vaultId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [VaultServices];

      return this.apiClient.callApi(
        '/vault/{vaultId}/services', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /services
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/VaultServices>}
     */
    vaultListServices(vaultId) {
      return this.vaultListServicesWithHttpInfo(vaultId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/certificate/:id
     * @param {String} vaultId ID of vault
     * @param {String} id id
     * @param {module:model/VaultPatchCredentialcertificateId} vaultPatchCredentialcertificateId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CredentialCertificate} and HTTP response
     */
    vaultPatchCredentialcertificateIdWithHttpInfo(vaultId, id, vaultPatchCredentialcertificateId) {
      let postBody = vaultPatchCredentialcertificateId;

      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling vaultPatchCredentialcertificateId");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling vaultPatchCredentialcertificateId");
      }

      // verify the required parameter 'vaultPatchCredentialcertificateId' is set
      if (vaultPatchCredentialcertificateId === undefined || vaultPatchCredentialcertificateId === null) {
        throw new Error("Missing the required parameter 'vaultPatchCredentialcertificateId' when calling vaultPatchCredentialcertificateId");
      }


      let pathParams = {
        'vaultId': vaultId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CredentialCertificate;

      return this.apiClient.callApi(
        '/vault/{vaultId}/credential/certificate/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /credential/certificate/:id
     * @param {String} vaultId ID of vault
     * @param {String} id id
     * @param {module:model/VaultPatchCredentialcertificateId} vaultPatchCredentialcertificateId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CredentialCertificate}
     */
    vaultPatchCredentialcertificateId(vaultId, id, vaultPatchCredentialcertificateId) {
      return this.vaultPatchCredentialcertificateIdWithHttpInfo(vaultId, id, vaultPatchCredentialcertificateId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password/:id
     * @param {String} vaultId ID of vault
     * @param {String} id id
     * @param {module:model/VaultPatchCredentialpasswordId} vaultPatchCredentialpasswordId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CredentialPassword} and HTTP response
     */
    vaultPatchCredentialpasswordIdWithHttpInfo(vaultId, id, vaultPatchCredentialpasswordId) {
      let postBody = vaultPatchCredentialpasswordId;

      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling vaultPatchCredentialpasswordId");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling vaultPatchCredentialpasswordId");
      }

      // verify the required parameter 'vaultPatchCredentialpasswordId' is set
      if (vaultPatchCredentialpasswordId === undefined || vaultPatchCredentialpasswordId === null) {
        throw new Error("Missing the required parameter 'vaultPatchCredentialpasswordId' when calling vaultPatchCredentialpasswordId");
      }


      let pathParams = {
        'vaultId': vaultId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CredentialPassword;

      return this.apiClient.callApi(
        '/vault/{vaultId}/credential/password/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /credential/password/:id
     * @param {String} vaultId ID of vault
     * @param {String} id id
     * @param {module:model/VaultPatchCredentialpasswordId} vaultPatchCredentialpasswordId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CredentialPassword}
     */
    vaultPatchCredentialpasswordId(vaultId, id, vaultPatchCredentialpasswordId) {
      return this.vaultPatchCredentialpasswordIdWithHttpInfo(vaultId, id, vaultPatchCredentialpasswordId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} vaultId ID of vault
     * @param {Object} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    vaultPatchTagWithHttpInfo(vaultId, body) {
      let postBody = body;

      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling vaultPatchTag");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling vaultPatchTag");
      }


      let pathParams = {
        'vaultId': vaultId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/vault/{vaultId}/tag', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /tag
     * @param {String} vaultId ID of vault
     * @param {Object} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    vaultPatchTag(vaultId, body) {
      return this.vaultPatchTagWithHttpInfo(vaultId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} vaultId ID of vault
     * @param {module:model/VaultPostAccessrights} vaultPostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    vaultPostAccessrightsWithHttpInfo(vaultId, vaultPostAccessrights) {
      let postBody = vaultPostAccessrights;

      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling vaultPostAccessrights");
      }

      // verify the required parameter 'vaultPostAccessrights' is set
      if (vaultPostAccessrights === undefined || vaultPostAccessrights === null) {
        throw new Error("Missing the required parameter 'vaultPostAccessrights' when calling vaultPostAccessrights");
      }


      let pathParams = {
        'vaultId': vaultId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/vault/{vaultId}/accessrights', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /accessrights
     * @param {String} vaultId ID of vault
     * @param {module:model/VaultPostAccessrights} vaultPostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    vaultPostAccessrights(vaultId, vaultPostAccessrights) {
      return this.vaultPostAccessrightsWithHttpInfo(vaultId, vaultPostAccessrights)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/certificate
     * @param {String} vaultId ID of vault
     * @param {module:model/VaultPostCredentialcertificate} vaultPostCredentialcertificate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CredentialCertificate} and HTTP response
     */
    vaultPostCredentialcertificateWithHttpInfo(vaultId, vaultPostCredentialcertificate) {
      let postBody = vaultPostCredentialcertificate;

      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling vaultPostCredentialcertificate");
      }

      // verify the required parameter 'vaultPostCredentialcertificate' is set
      if (vaultPostCredentialcertificate === undefined || vaultPostCredentialcertificate === null) {
        throw new Error("Missing the required parameter 'vaultPostCredentialcertificate' when calling vaultPostCredentialcertificate");
      }


      let pathParams = {
        'vaultId': vaultId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CredentialCertificate;

      return this.apiClient.callApi(
        '/vault/{vaultId}/credential/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /credential/certificate
     * @param {String} vaultId ID of vault
     * @param {module:model/VaultPostCredentialcertificate} vaultPostCredentialcertificate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CredentialCertificate}
     */
    vaultPostCredentialcertificate(vaultId, vaultPostCredentialcertificate) {
      return this.vaultPostCredentialcertificateWithHttpInfo(vaultId, vaultPostCredentialcertificate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password
     * @param {String} vaultId ID of vault
     * @param {module:model/VaultPostCredentialpassword} vaultPostCredentialpassword 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CredentialPassword} and HTTP response
     */
    vaultPostCredentialpasswordWithHttpInfo(vaultId, vaultPostCredentialpassword) {
      let postBody = vaultPostCredentialpassword;

      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling vaultPostCredentialpassword");
      }

      // verify the required parameter 'vaultPostCredentialpassword' is set
      if (vaultPostCredentialpassword === undefined || vaultPostCredentialpassword === null) {
        throw new Error("Missing the required parameter 'vaultPostCredentialpassword' when calling vaultPostCredentialpassword");
      }


      let pathParams = {
        'vaultId': vaultId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CredentialPassword;

      return this.apiClient.callApi(
        '/vault/{vaultId}/credential/password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /credential/password
     * @param {String} vaultId ID of vault
     * @param {module:model/VaultPostCredentialpassword} vaultPostCredentialpassword 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CredentialPassword}
     */
    vaultPostCredentialpassword(vaultId, vaultPostCredentialpassword) {
      return this.vaultPostCredentialpasswordWithHttpInfo(vaultId, vaultPostCredentialpassword)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get
     * Returns a single vault
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vault} and HTTP response
     */
    vaultShowWithHttpInfo(vaultId) {
      let postBody = null;

      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling vaultShow");
      }


      let pathParams = {
        'vaultId': vaultId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Vault;

      return this.apiClient.callApi(
        '/vault/{vaultId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get
     * Returns a single vault
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vault}
     */
    vaultShow(vaultId) {
      return this.vaultShowWithHttpInfo(vaultId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update
     * Returns modified vault
     * @param {String} vaultId ID of vault
     * @param {module:model/VaultUpdate} vaultUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vault} and HTTP response
     */
    vaultUpdateWithHttpInfo(vaultId, vaultUpdate) {
      let postBody = vaultUpdate;

      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling vaultUpdate");
      }

      // verify the required parameter 'vaultUpdate' is set
      if (vaultUpdate === undefined || vaultUpdate === null) {
        throw new Error("Missing the required parameter 'vaultUpdate' when calling vaultUpdate");
      }


      let pathParams = {
        'vaultId': vaultId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Vault;

      return this.apiClient.callApi(
        '/vault/{vaultId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update
     * Returns modified vault
     * @param {String} vaultId ID of vault
     * @param {module:model/VaultUpdate} vaultUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vault}
     */
    vaultUpdate(vaultId, vaultUpdate) {
      return this.vaultUpdateWithHttpInfo(vaultId, vaultUpdate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
