/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CredentialCertificate', 'model/CredentialPassword', 'model/Event', 'model/InlineObject47', 'model/InlineObject48', 'model/InlineObject49', 'model/InlineObject50', 'model/InlineObject51', 'model/InlineObject52', 'model/InlineObject53', 'model/Vault', 'model/VaultServices'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CredentialCertificate'), require('../model/CredentialPassword'), require('../model/Event'), require('../model/InlineObject47'), require('../model/InlineObject48'), require('../model/InlineObject49'), require('../model/InlineObject50'), require('../model/InlineObject51'), require('../model/InlineObject52'), require('../model/InlineObject53'), require('../model/Vault'), require('../model/VaultServices'));
  } else {
    // Browser globals (root is window)
    if (!root.HyperOneApi) {
      root.HyperOneApi = {};
    }
    root.HyperOneApi.VaultApi = factory(root.HyperOneApi.ApiClient, root.HyperOneApi.CredentialCertificate, root.HyperOneApi.CredentialPassword, root.HyperOneApi.Event, root.HyperOneApi.InlineObject47, root.HyperOneApi.InlineObject48, root.HyperOneApi.InlineObject49, root.HyperOneApi.InlineObject50, root.HyperOneApi.InlineObject51, root.HyperOneApi.InlineObject52, root.HyperOneApi.InlineObject53, root.HyperOneApi.Vault, root.HyperOneApi.VaultServices);
  }
}(this, function(ApiClient, CredentialCertificate, CredentialPassword, Event, InlineObject47, InlineObject48, InlineObject49, InlineObject50, InlineObject51, InlineObject52, InlineObject53, Vault, VaultServices) {
  'use strict';

  /**
   * Vault service.
   * @module api/VaultApi
   * @version 1
   */

  /**
   * Constructs a new VaultApi. 
   * @alias module:api/VaultApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * /actions/resize
     * Action resize
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vault} and HTTP response
     */
    this.actionVaultResizeWithHttpInfo = function(vaultId) {
      var postBody = null;

      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling actionVaultResize");
      }


      var pathParams = {
        'vaultId': vaultId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Vault;

      return this.apiClient.callApi(
        '/vault/{vaultId}/actions/resize', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /actions/resize
     * Action resize
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vault}
     */
    this.actionVaultResize = function(vaultId) {
      return this.actionVaultResizeWithHttpInfo(vaultId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/snapshot
     * Action snapshot
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vault} and HTTP response
     */
    this.actionVaultSnapshotWithHttpInfo = function(vaultId) {
      var postBody = null;

      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling actionVaultSnapshot");
      }


      var pathParams = {
        'vaultId': vaultId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Vault;

      return this.apiClient.callApi(
        '/vault/{vaultId}/actions/snapshot', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /actions/snapshot
     * Action snapshot
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vault}
     */
    this.actionVaultSnapshot = function(vaultId) {
      return this.actionVaultSnapshotWithHttpInfo(vaultId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/start
     * Action start
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vault} and HTTP response
     */
    this.actionVaultStartWithHttpInfo = function(vaultId) {
      var postBody = null;

      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling actionVaultStart");
      }


      var pathParams = {
        'vaultId': vaultId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Vault;

      return this.apiClient.callApi(
        '/vault/{vaultId}/actions/start', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /actions/start
     * Action start
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vault}
     */
    this.actionVaultStart = function(vaultId) {
      return this.actionVaultStartWithHttpInfo(vaultId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/stop
     * Action stop
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vault} and HTTP response
     */
    this.actionVaultStopWithHttpInfo = function(vaultId) {
      var postBody = null;

      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling actionVaultStop");
      }


      var pathParams = {
        'vaultId': vaultId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Vault;

      return this.apiClient.callApi(
        '/vault/{vaultId}/actions/stop', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /actions/stop
     * Action stop
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vault}
     */
    this.actionVaultStop = function(vaultId) {
      return this.actionVaultStopWithHttpInfo(vaultId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create
     * Create vault
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject47} opts.inlineObject47 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vault} and HTTP response
     */
    this.createVaultWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['inlineObject47'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Vault;

      return this.apiClient.callApi(
        '/vault', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create
     * Create vault
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject47} opts.inlineObject47 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vault}
     */
    this.createVault = function(opts) {
      return this.createVaultWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteVaultWithHttpInfo = function(vaultId) {
      var postBody = null;

      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling deleteVault");
      }


      var pathParams = {
        'vaultId': vaultId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/vault/{vaultId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteVault = function(vaultId) {
      return this.deleteVaultWithHttpInfo(vaultId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List
     * List vault
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Vault>} and HTTP response
     */
    this.listVaultWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'name': opts['name'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Vault];

      return this.apiClient.callApi(
        '/vault', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List
     * List vault
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Vault>}
     */
    this.listVault = function(opts) {
      return this.listVaultWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights/:identity
     * @param {String} vaultId ID of vault
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vault} and HTTP response
     */
    this.operationVaultDeleteaccessrightsIdentityWithHttpInfo = function(vaultId, identity) {
      var postBody = null;

      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling operationVaultDeleteaccessrightsIdentity");
      }

      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling operationVaultDeleteaccessrightsIdentity");
      }


      var pathParams = {
        'vaultId': vaultId,
        'identity': identity
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Vault;

      return this.apiClient.callApi(
        '/vault/{vaultId}/accessrights/{identity}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /accessrights/:identity
     * @param {String} vaultId ID of vault
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vault}
     */
    this.operationVaultDeleteaccessrightsIdentity = function(vaultId, identity) {
      return this.operationVaultDeleteaccessrightsIdentityWithHttpInfo(vaultId, identity)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/certificate/:id
     * @param {String} vaultId ID of vault
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vault} and HTTP response
     */
    this.operationVaultDeletecredentialcertificateIdWithHttpInfo = function(vaultId, id) {
      var postBody = null;

      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling operationVaultDeletecredentialcertificateId");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling operationVaultDeletecredentialcertificateId");
      }


      var pathParams = {
        'vaultId': vaultId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Vault;

      return this.apiClient.callApi(
        '/vault/{vaultId}/credential/certificate/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /credential/certificate/:id
     * @param {String} vaultId ID of vault
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vault}
     */
    this.operationVaultDeletecredentialcertificateId = function(vaultId, id) {
      return this.operationVaultDeletecredentialcertificateIdWithHttpInfo(vaultId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password/:id
     * @param {String} vaultId ID of vault
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vault} and HTTP response
     */
    this.operationVaultDeletecredentialpasswordIdWithHttpInfo = function(vaultId, id) {
      var postBody = null;

      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling operationVaultDeletecredentialpasswordId");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling operationVaultDeletecredentialpasswordId");
      }


      var pathParams = {
        'vaultId': vaultId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Vault;

      return this.apiClient.callApi(
        '/vault/{vaultId}/credential/password/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /credential/password/:id
     * @param {String} vaultId ID of vault
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vault}
     */
    this.operationVaultDeletecredentialpasswordId = function(vaultId, id) {
      return this.operationVaultDeletecredentialpasswordIdWithHttpInfo(vaultId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag/:key
     * @param {String} vaultId ID of vault
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    this.operationVaultDeletetagKeyWithHttpInfo = function(vaultId, key) {
      var postBody = null;

      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling operationVaultDeletetagKey");
      }

      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling operationVaultDeletetagKey");
      }


      var pathParams = {
        'vaultId': vaultId,
        'key': key
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = {'String': 'String'};

      return this.apiClient.callApi(
        '/vault/{vaultId}/tag/{key}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /tag/:key
     * @param {String} vaultId ID of vault
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    this.operationVaultDeletetagKey = function(vaultId, key) {
      return this.operationVaultDeletetagKeyWithHttpInfo(vaultId, key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/certificate/:id
     * @param {String} vaultId ID of vault
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CredentialCertificate} and HTTP response
     */
    this.operationVaultGetcredentialcertificateIdWithHttpInfo = function(vaultId, id) {
      var postBody = null;

      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling operationVaultGetcredentialcertificateId");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling operationVaultGetcredentialcertificateId");
      }


      var pathParams = {
        'vaultId': vaultId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CredentialCertificate;

      return this.apiClient.callApi(
        '/vault/{vaultId}/credential/certificate/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /credential/certificate/:id
     * @param {String} vaultId ID of vault
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CredentialCertificate}
     */
    this.operationVaultGetcredentialcertificateId = function(vaultId, id) {
      return this.operationVaultGetcredentialcertificateIdWithHttpInfo(vaultId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password/:id
     * @param {String} vaultId ID of vault
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CredentialPassword} and HTTP response
     */
    this.operationVaultGetcredentialpasswordIdWithHttpInfo = function(vaultId, id) {
      var postBody = null;

      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling operationVaultGetcredentialpasswordId");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling operationVaultGetcredentialpasswordId");
      }


      var pathParams = {
        'vaultId': vaultId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CredentialPassword;

      return this.apiClient.callApi(
        '/vault/{vaultId}/credential/password/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /credential/password/:id
     * @param {String} vaultId ID of vault
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CredentialPassword}
     */
    this.operationVaultGetcredentialpasswordId = function(vaultId, id) {
      return this.operationVaultGetcredentialpasswordIdWithHttpInfo(vaultId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services/:serviceId
     * @param {String} vaultId ID of vault
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VaultServices} and HTTP response
     */
    this.operationVaultGetservicesServiceIdWithHttpInfo = function(vaultId, serviceId) {
      var postBody = null;

      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling operationVaultGetservicesServiceId");
      }

      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling operationVaultGetservicesServiceId");
      }


      var pathParams = {
        'vaultId': vaultId,
        'serviceId': serviceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = VaultServices;

      return this.apiClient.callApi(
        '/vault/{vaultId}/services/{serviceId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /services/:serviceId
     * @param {String} vaultId ID of vault
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VaultServices}
     */
    this.operationVaultGetservicesServiceId = function(vaultId, serviceId) {
      return this.operationVaultGetservicesServiceIdWithHttpInfo(vaultId, serviceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag/
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    this.operationVaultGettagWithHttpInfo = function(vaultId) {
      var postBody = null;

      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling operationVaultGettag");
      }


      var pathParams = {
        'vaultId': vaultId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = {'String': 'String'};

      return this.apiClient.callApi(
        '/vault/{vaultId}/tag/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /tag/
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    this.operationVaultGettag = function(vaultId) {
      return this.operationVaultGettagWithHttpInfo(vaultId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights/
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    this.operationVaultListaccessrightsWithHttpInfo = function(vaultId) {
      var postBody = null;

      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling operationVaultListaccessrights");
      }


      var pathParams = {
        'vaultId': vaultId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/vault/{vaultId}/accessrights/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /accessrights/
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    this.operationVaultListaccessrights = function(vaultId) {
      return this.operationVaultListaccessrightsWithHttpInfo(vaultId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/certificate
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/CredentialCertificate>} and HTTP response
     */
    this.operationVaultListcredentialcertificateWithHttpInfo = function(vaultId) {
      var postBody = null;

      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling operationVaultListcredentialcertificate");
      }


      var pathParams = {
        'vaultId': vaultId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [CredentialCertificate];

      return this.apiClient.callApi(
        '/vault/{vaultId}/credential/certificate', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /credential/certificate
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/CredentialCertificate>}
     */
    this.operationVaultListcredentialcertificate = function(vaultId) {
      return this.operationVaultListcredentialcertificateWithHttpInfo(vaultId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/CredentialPassword>} and HTTP response
     */
    this.operationVaultListcredentialpasswordWithHttpInfo = function(vaultId) {
      var postBody = null;

      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling operationVaultListcredentialpassword");
      }


      var pathParams = {
        'vaultId': vaultId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [CredentialPassword];

      return this.apiClient.callApi(
        '/vault/{vaultId}/credential/password', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /credential/password
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/CredentialPassword>}
     */
    this.operationVaultListcredentialpassword = function(vaultId) {
      return this.operationVaultListcredentialpasswordWithHttpInfo(vaultId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /queue/
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Event>} and HTTP response
     */
    this.operationVaultListqueueWithHttpInfo = function(vaultId) {
      var postBody = null;

      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling operationVaultListqueue");
      }


      var pathParams = {
        'vaultId': vaultId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Event];

      return this.apiClient.callApi(
        '/vault/{vaultId}/queue/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /queue/
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Event>}
     */
    this.operationVaultListqueue = function(vaultId) {
      return this.operationVaultListqueueWithHttpInfo(vaultId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services/
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/VaultServices>} and HTTP response
     */
    this.operationVaultListservicesWithHttpInfo = function(vaultId) {
      var postBody = null;

      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling operationVaultListservices");
      }


      var pathParams = {
        'vaultId': vaultId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [VaultServices];

      return this.apiClient.callApi(
        '/vault/{vaultId}/services/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /services/
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/VaultServices>}
     */
    this.operationVaultListservices = function(vaultId) {
      return this.operationVaultListservicesWithHttpInfo(vaultId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/certificate/:id
     * @param {String} vaultId ID of vault
     * @param {String} id id
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject52} opts.inlineObject52 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CredentialCertificate} and HTTP response
     */
    this.operationVaultPatchcredentialcertificateIdWithHttpInfo = function(vaultId, id, opts) {
      opts = opts || {};
      var postBody = opts['inlineObject52'];

      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling operationVaultPatchcredentialcertificateId");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling operationVaultPatchcredentialcertificateId");
      }


      var pathParams = {
        'vaultId': vaultId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CredentialCertificate;

      return this.apiClient.callApi(
        '/vault/{vaultId}/credential/certificate/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /credential/certificate/:id
     * @param {String} vaultId ID of vault
     * @param {String} id id
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject52} opts.inlineObject52 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CredentialCertificate}
     */
    this.operationVaultPatchcredentialcertificateId = function(vaultId, id, opts) {
      return this.operationVaultPatchcredentialcertificateIdWithHttpInfo(vaultId, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password/:id
     * @param {String} vaultId ID of vault
     * @param {String} id id
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject50} opts.inlineObject50 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CredentialPassword} and HTTP response
     */
    this.operationVaultPatchcredentialpasswordIdWithHttpInfo = function(vaultId, id, opts) {
      opts = opts || {};
      var postBody = opts['inlineObject50'];

      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling operationVaultPatchcredentialpasswordId");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling operationVaultPatchcredentialpasswordId");
      }


      var pathParams = {
        'vaultId': vaultId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CredentialPassword;

      return this.apiClient.callApi(
        '/vault/{vaultId}/credential/password/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /credential/password/:id
     * @param {String} vaultId ID of vault
     * @param {String} id id
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject50} opts.inlineObject50 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CredentialPassword}
     */
    this.operationVaultPatchcredentialpasswordId = function(vaultId, id, opts) {
      return this.operationVaultPatchcredentialpasswordIdWithHttpInfo(vaultId, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag/
     * @param {String} vaultId ID of vault
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    this.operationVaultPatchtagWithHttpInfo = function(vaultId, requestBody) {
      var postBody = requestBody;

      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling operationVaultPatchtag");
      }

      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling operationVaultPatchtag");
      }


      var pathParams = {
        'vaultId': vaultId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = {'String': 'String'};

      return this.apiClient.callApi(
        '/vault/{vaultId}/tag/', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /tag/
     * @param {String} vaultId ID of vault
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    this.operationVaultPatchtag = function(vaultId, requestBody) {
      return this.operationVaultPatchtagWithHttpInfo(vaultId, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights/
     * @param {String} vaultId ID of vault
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject53} opts.inlineObject53 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    this.operationVaultPostaccessrightsWithHttpInfo = function(vaultId, opts) {
      opts = opts || {};
      var postBody = opts['inlineObject53'];

      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling operationVaultPostaccessrights");
      }


      var pathParams = {
        'vaultId': vaultId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/vault/{vaultId}/accessrights/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /accessrights/
     * @param {String} vaultId ID of vault
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject53} opts.inlineObject53 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    this.operationVaultPostaccessrights = function(vaultId, opts) {
      return this.operationVaultPostaccessrightsWithHttpInfo(vaultId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/certificate
     * @param {String} vaultId ID of vault
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject51} opts.inlineObject51 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CredentialCertificate} and HTTP response
     */
    this.operationVaultPostcredentialcertificateWithHttpInfo = function(vaultId, opts) {
      opts = opts || {};
      var postBody = opts['inlineObject51'];

      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling operationVaultPostcredentialcertificate");
      }


      var pathParams = {
        'vaultId': vaultId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CredentialCertificate;

      return this.apiClient.callApi(
        '/vault/{vaultId}/credential/certificate', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /credential/certificate
     * @param {String} vaultId ID of vault
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject51} opts.inlineObject51 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CredentialCertificate}
     */
    this.operationVaultPostcredentialcertificate = function(vaultId, opts) {
      return this.operationVaultPostcredentialcertificateWithHttpInfo(vaultId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password
     * @param {String} vaultId ID of vault
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject49} opts.inlineObject49 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CredentialPassword} and HTTP response
     */
    this.operationVaultPostcredentialpasswordWithHttpInfo = function(vaultId, opts) {
      opts = opts || {};
      var postBody = opts['inlineObject49'];

      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling operationVaultPostcredentialpassword");
      }


      var pathParams = {
        'vaultId': vaultId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CredentialPassword;

      return this.apiClient.callApi(
        '/vault/{vaultId}/credential/password', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /credential/password
     * @param {String} vaultId ID of vault
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject49} opts.inlineObject49 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CredentialPassword}
     */
    this.operationVaultPostcredentialpassword = function(vaultId, opts) {
      return this.operationVaultPostcredentialpasswordWithHttpInfo(vaultId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get
     * Returns a single vault
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vault} and HTTP response
     */
    this.showVaultWithHttpInfo = function(vaultId) {
      var postBody = null;

      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling showVault");
      }


      var pathParams = {
        'vaultId': vaultId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Vault;

      return this.apiClient.callApi(
        '/vault/{vaultId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get
     * Returns a single vault
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vault}
     */
    this.showVault = function(vaultId) {
      return this.showVaultWithHttpInfo(vaultId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update
     * Returns modified vault
     * @param {String} vaultId ID of vault
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject48} opts.inlineObject48 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vault} and HTTP response
     */
    this.updateVaultWithHttpInfo = function(vaultId, opts) {
      opts = opts || {};
      var postBody = opts['inlineObject48'];

      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling updateVault");
      }


      var pathParams = {
        'vaultId': vaultId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Vault;

      return this.apiClient.callApi(
        '/vault/{vaultId}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update
     * Returns modified vault
     * @param {String} vaultId ID of vault
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject48} opts.inlineObject48 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vault}
     */
    this.updateVault = function(vaultId, opts) {
      return this.updateVaultWithHttpInfo(vaultId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
