/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CredentialCertificate', 'model/CredentialPassword', 'model/Event', 'model/InlineResponse400', 'model/Vault', 'model/VaultActionResize', 'model/VaultActionSnapshot', 'model/VaultCreate', 'model/VaultDelete', 'model/VaultPatchCredentialcertificateId', 'model/VaultPatchCredentialpasswordId', 'model/VaultPostAccessrights', 'model/VaultPostCredentialcertificate', 'model/VaultPostCredentialpassword', 'model/VaultServices', 'model/VaultUpdate'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CredentialCertificate'), require('../model/CredentialPassword'), require('../model/Event'), require('../model/InlineResponse400'), require('../model/Vault'), require('../model/VaultActionResize'), require('../model/VaultActionSnapshot'), require('../model/VaultCreate'), require('../model/VaultDelete'), require('../model/VaultPatchCredentialcertificateId'), require('../model/VaultPatchCredentialpasswordId'), require('../model/VaultPostAccessrights'), require('../model/VaultPostCredentialcertificate'), require('../model/VaultPostCredentialpassword'), require('../model/VaultServices'), require('../model/VaultUpdate'));
  } else {
    // Browser globals (root is window)
    if (!root.HyperOneApi) {
      root.HyperOneApi = {};
    }
    root.HyperOneApi.VaultApi = factory(root.HyperOneApi.ApiClient, root.HyperOneApi.CredentialCertificate, root.HyperOneApi.CredentialPassword, root.HyperOneApi.Event, root.HyperOneApi.InlineResponse400, root.HyperOneApi.Vault, root.HyperOneApi.VaultActionResize, root.HyperOneApi.VaultActionSnapshot, root.HyperOneApi.VaultCreate, root.HyperOneApi.VaultDelete, root.HyperOneApi.VaultPatchCredentialcertificateId, root.HyperOneApi.VaultPatchCredentialpasswordId, root.HyperOneApi.VaultPostAccessrights, root.HyperOneApi.VaultPostCredentialcertificate, root.HyperOneApi.VaultPostCredentialpassword, root.HyperOneApi.VaultServices, root.HyperOneApi.VaultUpdate);
  }
}(this, function(ApiClient, CredentialCertificate, CredentialPassword, Event, InlineResponse400, Vault, VaultActionResize, VaultActionSnapshot, VaultCreate, VaultDelete, VaultPatchCredentialcertificateId, VaultPatchCredentialpasswordId, VaultPostAccessrights, VaultPostCredentialcertificate, VaultPostCredentialpassword, VaultServices, VaultUpdate) {
  'use strict';

  /**
   * Vault service.
   * @module api/VaultApi
   * @version 0.0.2
   */

  /**
   * Constructs a new VaultApi. 
   * @alias module:api/VaultApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * /actions/resize
     * Action resize
     * @param {String} vaultId ID of vault
     * @param {module:model/VaultActionResize} vaultActionResize 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vault} and HTTP response
     */
    this.vaultActionResizeWithHttpInfo = function(vaultId, vaultActionResize) {
      var postBody = vaultActionResize;
      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling vaultActionResize");
      }
      // verify the required parameter 'vaultActionResize' is set
      if (vaultActionResize === undefined || vaultActionResize === null) {
        throw new Error("Missing the required parameter 'vaultActionResize' when calling vaultActionResize");
      }

      var pathParams = {
        'vaultId': vaultId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Vault;
      return this.apiClient.callApi(
        '/vault/{vaultId}/actions/resize', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /actions/resize
     * Action resize
     * @param {String} vaultId ID of vault
     * @param {module:model/VaultActionResize} vaultActionResize 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vault}
     */
    this.vaultActionResize = function(vaultId, vaultActionResize) {
      return this.vaultActionResizeWithHttpInfo(vaultId, vaultActionResize)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/snapshot
     * Action snapshot
     * @param {String} vaultId ID of vault
     * @param {module:model/VaultActionSnapshot} vaultActionSnapshot 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vault} and HTTP response
     */
    this.vaultActionSnapshotWithHttpInfo = function(vaultId, vaultActionSnapshot) {
      var postBody = vaultActionSnapshot;
      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling vaultActionSnapshot");
      }
      // verify the required parameter 'vaultActionSnapshot' is set
      if (vaultActionSnapshot === undefined || vaultActionSnapshot === null) {
        throw new Error("Missing the required parameter 'vaultActionSnapshot' when calling vaultActionSnapshot");
      }

      var pathParams = {
        'vaultId': vaultId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Vault;
      return this.apiClient.callApi(
        '/vault/{vaultId}/actions/snapshot', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /actions/snapshot
     * Action snapshot
     * @param {String} vaultId ID of vault
     * @param {module:model/VaultActionSnapshot} vaultActionSnapshot 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vault}
     */
    this.vaultActionSnapshot = function(vaultId, vaultActionSnapshot) {
      return this.vaultActionSnapshotWithHttpInfo(vaultId, vaultActionSnapshot)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/start
     * Action start
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vault} and HTTP response
     */
    this.vaultActionStartWithHttpInfo = function(vaultId) {
      var postBody = null;
      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling vaultActionStart");
      }

      var pathParams = {
        'vaultId': vaultId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Vault;
      return this.apiClient.callApi(
        '/vault/{vaultId}/actions/start', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /actions/start
     * Action start
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vault}
     */
    this.vaultActionStart = function(vaultId) {
      return this.vaultActionStartWithHttpInfo(vaultId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/stop
     * Action stop
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vault} and HTTP response
     */
    this.vaultActionStopWithHttpInfo = function(vaultId) {
      var postBody = null;
      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling vaultActionStop");
      }

      var pathParams = {
        'vaultId': vaultId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Vault;
      return this.apiClient.callApi(
        '/vault/{vaultId}/actions/stop', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /actions/stop
     * Action stop
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vault}
     */
    this.vaultActionStop = function(vaultId) {
      return this.vaultActionStopWithHttpInfo(vaultId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create
     * Create vault
     * @param {module:model/VaultCreate} vaultCreate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vault} and HTTP response
     */
    this.vaultCreateWithHttpInfo = function(vaultCreate) {
      var postBody = vaultCreate;
      // verify the required parameter 'vaultCreate' is set
      if (vaultCreate === undefined || vaultCreate === null) {
        throw new Error("Missing the required parameter 'vaultCreate' when calling vaultCreate");
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Vault;
      return this.apiClient.callApi(
        '/vault', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create
     * Create vault
     * @param {module:model/VaultCreate} vaultCreate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vault}
     */
    this.vaultCreate = function(vaultCreate) {
      return this.vaultCreateWithHttpInfo(vaultCreate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete
     * @param {String} vaultId ID of vault
     * @param {module:model/VaultDelete} vaultDelete 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.vaultDeleteWithHttpInfo = function(vaultId, vaultDelete) {
      var postBody = vaultDelete;
      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling vaultDelete");
      }
      // verify the required parameter 'vaultDelete' is set
      if (vaultDelete === undefined || vaultDelete === null) {
        throw new Error("Missing the required parameter 'vaultDelete' when calling vaultDelete");
      }

      var pathParams = {
        'vaultId': vaultId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;
      return this.apiClient.callApi(
        '/vault/{vaultId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete
     * @param {String} vaultId ID of vault
     * @param {module:model/VaultDelete} vaultDelete 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.vaultDelete = function(vaultId, vaultDelete) {
      return this.vaultDeleteWithHttpInfo(vaultId, vaultDelete)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights/:identity
     * @param {String} vaultId ID of vault
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vault} and HTTP response
     */
    this.vaultDeleteAccessrightsIdentityWithHttpInfo = function(vaultId, identity) {
      var postBody = null;
      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling vaultDeleteAccessrightsIdentity");
      }
      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling vaultDeleteAccessrightsIdentity");
      }

      var pathParams = {
        'vaultId': vaultId,
        'identity': identity
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Vault;
      return this.apiClient.callApi(
        '/vault/{vaultId}/accessrights/{identity}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights/:identity
     * @param {String} vaultId ID of vault
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vault}
     */
    this.vaultDeleteAccessrightsIdentity = function(vaultId, identity) {
      return this.vaultDeleteAccessrightsIdentityWithHttpInfo(vaultId, identity)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/certificate/:id
     * @param {String} vaultId ID of vault
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CredentialCertificate} and HTTP response
     */
    this.vaultDeleteCredentialcertificateIdWithHttpInfo = function(vaultId, id) {
      var postBody = null;
      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling vaultDeleteCredentialcertificateId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling vaultDeleteCredentialcertificateId");
      }

      var pathParams = {
        'vaultId': vaultId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CredentialCertificate;
      return this.apiClient.callApi(
        '/vault/{vaultId}/credential/certificate/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/certificate/:id
     * @param {String} vaultId ID of vault
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CredentialCertificate}
     */
    this.vaultDeleteCredentialcertificateId = function(vaultId, id) {
      return this.vaultDeleteCredentialcertificateIdWithHttpInfo(vaultId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password/:id
     * @param {String} vaultId ID of vault
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vault} and HTTP response
     */
    this.vaultDeleteCredentialpasswordIdWithHttpInfo = function(vaultId, id) {
      var postBody = null;
      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling vaultDeleteCredentialpasswordId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling vaultDeleteCredentialpasswordId");
      }

      var pathParams = {
        'vaultId': vaultId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Vault;
      return this.apiClient.callApi(
        '/vault/{vaultId}/credential/password/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/password/:id
     * @param {String} vaultId ID of vault
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vault}
     */
    this.vaultDeleteCredentialpasswordId = function(vaultId, id) {
      return this.vaultDeleteCredentialpasswordIdWithHttpInfo(vaultId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag/:key
     * @param {String} vaultId ID of vault
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    this.vaultDeleteTagKeyWithHttpInfo = function(vaultId, key) {
      var postBody = null;
      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling vaultDeleteTagKey");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling vaultDeleteTagKey");
      }

      var pathParams = {
        'vaultId': vaultId,
        'key': key
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi(
        '/vault/{vaultId}/tag/{key}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag/:key
     * @param {String} vaultId ID of vault
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    this.vaultDeleteTagKey = function(vaultId, key) {
      return this.vaultDeleteTagKeyWithHttpInfo(vaultId, key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/certificate/:id
     * @param {String} vaultId ID of vault
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CredentialCertificate} and HTTP response
     */
    this.vaultGetCredentialcertificateIdWithHttpInfo = function(vaultId, id) {
      var postBody = null;
      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling vaultGetCredentialcertificateId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling vaultGetCredentialcertificateId");
      }

      var pathParams = {
        'vaultId': vaultId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CredentialCertificate;
      return this.apiClient.callApi(
        '/vault/{vaultId}/credential/certificate/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/certificate/:id
     * @param {String} vaultId ID of vault
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CredentialCertificate}
     */
    this.vaultGetCredentialcertificateId = function(vaultId, id) {
      return this.vaultGetCredentialcertificateIdWithHttpInfo(vaultId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password/:id
     * @param {String} vaultId ID of vault
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CredentialPassword} and HTTP response
     */
    this.vaultGetCredentialpasswordIdWithHttpInfo = function(vaultId, id) {
      var postBody = null;
      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling vaultGetCredentialpasswordId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling vaultGetCredentialpasswordId");
      }

      var pathParams = {
        'vaultId': vaultId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CredentialPassword;
      return this.apiClient.callApi(
        '/vault/{vaultId}/credential/password/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/password/:id
     * @param {String} vaultId ID of vault
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CredentialPassword}
     */
    this.vaultGetCredentialpasswordId = function(vaultId, id) {
      return this.vaultGetCredentialpasswordIdWithHttpInfo(vaultId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services/:serviceId
     * @param {String} vaultId ID of vault
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VaultServices} and HTTP response
     */
    this.vaultGetServicesServiceIdWithHttpInfo = function(vaultId, serviceId) {
      var postBody = null;
      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling vaultGetServicesServiceId");
      }
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling vaultGetServicesServiceId");
      }

      var pathParams = {
        'vaultId': vaultId,
        'serviceId': serviceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = VaultServices;
      return this.apiClient.callApi(
        '/vault/{vaultId}/services/{serviceId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /services/:serviceId
     * @param {String} vaultId ID of vault
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VaultServices}
     */
    this.vaultGetServicesServiceId = function(vaultId, serviceId) {
      return this.vaultGetServicesServiceIdWithHttpInfo(vaultId, serviceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    this.vaultGetTagWithHttpInfo = function(vaultId) {
      var postBody = null;
      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling vaultGetTag");
      }

      var pathParams = {
        'vaultId': vaultId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi(
        '/vault/{vaultId}/tag', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    this.vaultGetTag = function(vaultId) {
      return this.vaultGetTagWithHttpInfo(vaultId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List
     * List vault
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @param {Object.<String, {String: String}>} opts.tag Filter by tag
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Vault>} and HTTP response
     */
    this.vaultListWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
        'name': opts['name'],
        'tag': opts['tag'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Vault];
      return this.apiClient.callApi(
        '/vault', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List
     * List vault
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @param {Object.<String, {String: String}>} opts.tag Filter by tag
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Vault>}
     */
    this.vaultList = function(opts) {
      return this.vaultListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    this.vaultListAccessrightsWithHttpInfo = function(vaultId) {
      var postBody = null;
      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling vaultListAccessrights");
      }

      var pathParams = {
        'vaultId': vaultId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['String'];
      return this.apiClient.callApi(
        '/vault/{vaultId}/accessrights', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    this.vaultListAccessrights = function(vaultId) {
      return this.vaultListAccessrightsWithHttpInfo(vaultId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/certificate
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/CredentialCertificate>} and HTTP response
     */
    this.vaultListCredentialcertificateWithHttpInfo = function(vaultId) {
      var postBody = null;
      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling vaultListCredentialcertificate");
      }

      var pathParams = {
        'vaultId': vaultId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [CredentialCertificate];
      return this.apiClient.callApi(
        '/vault/{vaultId}/credential/certificate', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/certificate
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/CredentialCertificate>}
     */
    this.vaultListCredentialcertificate = function(vaultId) {
      return this.vaultListCredentialcertificateWithHttpInfo(vaultId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/CredentialPassword>} and HTTP response
     */
    this.vaultListCredentialpasswordWithHttpInfo = function(vaultId) {
      var postBody = null;
      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling vaultListCredentialpassword");
      }

      var pathParams = {
        'vaultId': vaultId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [CredentialPassword];
      return this.apiClient.callApi(
        '/vault/{vaultId}/credential/password', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/password
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/CredentialPassword>}
     */
    this.vaultListCredentialpassword = function(vaultId) {
      return this.vaultListCredentialpasswordWithHttpInfo(vaultId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /queue
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Event>} and HTTP response
     */
    this.vaultListQueueWithHttpInfo = function(vaultId) {
      var postBody = null;
      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling vaultListQueue");
      }

      var pathParams = {
        'vaultId': vaultId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Event];
      return this.apiClient.callApi(
        '/vault/{vaultId}/queue', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /queue
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Event>}
     */
    this.vaultListQueue = function(vaultId) {
      return this.vaultListQueueWithHttpInfo(vaultId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/VaultServices>} and HTTP response
     */
    this.vaultListServicesWithHttpInfo = function(vaultId) {
      var postBody = null;
      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling vaultListServices");
      }

      var pathParams = {
        'vaultId': vaultId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [VaultServices];
      return this.apiClient.callApi(
        '/vault/{vaultId}/services', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /services
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/VaultServices>}
     */
    this.vaultListServices = function(vaultId) {
      return this.vaultListServicesWithHttpInfo(vaultId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/certificate/:id
     * @param {String} vaultId ID of vault
     * @param {String} id id
     * @param {module:model/VaultPatchCredentialcertificateId} vaultPatchCredentialcertificateId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CredentialCertificate} and HTTP response
     */
    this.vaultPatchCredentialcertificateIdWithHttpInfo = function(vaultId, id, vaultPatchCredentialcertificateId) {
      var postBody = vaultPatchCredentialcertificateId;
      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling vaultPatchCredentialcertificateId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling vaultPatchCredentialcertificateId");
      }
      // verify the required parameter 'vaultPatchCredentialcertificateId' is set
      if (vaultPatchCredentialcertificateId === undefined || vaultPatchCredentialcertificateId === null) {
        throw new Error("Missing the required parameter 'vaultPatchCredentialcertificateId' when calling vaultPatchCredentialcertificateId");
      }

      var pathParams = {
        'vaultId': vaultId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CredentialCertificate;
      return this.apiClient.callApi(
        '/vault/{vaultId}/credential/certificate/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/certificate/:id
     * @param {String} vaultId ID of vault
     * @param {String} id id
     * @param {module:model/VaultPatchCredentialcertificateId} vaultPatchCredentialcertificateId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CredentialCertificate}
     */
    this.vaultPatchCredentialcertificateId = function(vaultId, id, vaultPatchCredentialcertificateId) {
      return this.vaultPatchCredentialcertificateIdWithHttpInfo(vaultId, id, vaultPatchCredentialcertificateId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password/:id
     * @param {String} vaultId ID of vault
     * @param {String} id id
     * @param {module:model/VaultPatchCredentialpasswordId} vaultPatchCredentialpasswordId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CredentialPassword} and HTTP response
     */
    this.vaultPatchCredentialpasswordIdWithHttpInfo = function(vaultId, id, vaultPatchCredentialpasswordId) {
      var postBody = vaultPatchCredentialpasswordId;
      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling vaultPatchCredentialpasswordId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling vaultPatchCredentialpasswordId");
      }
      // verify the required parameter 'vaultPatchCredentialpasswordId' is set
      if (vaultPatchCredentialpasswordId === undefined || vaultPatchCredentialpasswordId === null) {
        throw new Error("Missing the required parameter 'vaultPatchCredentialpasswordId' when calling vaultPatchCredentialpasswordId");
      }

      var pathParams = {
        'vaultId': vaultId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CredentialPassword;
      return this.apiClient.callApi(
        '/vault/{vaultId}/credential/password/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/password/:id
     * @param {String} vaultId ID of vault
     * @param {String} id id
     * @param {module:model/VaultPatchCredentialpasswordId} vaultPatchCredentialpasswordId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CredentialPassword}
     */
    this.vaultPatchCredentialpasswordId = function(vaultId, id, vaultPatchCredentialpasswordId) {
      return this.vaultPatchCredentialpasswordIdWithHttpInfo(vaultId, id, vaultPatchCredentialpasswordId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} vaultId ID of vault
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    this.vaultPatchTagWithHttpInfo = function(vaultId, requestBody) {
      var postBody = requestBody;
      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling vaultPatchTag");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling vaultPatchTag");
      }

      var pathParams = {
        'vaultId': vaultId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi(
        '/vault/{vaultId}/tag', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /tag
     * @param {String} vaultId ID of vault
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    this.vaultPatchTag = function(vaultId, requestBody) {
      return this.vaultPatchTagWithHttpInfo(vaultId, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} vaultId ID of vault
     * @param {module:model/VaultPostAccessrights} vaultPostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vault} and HTTP response
     */
    this.vaultPostAccessrightsWithHttpInfo = function(vaultId, vaultPostAccessrights) {
      var postBody = vaultPostAccessrights;
      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling vaultPostAccessrights");
      }
      // verify the required parameter 'vaultPostAccessrights' is set
      if (vaultPostAccessrights === undefined || vaultPostAccessrights === null) {
        throw new Error("Missing the required parameter 'vaultPostAccessrights' when calling vaultPostAccessrights");
      }

      var pathParams = {
        'vaultId': vaultId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Vault;
      return this.apiClient.callApi(
        '/vault/{vaultId}/accessrights', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /accessrights
     * @param {String} vaultId ID of vault
     * @param {module:model/VaultPostAccessrights} vaultPostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vault}
     */
    this.vaultPostAccessrights = function(vaultId, vaultPostAccessrights) {
      return this.vaultPostAccessrightsWithHttpInfo(vaultId, vaultPostAccessrights)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/certificate
     * @param {String} vaultId ID of vault
     * @param {module:model/VaultPostCredentialcertificate} vaultPostCredentialcertificate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CredentialCertificate} and HTTP response
     */
    this.vaultPostCredentialcertificateWithHttpInfo = function(vaultId, vaultPostCredentialcertificate) {
      var postBody = vaultPostCredentialcertificate;
      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling vaultPostCredentialcertificate");
      }
      // verify the required parameter 'vaultPostCredentialcertificate' is set
      if (vaultPostCredentialcertificate === undefined || vaultPostCredentialcertificate === null) {
        throw new Error("Missing the required parameter 'vaultPostCredentialcertificate' when calling vaultPostCredentialcertificate");
      }

      var pathParams = {
        'vaultId': vaultId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CredentialCertificate;
      return this.apiClient.callApi(
        '/vault/{vaultId}/credential/certificate', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/certificate
     * @param {String} vaultId ID of vault
     * @param {module:model/VaultPostCredentialcertificate} vaultPostCredentialcertificate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CredentialCertificate}
     */
    this.vaultPostCredentialcertificate = function(vaultId, vaultPostCredentialcertificate) {
      return this.vaultPostCredentialcertificateWithHttpInfo(vaultId, vaultPostCredentialcertificate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /credential/password
     * @param {String} vaultId ID of vault
     * @param {module:model/VaultPostCredentialpassword} vaultPostCredentialpassword 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CredentialPassword} and HTTP response
     */
    this.vaultPostCredentialpasswordWithHttpInfo = function(vaultId, vaultPostCredentialpassword) {
      var postBody = vaultPostCredentialpassword;
      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling vaultPostCredentialpassword");
      }
      // verify the required parameter 'vaultPostCredentialpassword' is set
      if (vaultPostCredentialpassword === undefined || vaultPostCredentialpassword === null) {
        throw new Error("Missing the required parameter 'vaultPostCredentialpassword' when calling vaultPostCredentialpassword");
      }

      var pathParams = {
        'vaultId': vaultId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CredentialPassword;
      return this.apiClient.callApi(
        '/vault/{vaultId}/credential/password', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * /credential/password
     * @param {String} vaultId ID of vault
     * @param {module:model/VaultPostCredentialpassword} vaultPostCredentialpassword 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CredentialPassword}
     */
    this.vaultPostCredentialpassword = function(vaultId, vaultPostCredentialpassword) {
      return this.vaultPostCredentialpasswordWithHttpInfo(vaultId, vaultPostCredentialpassword)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get
     * Returns a single vault
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vault} and HTTP response
     */
    this.vaultShowWithHttpInfo = function(vaultId) {
      var postBody = null;
      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling vaultShow");
      }

      var pathParams = {
        'vaultId': vaultId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Vault;
      return this.apiClient.callApi(
        '/vault/{vaultId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get
     * Returns a single vault
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vault}
     */
    this.vaultShow = function(vaultId) {
      return this.vaultShowWithHttpInfo(vaultId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update
     * Returns modified vault
     * @param {String} vaultId ID of vault
     * @param {module:model/VaultUpdate} vaultUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vault} and HTTP response
     */
    this.vaultUpdateWithHttpInfo = function(vaultId, vaultUpdate) {
      var postBody = vaultUpdate;
      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling vaultUpdate");
      }
      // verify the required parameter 'vaultUpdate' is set
      if (vaultUpdate === undefined || vaultUpdate === null) {
        throw new Error("Missing the required parameter 'vaultUpdate' when calling vaultUpdate");
      }

      var pathParams = {
        'vaultId': vaultId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Vault;
      return this.apiClient.callApi(
        '/vault/{vaultId}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update
     * Returns modified vault
     * @param {String} vaultId ID of vault
     * @param {module:model/VaultUpdate} vaultUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vault}
     */
    this.vaultUpdate = function(vaultId, vaultUpdate) {
      return this.vaultUpdateWithHttpInfo(vaultId, vaultUpdate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
