/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Event from '../model/Event';
import Reservation from '../model/Reservation';
import ReservationActionAssign from '../model/ReservationActionAssign';
import ReservationCreate from '../model/ReservationCreate';
import ReservationPostAccessrights from '../model/ReservationPostAccessrights';
import ReservationServices from '../model/ReservationServices';
import ReservationUpdate from '../model/ReservationUpdate';

/**
* Reservation service.
* @module api/ReservationApi
* @version 0.0.2
*/
export default class ReservationApi {

    /**
    * Constructs a new ReservationApi. 
    * @alias module:api/ReservationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * /actions/assign
     * Action assign
     * @param {String} reservationId ID of reservation
     * @param {module:model/ReservationActionAssign} reservationActionAssign 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Reservation} and HTTP response
     */
    reservationActionAssignWithHttpInfo(reservationId, reservationActionAssign) {
      let postBody = reservationActionAssign;

      // verify the required parameter 'reservationId' is set
      if (reservationId === undefined || reservationId === null) {
        throw new Error("Missing the required parameter 'reservationId' when calling reservationActionAssign");
      }

      // verify the required parameter 'reservationActionAssign' is set
      if (reservationActionAssign === undefined || reservationActionAssign === null) {
        throw new Error("Missing the required parameter 'reservationActionAssign' when calling reservationActionAssign");
      }


      let pathParams = {
        'reservationId': reservationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Reservation;

      return this.apiClient.callApi(
        '/reservation/{reservationId}/actions/assign', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /actions/assign
     * Action assign
     * @param {String} reservationId ID of reservation
     * @param {module:model/ReservationActionAssign} reservationActionAssign 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Reservation}
     */
    reservationActionAssign(reservationId, reservationActionAssign) {
      return this.reservationActionAssignWithHttpInfo(reservationId, reservationActionAssign)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/extend
     * Action extend
     * @param {String} reservationId ID of reservation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Reservation} and HTTP response
     */
    reservationActionExtendWithHttpInfo(reservationId) {
      let postBody = null;

      // verify the required parameter 'reservationId' is set
      if (reservationId === undefined || reservationId === null) {
        throw new Error("Missing the required parameter 'reservationId' when calling reservationActionExtend");
      }


      let pathParams = {
        'reservationId': reservationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Reservation;

      return this.apiClient.callApi(
        '/reservation/{reservationId}/actions/extend', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /actions/extend
     * Action extend
     * @param {String} reservationId ID of reservation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Reservation}
     */
    reservationActionExtend(reservationId) {
      return this.reservationActionExtendWithHttpInfo(reservationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/unassign
     * Action unassign
     * @param {String} reservationId ID of reservation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Reservation} and HTTP response
     */
    reservationActionUnassignWithHttpInfo(reservationId) {
      let postBody = null;

      // verify the required parameter 'reservationId' is set
      if (reservationId === undefined || reservationId === null) {
        throw new Error("Missing the required parameter 'reservationId' when calling reservationActionUnassign");
      }


      let pathParams = {
        'reservationId': reservationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Reservation;

      return this.apiClient.callApi(
        '/reservation/{reservationId}/actions/unassign', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /actions/unassign
     * Action unassign
     * @param {String} reservationId ID of reservation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Reservation}
     */
    reservationActionUnassign(reservationId) {
      return this.reservationActionUnassignWithHttpInfo(reservationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create
     * Create reservation
     * @param {module:model/ReservationCreate} reservationCreate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Reservation} and HTTP response
     */
    reservationCreateWithHttpInfo(reservationCreate) {
      let postBody = reservationCreate;

      // verify the required parameter 'reservationCreate' is set
      if (reservationCreate === undefined || reservationCreate === null) {
        throw new Error("Missing the required parameter 'reservationCreate' when calling reservationCreate");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Reservation;

      return this.apiClient.callApi(
        '/reservation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create
     * Create reservation
     * @param {module:model/ReservationCreate} reservationCreate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Reservation}
     */
    reservationCreate(reservationCreate) {
      return this.reservationCreateWithHttpInfo(reservationCreate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete
     * @param {String} reservationId ID of reservation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    reservationDeleteWithHttpInfo(reservationId) {
      let postBody = null;

      // verify the required parameter 'reservationId' is set
      if (reservationId === undefined || reservationId === null) {
        throw new Error("Missing the required parameter 'reservationId' when calling reservationDelete");
      }


      let pathParams = {
        'reservationId': reservationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/reservation/{reservationId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete
     * @param {String} reservationId ID of reservation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    reservationDelete(reservationId) {
      return this.reservationDeleteWithHttpInfo(reservationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights/:identity
     * @param {String} reservationId ID of reservation
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Reservation} and HTTP response
     */
    reservationDeleteAccessrightsIdentityWithHttpInfo(reservationId, identity) {
      let postBody = null;

      // verify the required parameter 'reservationId' is set
      if (reservationId === undefined || reservationId === null) {
        throw new Error("Missing the required parameter 'reservationId' when calling reservationDeleteAccessrightsIdentity");
      }

      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling reservationDeleteAccessrightsIdentity");
      }


      let pathParams = {
        'reservationId': reservationId,
        'identity': identity
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Reservation;

      return this.apiClient.callApi(
        '/reservation/{reservationId}/accessrights/{identity}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /accessrights/:identity
     * @param {String} reservationId ID of reservation
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Reservation}
     */
    reservationDeleteAccessrightsIdentity(reservationId, identity) {
      return this.reservationDeleteAccessrightsIdentityWithHttpInfo(reservationId, identity)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag/:key
     * @param {String} reservationId ID of reservation
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    reservationDeleteTagKeyWithHttpInfo(reservationId, key) {
      let postBody = null;

      // verify the required parameter 'reservationId' is set
      if (reservationId === undefined || reservationId === null) {
        throw new Error("Missing the required parameter 'reservationId' when calling reservationDeleteTagKey");
      }

      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling reservationDeleteTagKey");
      }


      let pathParams = {
        'reservationId': reservationId,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/reservation/{reservationId}/tag/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /tag/:key
     * @param {String} reservationId ID of reservation
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    reservationDeleteTagKey(reservationId, key) {
      return this.reservationDeleteTagKeyWithHttpInfo(reservationId, key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services/:serviceId
     * @param {String} reservationId ID of reservation
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ReservationServices} and HTTP response
     */
    reservationGetServicesServiceIdWithHttpInfo(reservationId, serviceId) {
      let postBody = null;

      // verify the required parameter 'reservationId' is set
      if (reservationId === undefined || reservationId === null) {
        throw new Error("Missing the required parameter 'reservationId' when calling reservationGetServicesServiceId");
      }

      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling reservationGetServicesServiceId");
      }


      let pathParams = {
        'reservationId': reservationId,
        'serviceId': serviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReservationServices;

      return this.apiClient.callApi(
        '/reservation/{reservationId}/services/{serviceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /services/:serviceId
     * @param {String} reservationId ID of reservation
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ReservationServices}
     */
    reservationGetServicesServiceId(reservationId, serviceId) {
      return this.reservationGetServicesServiceIdWithHttpInfo(reservationId, serviceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} reservationId ID of reservation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    reservationGetTagWithHttpInfo(reservationId) {
      let postBody = null;

      // verify the required parameter 'reservationId' is set
      if (reservationId === undefined || reservationId === null) {
        throw new Error("Missing the required parameter 'reservationId' when calling reservationGetTag");
      }


      let pathParams = {
        'reservationId': reservationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/reservation/{reservationId}/tag', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /tag
     * @param {String} reservationId ID of reservation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    reservationGetTag(reservationId) {
      return this.reservationGetTagWithHttpInfo(reservationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List
     * List reservation
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Reservation>} and HTTP response
     */
    reservationListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Reservation];

      return this.apiClient.callApi(
        '/reservation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List
     * List reservation
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Reservation>}
     */
    reservationList(opts) {
      return this.reservationListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} reservationId ID of reservation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    reservationListAccessrightsWithHttpInfo(reservationId) {
      let postBody = null;

      // verify the required parameter 'reservationId' is set
      if (reservationId === undefined || reservationId === null) {
        throw new Error("Missing the required parameter 'reservationId' when calling reservationListAccessrights");
      }


      let pathParams = {
        'reservationId': reservationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];

      return this.apiClient.callApi(
        '/reservation/{reservationId}/accessrights', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /accessrights
     * @param {String} reservationId ID of reservation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    reservationListAccessrights(reservationId) {
      return this.reservationListAccessrightsWithHttpInfo(reservationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /queue
     * @param {String} reservationId ID of reservation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Event>} and HTTP response
     */
    reservationListQueueWithHttpInfo(reservationId) {
      let postBody = null;

      // verify the required parameter 'reservationId' is set
      if (reservationId === undefined || reservationId === null) {
        throw new Error("Missing the required parameter 'reservationId' when calling reservationListQueue");
      }


      let pathParams = {
        'reservationId': reservationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Event];

      return this.apiClient.callApi(
        '/reservation/{reservationId}/queue', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /queue
     * @param {String} reservationId ID of reservation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Event>}
     */
    reservationListQueue(reservationId) {
      return this.reservationListQueueWithHttpInfo(reservationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services
     * @param {String} reservationId ID of reservation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ReservationServices>} and HTTP response
     */
    reservationListServicesWithHttpInfo(reservationId) {
      let postBody = null;

      // verify the required parameter 'reservationId' is set
      if (reservationId === undefined || reservationId === null) {
        throw new Error("Missing the required parameter 'reservationId' when calling reservationListServices");
      }


      let pathParams = {
        'reservationId': reservationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ReservationServices];

      return this.apiClient.callApi(
        '/reservation/{reservationId}/services', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /services
     * @param {String} reservationId ID of reservation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ReservationServices>}
     */
    reservationListServices(reservationId) {
      return this.reservationListServicesWithHttpInfo(reservationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} reservationId ID of reservation
     * @param {Object} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    reservationPatchTagWithHttpInfo(reservationId, body) {
      let postBody = body;

      // verify the required parameter 'reservationId' is set
      if (reservationId === undefined || reservationId === null) {
        throw new Error("Missing the required parameter 'reservationId' when calling reservationPatchTag");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling reservationPatchTag");
      }


      let pathParams = {
        'reservationId': reservationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/reservation/{reservationId}/tag', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /tag
     * @param {String} reservationId ID of reservation
     * @param {Object} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    reservationPatchTag(reservationId, body) {
      return this.reservationPatchTagWithHttpInfo(reservationId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} reservationId ID of reservation
     * @param {module:model/ReservationPostAccessrights} reservationPostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    reservationPostAccessrightsWithHttpInfo(reservationId, reservationPostAccessrights) {
      let postBody = reservationPostAccessrights;

      // verify the required parameter 'reservationId' is set
      if (reservationId === undefined || reservationId === null) {
        throw new Error("Missing the required parameter 'reservationId' when calling reservationPostAccessrights");
      }

      // verify the required parameter 'reservationPostAccessrights' is set
      if (reservationPostAccessrights === undefined || reservationPostAccessrights === null) {
        throw new Error("Missing the required parameter 'reservationPostAccessrights' when calling reservationPostAccessrights");
      }


      let pathParams = {
        'reservationId': reservationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/reservation/{reservationId}/accessrights', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /accessrights
     * @param {String} reservationId ID of reservation
     * @param {module:model/ReservationPostAccessrights} reservationPostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    reservationPostAccessrights(reservationId, reservationPostAccessrights) {
      return this.reservationPostAccessrightsWithHttpInfo(reservationId, reservationPostAccessrights)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get
     * Returns a single reservation
     * @param {String} reservationId ID of reservation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Reservation} and HTTP response
     */
    reservationShowWithHttpInfo(reservationId) {
      let postBody = null;

      // verify the required parameter 'reservationId' is set
      if (reservationId === undefined || reservationId === null) {
        throw new Error("Missing the required parameter 'reservationId' when calling reservationShow");
      }


      let pathParams = {
        'reservationId': reservationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Reservation;

      return this.apiClient.callApi(
        '/reservation/{reservationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get
     * Returns a single reservation
     * @param {String} reservationId ID of reservation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Reservation}
     */
    reservationShow(reservationId) {
      return this.reservationShowWithHttpInfo(reservationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update
     * Returns modified reservation
     * @param {String} reservationId ID of reservation
     * @param {module:model/ReservationUpdate} reservationUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Reservation} and HTTP response
     */
    reservationUpdateWithHttpInfo(reservationId, reservationUpdate) {
      let postBody = reservationUpdate;

      // verify the required parameter 'reservationId' is set
      if (reservationId === undefined || reservationId === null) {
        throw new Error("Missing the required parameter 'reservationId' when calling reservationUpdate");
      }

      // verify the required parameter 'reservationUpdate' is set
      if (reservationUpdate === undefined || reservationUpdate === null) {
        throw new Error("Missing the required parameter 'reservationUpdate' when calling reservationUpdate");
      }


      let pathParams = {
        'reservationId': reservationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'ServiceAccount', 'Session'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Reservation;

      return this.apiClient.callApi(
        '/reservation/{reservationId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update
     * Returns modified reservation
     * @param {String} reservationId ID of reservation
     * @param {module:model/ReservationUpdate} reservationUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Reservation}
     */
    reservationUpdate(reservationId, reservationUpdate) {
      return this.reservationUpdateWithHttpInfo(reservationId, reservationUpdate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
