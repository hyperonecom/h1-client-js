/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Event', 'model/Reservation', 'model/ReservationCreate', 'model/ReservationPostAccessrights', 'model/ReservationServices', 'model/ReservationUpdate'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Event'), require('../model/Reservation'), require('../model/ReservationCreate'), require('../model/ReservationPostAccessrights'), require('../model/ReservationServices'), require('../model/ReservationUpdate'));
  } else {
    // Browser globals (root is window)
    if (!root.HyperOneApi) {
      root.HyperOneApi = {};
    }
    root.HyperOneApi.ReservationApi = factory(root.HyperOneApi.ApiClient, root.HyperOneApi.Event, root.HyperOneApi.Reservation, root.HyperOneApi.ReservationCreate, root.HyperOneApi.ReservationPostAccessrights, root.HyperOneApi.ReservationServices, root.HyperOneApi.ReservationUpdate);
  }
}(this, function(ApiClient, Event, Reservation, ReservationCreate, ReservationPostAccessrights, ReservationServices, ReservationUpdate) {
  'use strict';

  /**
   * Reservation service.
   * @module api/ReservationApi
   * @version 1.0.0
   */

  /**
   * Constructs a new ReservationApi. 
   * @alias module:api/ReservationApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * /actions/assign
     * Action assign
     * @param {String} reservationId ID of reservation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Reservation} and HTTP response
     */
    this.reservationActionAssignWithHttpInfo = function(reservationId) {
      var postBody = null;

      // verify the required parameter 'reservationId' is set
      if (reservationId === undefined || reservationId === null) {
        throw new Error("Missing the required parameter 'reservationId' when calling reservationActionAssign");
      }


      var pathParams = {
        'reservationId': reservationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Reservation;

      return this.apiClient.callApi(
        '/reservation/{reservationId}/actions/assign', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /actions/assign
     * Action assign
     * @param {String} reservationId ID of reservation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Reservation}
     */
    this.reservationActionAssign = function(reservationId) {
      return this.reservationActionAssignWithHttpInfo(reservationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/extend
     * Action extend
     * @param {String} reservationId ID of reservation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Reservation} and HTTP response
     */
    this.reservationActionExtendWithHttpInfo = function(reservationId) {
      var postBody = null;

      // verify the required parameter 'reservationId' is set
      if (reservationId === undefined || reservationId === null) {
        throw new Error("Missing the required parameter 'reservationId' when calling reservationActionExtend");
      }


      var pathParams = {
        'reservationId': reservationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Reservation;

      return this.apiClient.callApi(
        '/reservation/{reservationId}/actions/extend', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /actions/extend
     * Action extend
     * @param {String} reservationId ID of reservation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Reservation}
     */
    this.reservationActionExtend = function(reservationId) {
      return this.reservationActionExtendWithHttpInfo(reservationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /actions/unassign
     * Action unassign
     * @param {String} reservationId ID of reservation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Reservation} and HTTP response
     */
    this.reservationActionUnassignWithHttpInfo = function(reservationId) {
      var postBody = null;

      // verify the required parameter 'reservationId' is set
      if (reservationId === undefined || reservationId === null) {
        throw new Error("Missing the required parameter 'reservationId' when calling reservationActionUnassign");
      }


      var pathParams = {
        'reservationId': reservationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Reservation;

      return this.apiClient.callApi(
        '/reservation/{reservationId}/actions/unassign', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /actions/unassign
     * Action unassign
     * @param {String} reservationId ID of reservation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Reservation}
     */
    this.reservationActionUnassign = function(reservationId) {
      return this.reservationActionUnassignWithHttpInfo(reservationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create
     * Create reservation
     * @param {module:model/ReservationCreate} reservationCreate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Reservation} and HTTP response
     */
    this.reservationCreateWithHttpInfo = function(reservationCreate) {
      var postBody = reservationCreate;

      // verify the required parameter 'reservationCreate' is set
      if (reservationCreate === undefined || reservationCreate === null) {
        throw new Error("Missing the required parameter 'reservationCreate' when calling reservationCreate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Reservation;

      return this.apiClient.callApi(
        '/reservation', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create
     * Create reservation
     * @param {module:model/ReservationCreate} reservationCreate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Reservation}
     */
    this.reservationCreate = function(reservationCreate) {
      return this.reservationCreateWithHttpInfo(reservationCreate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete
     * @param {String} reservationId ID of reservation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.reservationDeleteWithHttpInfo = function(reservationId) {
      var postBody = null;

      // verify the required parameter 'reservationId' is set
      if (reservationId === undefined || reservationId === null) {
        throw new Error("Missing the required parameter 'reservationId' when calling reservationDelete");
      }


      var pathParams = {
        'reservationId': reservationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/reservation/{reservationId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete
     * @param {String} reservationId ID of reservation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.reservationDelete = function(reservationId) {
      return this.reservationDeleteWithHttpInfo(reservationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights/:identity
     * @param {String} reservationId ID of reservation
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Reservation} and HTTP response
     */
    this.reservationDeleteAccessrightsIdentityWithHttpInfo = function(reservationId, identity) {
      var postBody = null;

      // verify the required parameter 'reservationId' is set
      if (reservationId === undefined || reservationId === null) {
        throw new Error("Missing the required parameter 'reservationId' when calling reservationDeleteAccessrightsIdentity");
      }

      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling reservationDeleteAccessrightsIdentity");
      }


      var pathParams = {
        'reservationId': reservationId,
        'identity': identity
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Reservation;

      return this.apiClient.callApi(
        '/reservation/{reservationId}/accessrights/{identity}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /accessrights/:identity
     * @param {String} reservationId ID of reservation
     * @param {String} identity identity
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Reservation}
     */
    this.reservationDeleteAccessrightsIdentity = function(reservationId, identity) {
      return this.reservationDeleteAccessrightsIdentityWithHttpInfo(reservationId, identity)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag/:key
     * @param {String} reservationId ID of reservation
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    this.reservationDeleteTagKeyWithHttpInfo = function(reservationId, key) {
      var postBody = null;

      // verify the required parameter 'reservationId' is set
      if (reservationId === undefined || reservationId === null) {
        throw new Error("Missing the required parameter 'reservationId' when calling reservationDeleteTagKey");
      }

      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling reservationDeleteTagKey");
      }


      var pathParams = {
        'reservationId': reservationId,
        'key': key
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/reservation/{reservationId}/tag/{key}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /tag/:key
     * @param {String} reservationId ID of reservation
     * @param {String} key key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    this.reservationDeleteTagKey = function(reservationId, key) {
      return this.reservationDeleteTagKeyWithHttpInfo(reservationId, key)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services/:serviceId
     * @param {String} reservationId ID of reservation
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ReservationServices} and HTTP response
     */
    this.reservationGetServicesServiceIdWithHttpInfo = function(reservationId, serviceId) {
      var postBody = null;

      // verify the required parameter 'reservationId' is set
      if (reservationId === undefined || reservationId === null) {
        throw new Error("Missing the required parameter 'reservationId' when calling reservationGetServicesServiceId");
      }

      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling reservationGetServicesServiceId");
      }


      var pathParams = {
        'reservationId': reservationId,
        'serviceId': serviceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ReservationServices;

      return this.apiClient.callApi(
        '/reservation/{reservationId}/services/{serviceId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /services/:serviceId
     * @param {String} reservationId ID of reservation
     * @param {String} serviceId serviceId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ReservationServices}
     */
    this.reservationGetServicesServiceId = function(reservationId, serviceId) {
      return this.reservationGetServicesServiceIdWithHttpInfo(reservationId, serviceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} reservationId ID of reservation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    this.reservationGetTagWithHttpInfo = function(reservationId) {
      var postBody = null;

      // verify the required parameter 'reservationId' is set
      if (reservationId === undefined || reservationId === null) {
        throw new Error("Missing the required parameter 'reservationId' when calling reservationGetTag");
      }


      var pathParams = {
        'reservationId': reservationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/reservation/{reservationId}/tag', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /tag
     * @param {String} reservationId ID of reservation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    this.reservationGetTag = function(reservationId) {
      return this.reservationGetTagWithHttpInfo(reservationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List
     * List reservation
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Reservation>} and HTTP response
     */
    this.reservationListWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'name': opts['name'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Reservation];

      return this.apiClient.callApi(
        '/reservation', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List
     * List reservation
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Reservation>}
     */
    this.reservationList = function(opts) {
      return this.reservationListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} reservationId ID of reservation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    this.reservationListAccessrightsWithHttpInfo = function(reservationId) {
      var postBody = null;

      // verify the required parameter 'reservationId' is set
      if (reservationId === undefined || reservationId === null) {
        throw new Error("Missing the required parameter 'reservationId' when calling reservationListAccessrights");
      }


      var pathParams = {
        'reservationId': reservationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/reservation/{reservationId}/accessrights', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /accessrights
     * @param {String} reservationId ID of reservation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    this.reservationListAccessrights = function(reservationId) {
      return this.reservationListAccessrightsWithHttpInfo(reservationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /queue
     * @param {String} reservationId ID of reservation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Event>} and HTTP response
     */
    this.reservationListQueueWithHttpInfo = function(reservationId) {
      var postBody = null;

      // verify the required parameter 'reservationId' is set
      if (reservationId === undefined || reservationId === null) {
        throw new Error("Missing the required parameter 'reservationId' when calling reservationListQueue");
      }


      var pathParams = {
        'reservationId': reservationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Event];

      return this.apiClient.callApi(
        '/reservation/{reservationId}/queue', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /queue
     * @param {String} reservationId ID of reservation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Event>}
     */
    this.reservationListQueue = function(reservationId) {
      return this.reservationListQueueWithHttpInfo(reservationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /services
     * @param {String} reservationId ID of reservation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ReservationServices>} and HTTP response
     */
    this.reservationListServicesWithHttpInfo = function(reservationId) {
      var postBody = null;

      // verify the required parameter 'reservationId' is set
      if (reservationId === undefined || reservationId === null) {
        throw new Error("Missing the required parameter 'reservationId' when calling reservationListServices");
      }


      var pathParams = {
        'reservationId': reservationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [ReservationServices];

      return this.apiClient.callApi(
        '/reservation/{reservationId}/services', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /services
     * @param {String} reservationId ID of reservation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ReservationServices>}
     */
    this.reservationListServices = function(reservationId) {
      return this.reservationListServicesWithHttpInfo(reservationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /tag
     * @param {String} reservationId ID of reservation
     * @param {Object} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    this.reservationPatchTagWithHttpInfo = function(reservationId, body) {
      var postBody = body;

      // verify the required parameter 'reservationId' is set
      if (reservationId === undefined || reservationId === null) {
        throw new Error("Missing the required parameter 'reservationId' when calling reservationPatchTag");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling reservationPatchTag");
      }


      var pathParams = {
        'reservationId': reservationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/reservation/{reservationId}/tag', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /tag
     * @param {String} reservationId ID of reservation
     * @param {Object} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    this.reservationPatchTag = function(reservationId, body) {
      return this.reservationPatchTagWithHttpInfo(reservationId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * /accessrights
     * @param {String} reservationId ID of reservation
     * @param {module:model/ReservationPostAccessrights} reservationPostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    this.reservationPostAccessrightsWithHttpInfo = function(reservationId, reservationPostAccessrights) {
      var postBody = reservationPostAccessrights;

      // verify the required parameter 'reservationId' is set
      if (reservationId === undefined || reservationId === null) {
        throw new Error("Missing the required parameter 'reservationId' when calling reservationPostAccessrights");
      }

      // verify the required parameter 'reservationPostAccessrights' is set
      if (reservationPostAccessrights === undefined || reservationPostAccessrights === null) {
        throw new Error("Missing the required parameter 'reservationPostAccessrights' when calling reservationPostAccessrights");
      }


      var pathParams = {
        'reservationId': reservationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/reservation/{reservationId}/accessrights', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * /accessrights
     * @param {String} reservationId ID of reservation
     * @param {module:model/ReservationPostAccessrights} reservationPostAccessrights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    this.reservationPostAccessrights = function(reservationId, reservationPostAccessrights) {
      return this.reservationPostAccessrightsWithHttpInfo(reservationId, reservationPostAccessrights)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get
     * Returns a single reservation
     * @param {String} reservationId ID of reservation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Reservation} and HTTP response
     */
    this.reservationShowWithHttpInfo = function(reservationId) {
      var postBody = null;

      // verify the required parameter 'reservationId' is set
      if (reservationId === undefined || reservationId === null) {
        throw new Error("Missing the required parameter 'reservationId' when calling reservationShow");
      }


      var pathParams = {
        'reservationId': reservationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Reservation;

      return this.apiClient.callApi(
        '/reservation/{reservationId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get
     * Returns a single reservation
     * @param {String} reservationId ID of reservation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Reservation}
     */
    this.reservationShow = function(reservationId) {
      return this.reservationShowWithHttpInfo(reservationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update
     * Returns modified reservation
     * @param {String} reservationId ID of reservation
     * @param {module:model/ReservationUpdate} reservationUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Reservation} and HTTP response
     */
    this.reservationUpdateWithHttpInfo = function(reservationId, reservationUpdate) {
      var postBody = reservationUpdate;

      // verify the required parameter 'reservationId' is set
      if (reservationId === undefined || reservationId === null) {
        throw new Error("Missing the required parameter 'reservationId' when calling reservationUpdate");
      }

      // verify the required parameter 'reservationUpdate' is set
      if (reservationUpdate === undefined || reservationUpdate === null) {
        throw new Error("Missing the required parameter 'reservationUpdate' when calling reservationUpdate");
      }


      var pathParams = {
        'reservationId': reservationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Reservation;

      return this.apiClient.callApi(
        '/reservation/{reservationId}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update
     * Returns modified reservation
     * @param {String} reservationId ID of reservation
     * @param {module:model/ReservationUpdate} reservationUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Reservation}
     */
    this.reservationUpdate = function(reservationId, reservationUpdate) {
      return this.reservationUpdateWithHttpInfo(reservationId, reservationUpdate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
